package me.xginko.aef.utils;

import com.cryptomorin.xseries.XEntityType;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Projectile;
import org.bukkit.entity.Vehicle;
import org.bukkit.inventory.InventoryHolder;

import java.util.Arrays;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

public class EntityUtil {

    public static final Set<EntityType> MINECARTS = Arrays.stream(XEntityType.values())
            .filter(xEntityType -> xEntityType.name().toUpperCase().contains("MINECART"))
            .filter(XEntityType::isSupported)
            .map(XEntityType::get)
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    public static final Set<EntityType> ITEM_FRAMES = Arrays.stream(XEntityType.values())
            .filter(xEntityType -> xEntityType.name().toUpperCase().contains("ITEM_FRAME"))
            .filter(XEntityType::isSupported)
            .map(XEntityType::get)
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    private static final Map<EntityType, Boolean> IS_INVHOLDER_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isInventoryHolder(Entity entity) {
        if (entity == null) return false;
        return IS_INVHOLDER_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof InventoryHolder);
    }

    private static final Map<EntityType, Boolean> IS_CHESTABLE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isChestableHorse(Entity entity) {
        if (entity == null) return false;
        return IS_CHESTABLE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof ChestedHorse);
    }

    private static final Map<EntityType, Boolean> IS_LIVING_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isLivingEntity(Entity entity) {
        if (entity == null) return false;
        return IS_LIVING_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof LivingEntity);
    }

    private static final Map<EntityType, Boolean> IS_VEHICLE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isVehicle(Entity entity) {
        if (entity == null) return false;
        return IS_VEHICLE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof Vehicle);
    }

    private static final Map<EntityType, Boolean> IS_PROJECTILE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isProjectile(Entity entity) {
        if (entity == null) return false;
        return IS_PROJECTILE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof Projectile);
    }
}
