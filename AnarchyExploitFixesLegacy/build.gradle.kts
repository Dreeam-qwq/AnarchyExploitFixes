import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import net.raphimc.javadowngrader.gradle.task.DowngradeJarTask

plugins {
    id("me.xginko.aef.wrapper")
    alias(libs.plugins.downgradeJava)
    alias(libs.plugins.shadow)
}

dependencies {
    implementation(project(":Shared"))
    compileOnly(libs.paper12)
    implementation(libs.xseries) // cross-version support
    implementation(libs.hikaricp)
    implementation(libs.caffeineJ8)
}

configure<JavaPluginExtension> {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

tasks {
    shadowJar {
        archiveFileName = "${rootProject.name}-${project.name}-${project.version}-java17.${archiveExtension.get()}"
        exclude(
            "com/cryptomorin/xseries/XBiome*",
            "com/cryptomorin/xseries/XEntity*",
            "com/cryptomorin/xseries/XPotion*",
            "com/cryptomorin/xseries/NMSExtras*",
            "com/cryptomorin/xseries/NoteBlockMusic*",
            "com/cryptomorin/xseries/SkullCacheListener*"
        )
        relocate("io.github.thatsmusic99.configurationmaster", "me.xginko.aef.libs.configmaster")
        relocate("org.reflections", "me.xginko.aef.libs.reflections")
        relocate("com.zaxxer", "me.xginko.aef.libs.zaxxer")
        relocate("org.apache.commons.math3", "me.xginko.aef.libs.fastmath")
        relocate("com.github.benmanes.caffeine", "me.xginko.aef.libs.caffeine")
        relocate("io.papermc.lib", "me.xginko.aef.libs.paperlib")
        relocate("de.tr7zw.changeme.nbtapi", "me.xginko.aef.libs.nbtapi")
        relocate("org.bstats", "me.xginko.aef.libs.bstats")
        relocate("com.cryptomorin.xseries", "me.xginko.aef.libs.xseries")
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        dependsOn(shadowJar.get())
        from(zipTree(shadowJar.get().archiveFile))
        finalizedBy("java8Jar")
    }
    val java8Jar = register<DowngradeJarTask>("java8Jar") {
        input.set(shadowJar.get().archiveFile.get().asFile)
        dependsOn(jar)
        finalizedBy("fixJava8FileName")
    }
    register<Copy>("fixJava8FileName") {
        val outputFolder = projectDir.resolve("build/libs")
        val inputName = "${rootProject.name}-${project.name}-${project.version}-java17-downgraded.jar"
        val outputName = "${rootProject.name}-${project.name}-${project.version}.jar"
        from(outputFolder)
        include(inputName)
        destinationDir = outputFolder
        rename(inputName, outputName)
        dependsOn(java8Jar)
    }
}
