package me.xginko.aef.utils.models;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.util.Iterator;
import java.util.Set;
import java.util.concurrent.TimeUnit;

public final class ExpiringSet<E> implements Iterable<E> {

    private final Cache<E, Object> cache;
    private static final Object PRESENT = new Object(); // Dummy value to associate with an Object in the backing Cache

    public ExpiringSet(long duration, TimeUnit unit) {
        this.cache = Caffeine.newBuilder().expireAfterWrite(duration, unit).build();
    }

    public ExpiringSet(Duration duration) {
        this.cache = Caffeine.newBuilder().expireAfterWrite(duration).build();
    }

    public void add(E item) {
        this.cache.put(item, PRESENT);
    }

    public boolean contains(E item) {
        return this.cache.getIfPresent(item) != null;
    }

    @NotNull
    @Override
    public Iterator<E> iterator() {
        return this.cache.asMap().keySet().iterator();
    }

    public Set<E> asSet() {
        return this.cache.asMap().keySet();
    }
}