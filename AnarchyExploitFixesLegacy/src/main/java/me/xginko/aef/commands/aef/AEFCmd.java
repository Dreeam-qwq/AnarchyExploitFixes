package me.xginko.aef.commands.aef;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.commands.AEFCommand;
import me.xginko.aef.commands.SubCommand;
import me.xginko.aef.commands.aef.subcommands.*;
import org.bukkit.command.Command;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class AEFCmd extends Command implements AEFCommand {

    private final @NotNull List<SubCommand> subCommands;
    private final @NotNull List<String> tabCompletes;

    public AEFCmd() {
        super(
                "aef",
                "AnarchyExploitFixes admin commands",
                "/aef <reload, version, disable, elytra, geared, lag>",
                Collections.emptyList()
        );
        this.subCommands = Arrays.asList(
                new ReloadSubCmd(),
                new VersionSubCmd(),
                new DisableSubCmd(),
                new LagSubCmd(),
                new ElytraSubCmd(),
                new GearedSubCmd()
        );
        this.tabCompletes = subCommands.stream().map(SubCommand::label).sorted().collect(Collectors.toList());
    }

    @Override
    public boolean shouldEnable() {
        return true;
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getCommandMap().register(plugin.getDescription().getName().toLowerCase(), this);
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        if (args.length == 1) {
            return tabCompletes;
        }

        if (args.length >= 2) {
            for (SubCommand subCommand : subCommands) {
                if (args[0].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.tabComplete(sender, alias, args);
                }
            }
        }

        return Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (args.length >= 1) {
            for (SubCommand subCommand : subCommands) {
                if (args[0].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.execute(sender, commandLabel, args);
                }
            }
        }

        // Show command overview
        return true;
    }
}
