package me.xginko.aef.modules.bedrock;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.World;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class FillOverworldFloorOnChunkload implements AEFModule, Listener {

    private final Set<String> exemptedWorlds;
    private final double pauseTPS;
    private final int floorY;
    private final boolean alsoCheckNewChunks, pauseOnLowTPS;

    public FillOverworldFloorOnChunkload() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        this.floorY = config.overworld_floor_min_y;
        this.alsoCheckNewChunks = config.getBoolean(configPath() + ".also-check-new-chunks", false,
                "Recommended to leave off. Only useful if world generation is broken for some reason.");
        this.exemptedWorlds = new HashSet<>(config.getList(configPath() + ".exempted-worlds",
                Arrays.asList("exampleworld", "exampleworld2"), "Case sensitive!"));
        this.pauseOnLowTPS = config.getBoolean(configPath() + ".pause-on-low-tps", true,
                "Pauses the task during low tps to avoid lag.");
        this.pauseTPS = config.getDouble(configPath() + ".pause-tps", 16.0,
                "The TPS at which bedrock filling will pause.");
    }

    @Override
    public String configPath() {
        return "bedrock.fill-in-bedrock.overworld-floor.fill-on-chunkload";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (!alsoCheckNewChunks && event.isNewChunk()) return;
        final World world = event.getWorld();
        if (world.getEnvironment() != World.Environment.NORMAL) return;
        if (exemptedWorlds.contains(world.getName())) return;
        if (pauseOnLowTPS && (AnarchyExploitFixes.getTPSCache().getTPS() <= pauseTPS)) return;

        ChunkUtil.createBedrockLayer(event.getChunk(), floorY);
    }
}
