package me.xginko.aef.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XEnchantment;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, preventHopperBypass, checkStored, doSomething;

    private final Enchantment binding_curse, vanishing_curse, crossbow_multishot, crossbow_piercing,
            trident_riptide, trident_loyalty, trident_channeling, mending, bow_arrow_infinite, tools_silk_touch,
            tools_loot_bonus_blocks, boots_depth_strider, boots_frost_walker, sword_damage_all, sword_damage_arthropods,
            sword_damage_undead, armor_protection_environmental, armor_protection_explosions, armor_protection_fire,
            armor_protection_projectile;

    private static final Enchantment[] DAMAGE_ENCHANTS = {
            XEnchantment.DAMAGE_ALL.getEnchant(),
            XEnchantment.DAMAGE_UNDEAD.getEnchant(),
            XEnchantment.DAMAGE_ARTHROPODS.getEnchant() };
    private static final Enchantment[] PROTECT_ENCHANTS = {
            XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant(),
            XEnchantment.PROTECTION_EXPLOSIONS.getEnchant(),
            XEnchantment.PROTECTION_FIRE.getEnchant(),
            XEnchantment.PROTECTION_PROJECTILE.getEnchant() };

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Reverts or prevents usage of ItemStacks with Enchantments that cannot coexist\n" +
                        "in vanilla survival minecraft.\n" +
                        "Examples: A bow with mending and infinity or armor with all protection enchantments.");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.doSomething = config.getBoolean(configPath() + ".delete-or-revert-item", false,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items", Collections.singletonList("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");

        this.binding_curse = XEnchantment.BINDING_CURSE.getEnchant();
        this.vanishing_curse = XEnchantment.VANISHING_CURSE.getEnchant();
        this.crossbow_multishot = XEnchantment.MULTISHOT.getEnchant();
        this.crossbow_piercing = XEnchantment.PIERCING.getEnchant();
        this.trident_riptide = XEnchantment.RIPTIDE.getEnchant();
        this.trident_loyalty = XEnchantment.LOYALTY.getEnchant();
        this.trident_channeling = XEnchantment.CHANNELING.getEnchant();
        this.mending = XEnchantment.MENDING.getEnchant();
        this.bow_arrow_infinite = XEnchantment.ARROW_INFINITE.getEnchant();
        this.tools_silk_touch = XEnchantment.SILK_TOUCH.getEnchant();
        this.tools_loot_bonus_blocks = XEnchantment.LOOT_BONUS_BLOCKS.getEnchant();
        this.boots_depth_strider = XEnchantment.DEPTH_STRIDER.getEnchant();
        this.boots_frost_walker = XEnchantment.FROST_WALKER.getEnchant();
        this.sword_damage_all = XEnchantment.DAMAGE_ALL.getEnchant();
        this.sword_damage_arthropods = XEnchantment.DAMAGE_ARTHROPODS.getEnchant();
        this.sword_damage_undead = XEnchantment.DAMAGE_UNDEAD.getEnchant();
        this.armor_protection_environmental = XEnchantment.PROTECTION_ENVIRONMENTAL.getEnchant();
        this.armor_protection_explosions = XEnchantment.PROTECTION_EXPLOSIONS.getEnchant();
        this.armor_protection_fire = XEnchantment.PROTECTION_FIRE.getEnchant();
        this.armor_protection_projectile = XEnchantment.PROTECTION_PROJECTILE.getEnchant();
    }

    @Override
    public String configPath() {
        return "illegals.enchantments.incompatible-enchants";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(getHopperListener(), plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();
            if (!enchantments.isEmpty()) {
                if (enchantments.contains(binding_curse) && enchantments.contains(vanishing_curse))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(bow_arrow_infinite) && enchantments.contains(mending))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(tools_silk_touch) && enchantments.contains(tools_loot_bonus_blocks))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(boots_depth_strider) && enchantments.contains(boots_frost_walker))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(crossbow_multishot) && enchantments.contains(crossbow_piercing))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(trident_riptide) && (enchantments.contains(trident_loyalty) || enchantments.contains(trident_channeling)))
                    return ItemLegality.ILLEGAL;

                int dmgEnchCount = 0;
                for (Enchantment damageEnchant : DAMAGE_ENCHANTS) {
                    if (enchantments.contains(damageEnchant)) {
                        dmgEnchCount++;
                        if (dmgEnchCount > 1) {
                            return ItemLegality.ILLEGAL;
                        }
                    }
                }

                int protEnchCount = 0;
                for (Enchantment protectEnchant : PROTECT_ENCHANTS) {
                    if (enchantments.contains(protectEnchant)) {
                        protEnchCount++;
                        if (protEnchCount > 1) {
                            return ItemLegality.ILLEGAL;
                        }
                    }
                }
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        switch (legality) {
            case CONTAINS_ILLEGAL:
                itemStack.setAmount(0);
                break;
            case ILLEGAL:
                final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();

                if (enchantments.contains(binding_curse) && enchantments.contains(vanishing_curse))
                    itemStack.removeEnchantment(binding_curse);
                if (enchantments.contains(crossbow_multishot) && enchantments.contains(crossbow_piercing))
                    itemStack.removeEnchantment(crossbow_multishot);
                if (enchantments.contains(trident_riptide) && (enchantments.contains(trident_loyalty) || enchantments.contains(trident_channeling)))
                    itemStack.removeEnchantment(trident_riptide);
                if (enchantments.contains(bow_arrow_infinite) && enchantments.contains(mending))
                    itemStack.removeEnchantment(bow_arrow_infinite);
                if (enchantments.contains(tools_silk_touch) && enchantments.contains(tools_loot_bonus_blocks))
                    itemStack.removeEnchantment(tools_loot_bonus_blocks);
                if (enchantments.contains(boots_depth_strider) && enchantments.contains(boots_frost_walker))
                    itemStack.removeEnchantment(boots_frost_walker);

                if (enchantments.contains(sword_damage_all)) { // Prefer keeping Sharpness enchantment if present
                    for (Enchantment dmgEnchant : DAMAGE_ENCHANTS) {
                        if (dmgEnchant != sword_damage_all) {
                            itemStack.removeEnchantment(dmgEnchant);
                        }
                    }
                } else if (enchantments.contains(sword_damage_arthropods) && enchantments.contains(sword_damage_undead)) {
                    itemStack.removeEnchantment(sword_damage_arthropods);
                }

                if (enchantments.contains(armor_protection_environmental)) { // Prefer keeping Protection enchantment if present
                    for (Enchantment protEnchant : PROTECT_ENCHANTS) {
                        if (protEnchant != armor_protection_environmental) {
                            itemStack.removeEnchantment(protEnchant);
                        }
                    }
                } else if (enchantments.contains(armor_protection_explosions)) { // If protection is present, prefer blast protection
                    for (Enchantment protEnchant : PROTECT_ENCHANTS) {
                        if (protEnchant != armor_protection_explosions) {
                            itemStack.removeEnchantment(protEnchant);
                        }
                    }
                } else if (enchantments.contains(armor_protection_projectile) && enchantments.contains(armor_protection_fire)) {
                    itemStack.removeEnchantment(armor_protection_fire); // If protection and blast protection is not present, prefer projectile protection
                }
        }
    }
}
