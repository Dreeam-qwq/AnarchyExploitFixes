package me.xginko.aef.modules.elytra;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.models.Disableable;
import org.bukkit.Chunk;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.world.ChunkLoadEvent;
import org.bukkit.util.NumberConversions;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

public class ElytraHelper implements AEFModule, Listener, Disableable {

    public static final double SPEED_TOLERANCE = 0.02;
    private static ElytraHelper instance;
    private final Set<UUID> new_chunk_players;
    private final int serverViewDistance;
    private final boolean calculate3D;
    private boolean playerViewDistanceSupported;

    public ElytraHelper() {
        instance = this;
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        this.serverViewDistance = plugin.getServer().getViewDistance();
        this.calculate3D = AnarchyExploitFixes.getConfiguration().elytra_calculate_3D;
        this.new_chunk_players = new HashSet<>(Math.max(16, plugin.getServer().getOnlinePlayers().size()));
        this.playerViewDistanceSupported = true;
    }

    public static ElytraHelper getInstance() {
        return instance;
    }

    @Override
    public String configPath() {
        return "elytra-helper";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        return config.elytra_enable_at_spawn || config.elytra_enable_global || config.elytra_enable_netherceiling;
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        for (Player player : event.getWorld().getPlayers()) {
            if (chunkDistanceSquared(event.getChunk(), player.getLocation()) < NumberConversions.square(getViewDistance(player))) {
                if (event.isNewChunk()) {
                    this.new_chunk_players.add(player.getUniqueId());
                } else {
                    this.new_chunk_players.remove(player.getUniqueId());
                }
            }
        }
    }

    /**
     * Since the distance here is only used to see whether a chunk is loaded roughly within the player's view distance,
     * we can resort to comparing squared distances.
     * This saves cpu usage as we don't have to use {@link Math#sqrt(double)} to get the accurate distance in chunks.
     */
    private static double chunkDistanceSquared(Chunk chunk, Location location) {
        return  NumberConversions.square(chunk.getX() - (location.getBlockX() >> 4)) +
                NumberConversions.square(chunk.getZ() - (location.getBlockZ() >> 4));
    }

    public double getBlocksPerTick(PlayerMoveEvent event) {
        if (calculate3D) return LocationUtil.getRelDistance3D(event.getTo(), event.getFrom());
        return LocationUtil.getRelDistance2D(event.getTo(), event.getFrom());
    }

    public boolean isInNewChunks(Player player) {
        return new_chunk_players.contains(player.getUniqueId());
    }

    public Location getSetbackLocation(PlayerMoveEvent event) {
        return event.getFrom();
    }

    public int getViewDistance(Player player) {
        if (!playerViewDistanceSupported) {
            return serverViewDistance;
        }

        try {
            return player.getViewDistance();
        } catch (Throwable t) {
            playerViewDistanceSupported = false;
            return serverViewDistance;
        }
    }
}
