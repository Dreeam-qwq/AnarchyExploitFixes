package me.xginko.aef.modules.patches;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.modules.patches.commandsign.SignCommandListener;
import me.xginko.aef.utils.CachingPermTool;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

public class CommandSign implements AEFModule {

    private final Listener signCommandListener;

    public CommandSign() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment(configPath() + ".enable",
                "Patch signs that have run_command NBT tags attached, allowing them to run a command\n" +
                        "with operator permissions on click.\n" +
                        "Creating them requires operator permissions. Therefore enable only if you had a rogue admin or backdoor incident.\n" +
                        "Will have the side effect of players being unable to dye signs in versions lower than 1.16.");
        this.signCommandListener = SignCommandListener.isSupported() ? new SignCommandListener() : new Listener() {
            @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
            private void onInteract(PlayerInteractEvent event) {
                if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
                if (!MaterialUtil.SIGNS.contains(event.getClickedBlock().getType())) return;
                if (!CachingPermTool.hasPermission(AEFPermission.BYPASS_PREVENTION_COMMANDSIGN, event.getPlayer())) {
                    event.setCancelled(true);
                }
            }
        };
    }

    @Override
    public String configPath() {
        return "patches.prevent-command-sign";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(signCommandListener, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }
}
