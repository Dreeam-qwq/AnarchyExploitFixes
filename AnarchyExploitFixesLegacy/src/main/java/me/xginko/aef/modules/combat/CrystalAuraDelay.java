package me.xginko.aef.modules.combat;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Material;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.time.Duration;
import java.util.UUID;

public class CrystalAuraDelay implements AEFModule, Listener {

    private final ExpiringSet<UUID> breakCooldowns, placeCooldowns;
    private final Material END_CRYSTAL;
    private final long breakDelayMillis, placeDelayMillis;
    private final boolean updateInv;

    public CrystalAuraDelay() {
        shouldEnable();
        this.END_CRYSTAL = XMaterial.END_CRYSTAL.parseMaterial();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.updateInv = config.getBoolean(configPath() + ".update-inventory-on-cancel", false,
                "Can help with desync in some cases but recommended to leave off unless needed.");
        this.breakDelayMillis = config.getInt(configPath() + ".break-delay-in-ticks", PaperLib.getMinecraftVersion() <= 12 ? -1 : 4,
                "This will not do anything in 1.12 because the event is broken. Use place delay instead.") * 50L;
        this.breakCooldowns = breakDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(breakDelayMillis));
        this.placeDelayMillis = config.getInt(configPath() + ".place-delay-in-ticks", PaperLib.getMinecraftVersion() <= 12 ? 4 : -1) * 50L;
        this.placeCooldowns = placeDelayMillis <= 0 ? null : new ExpiringSet<>(Duration.ofMillis(placeDelayMillis));
    }

    @Override
    public String configPath() {
        return "combat.crystal-aura.regular-delay";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCrystalBreak(EntityDamageByEntityEvent event) {
        if (breakDelayMillis <= 0) return;

        if (
                event.getEntityType() == EntityType.ENDER_CRYSTAL
                && event.getDamager().getType() == EntityType.PLAYER
        ) {
            if (breakCooldowns.contains(event.getDamager().getUniqueId())) {
                event.setCancelled(true);
                if (updateInv) ((Player) event.getDamager()).updateInventory();
            } else {
                breakCooldowns.add(event.getDamager().getUniqueId());
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCrystalPlace(PlayerInteractEvent event) {
        if (placeDelayMillis <= 0) return;
        if (event.getAction() != Action.RIGHT_CLICK_BLOCK) return;
        final ItemStack interactItem = event.getItem();
        if (interactItem == null || interactItem.getType() != END_CRYSTAL) return;

        if (placeCooldowns.contains(event.getPlayer().getUniqueId())) {
            event.setCancelled(true);
            if (updateInv) event.getPlayer().updateInventory();
        } else {
            placeCooldowns.add(event.getPlayer().getUniqueId());
        }
    }
}