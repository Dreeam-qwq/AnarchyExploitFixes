package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.util.Vector3i;
import com.github.retrooper.packetevents.wrapper.play.client.*;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.util.NumberConversions;

public class NoComExploit extends AEFPacketModule {

    private final double maxDistanceSquared;
    private final boolean log, kick;

    public NoComExploit() {
        super("patches.prevent-nocom-coordinate-exploit", PacketListenerPriority.HIGHEST);
        shouldEnable();
        config.addComment(configPath + ".enable",
                "Prevents the abusable mechanic used by the infamous \"No Comment\"\n" +
                "coordinate exploit, where the server responds to requests that are\n" +
                "far outside of the sending player's reach, therefore either crashing\n" +
                "or revealing positions loaded by other players.\n" +
                "More info on NoCom: https://www.youtube.com/watch?v=elqAh3GWRpA\n" +
                "This is still useful to keep enabled even if your version is not\n" +
                "affected by the NoCom vulnerability.");
        this.maxDistanceSquared = NumberConversions.square(config.getInt(configPath + ".max-distance", 24));
        this.log = config.getBoolean(configPath + ".log", false);
        this.kick = config.getBoolean(configPath + ".kick-player", false);
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(abstractListener);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(abstractListener);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        Vector3i blockPos;
        if (event.getPacketType() == PacketType.Play.Client.PLAYER_DIGGING) {
            blockPos = new WrapperPlayClientPlayerDigging(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.PLAYER_BLOCK_PLACEMENT) {
            blockPos = new WrapperPlayClientPlayerBlockPlacement(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_SIGN) {
            blockPos = new WrapperPlayClientUpdateSign(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.QUERY_BLOCK_NBT) {
            blockPos = new WrapperPlayClientQueryBlockNBT(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_COMMAND_BLOCK) {
            blockPos = new WrapperPlayClientUpdateCommandBlock(event).getPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_JIGSAW_BLOCK) {
            blockPos = new WrapperPlayClientUpdateJigsawBlock(event).getPosition();
        } else {
            return;
        }

        if (blockPos.x == 0 && blockPos.y == 0 && blockPos.z == 0) {
            return; // PacketTypes like PlayerDigging are also used for dropping and swapping items. This prevents false positives.
        }

        final Player player = (Player) event.getPlayer();
        if (player == null) return;

        if (distanceSquared(blockPos, player.getLocation()) > maxDistanceSquared) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }

    private double distanceSquared(final Vector3i packetPos, final Location playerPos) {
        return  NumberConversions.square(packetPos.x - playerPos.getX()) +
                NumberConversions.square(packetPos.y - playerPos.getY()) +
                NumberConversions.square(packetPos.z - playerPos.getZ());
    }
}
