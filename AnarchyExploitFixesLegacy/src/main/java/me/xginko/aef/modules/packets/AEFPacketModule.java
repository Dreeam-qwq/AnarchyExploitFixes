package me.xginko.aef.modules.packets;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import com.github.retrooper.packetevents.event.PacketListener;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.protocol.player.User;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.Disableable;
import me.xginko.aef.utils.models.ExpiringSet;

import java.time.Duration;
import java.util.Set;
import java.util.UUID;

public abstract class AEFPacketModule extends AEFModule implements PacketListener, Disableable {

    protected final PacketListenerAbstract abstractListener;

    private static final Cache<AEFPacketModule, Set<UUID>>
            LOG_COOLDOWNS = Caffeine.newBuilder().expireAfterWrite(Duration.ofMinutes(5)).build();

    public AEFPacketModule(String configPath, PacketListenerPriority priority) {
        super(configPath);
        this.abstractListener = asAbstract(priority);
    }

    public void onCancel(boolean log, boolean kick, User sender) {
        if (log) {
            Set<UUID> module_cooldown = LOG_COOLDOWNS.get(this, k -> new ExpiringSet<>(Duration.ofSeconds(5)));
            if (!module_cooldown.contains(sender.getUUID())) {
                info(sender.getName() + " failed to trigger exploit.");
                module_cooldown.add(sender.getUUID());
            }
        }

        if (kick) {
            sender.closeConnection();
        }
    }
}
