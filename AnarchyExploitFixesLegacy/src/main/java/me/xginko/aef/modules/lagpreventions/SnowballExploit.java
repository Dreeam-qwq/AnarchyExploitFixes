package me.xginko.aef.modules.lagpreventions;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.World;
import org.bukkit.entity.Entity;

public class SnowballExploit extends AEFModule implements Runnable {

    private final long check_period_in_ticks;
    private final int max_alive_time;

    public SnowballExploit() {
        super("lag-preventions.entity-age-limits.projectile-limit");
        config.addComment(configPath + ".enable",
                "Patches any lag exploit that abuses spawning a ton of projectile entities\n" +
                        "(ex. Snowball exploit)." +
                        "Skips over the following entities: ENDER_PEARL, FISHING_HOOK, WITHER_SKULL\n" +
                        "and ENDER_SIGNAL. You can configure those separately in the custom entity age\n" +
                        "limit section.");
        this.max_alive_time = config.getInt(configPath + ".max-alive-time-ticks", 300,
                "(20 ticks = 1 second) Will not touch Ender Pearls");
        this.check_period_in_ticks = config.getInt(configPath + ".check-period-seconds", 20,
                "How frequently we should check all projectiles for their alive time") * 20L;
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Entity entity : world.getEntities()) {
                if (EntityUtil.isProjectile(entity)) {
                    switch (entity.getType()) {
                        case ENDER_PEARL:
                        case WITHER_SKULL:
                        case FISHING_HOOK:
                        case ENDER_SIGNAL:
                            continue;
                    }

                    if (entity.getTicksLived() > max_alive_time) {
                        entity.remove();
                    }
                }
            }
        }
    }
}
