package me.xginko.aef.modules.lagpreventions;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.World;
import org.bukkit.entity.Projectile;

public class SnowballExploit implements AEFModule, Runnable {

    private final AnarchyExploitFixes plugin;
    private final long check_period_in_ticks;
    private final int max_alive_time;

    public SnowballExploit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",  "Patches a lag exploit.");
        this.max_alive_time = config.getInt(configPath() + ".projectiles-max-alive-time-in-ticks", 300,
                "(20 ticks = 1 second) Will not touch Ender Pearls");
        this.check_period_in_ticks = config.getInt(configPath() + ".check-period-in-seconds", 20,
                "How frequently we should check for all projectile's alive time") * 20L;
    }

    @Override
    public String configPath() {
        return "lag-preventions.prevent-snowball-exploit";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, check_period_in_ticks, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Projectile projectile : world.getEntitiesByClass(Projectile.class)) {
                switch (projectile.getType()) {
                    case ENDER_PEARL:
                    case WITHER_SKULL:
                    case FISHING_HOOK:
                    case ENDER_SIGNAL:
                        continue;
                }

                if (projectile.getTicksLived() > max_alive_time) {
                    projectile.remove();
                }
            }
        }
    }
}
