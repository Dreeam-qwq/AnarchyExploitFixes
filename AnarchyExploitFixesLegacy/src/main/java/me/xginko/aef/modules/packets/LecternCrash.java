package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import org.bukkit.entity.Player;
import org.bukkit.event.inventory.InventoryType;

public class LecternCrash extends AEFPacketModule {

    private InventoryType LECTERN;
    private final boolean log, kick;

    public LecternCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        try { this.LECTERN = InventoryType.valueOf("LECTERN"); } catch (IllegalArgumentException ignored) {}
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches an instant server crash exploit that involves sending an invalid Window Click packet\n" +
                        "while taking a book out of a Lectern.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.lectern-crash-patch";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true) && LECTERN != null;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        if (new WrapperPlayClientClickWindow(event).getWindowClickType() != WrapperPlayClientClickWindow.WindowClickType.QUICK_MOVE) return;
        final Player player = (Player) event.getPlayer();
        if (player == null) return;

        if (player.getOpenInventory().getType() == LECTERN) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }
}
