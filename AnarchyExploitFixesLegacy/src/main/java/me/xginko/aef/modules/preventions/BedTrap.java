package me.xginko.aef.modules.preventions;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.util.NumberConversions;

import java.time.Duration;
import java.util.UUID;

public class BedTrap implements AEFModule, Listener {

    private final Cache<UUID, Integer> playerDeathNearBedCount;
    private final double maxBedDistanceSquared;
    private final int maxDeathsPerTime;
    private final boolean logIsEnabled;

    public BedTrap() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Resets Bed Respawn when a player dies too many times within a certain timeframe.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
        this.maxDeathsPerTime = config.getInt(configPath() + ".max-deaths-per-time", 7,
                "Amount of times player can die until he is determined as bed-trapped.");
        this.playerDeathNearBedCount = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(
                Math.max(1, config.getInt(configPath() + ".time-in-seconds", 5,
                        "Time until death counter will be reset again")))).build();
        this.maxBedDistanceSquared = NumberConversions.square(config.getDouble(configPath() + ".max-distance-from-bed", 6.0));
    }

    @Override
    public String configPath() {
        return "preventions.anti-bed-trap";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onDeath(PlayerDeathEvent event) {
        final Player player = event.getEntity();
        if (!isNearBedSpawn(player)) return;

        Integer nearBedDeaths = playerDeathNearBedCount.getIfPresent(player.getUniqueId());
        if (nearBedDeaths == null) nearBedDeaths = 0;
        nearBedDeaths++;

        if (nearBedDeaths > maxDeathsPerTime) {
            player.setBedSpawnLocation(null, true);
            if (logIsEnabled) info("Reset bed respawn of potentially bed-trapped player '" + player.getName() + "'");
            return;
        }

        playerDeathNearBedCount.put(player.getUniqueId(), nearBedDeaths);
    }

    private boolean isNearBedSpawn(Player player) {
        final Location bedSpawn = player.getBedSpawnLocation();
        if (bedSpawn == null) return false;
        if (!player.getWorld().getUID().equals(bedSpawn.getWorld().getUID())) return false;
        return player.getLocation().distanceSquared(bedSpawn) > maxBedDistanceSquared;
    }
}