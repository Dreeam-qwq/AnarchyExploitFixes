package me.xginko.aef.modules.preventions.portals;

import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEvent;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class PreventSpecificEntitiesInPortals extends AEFModule implements Listener {

    private final Set<EntityType> forbiddenTypes;

    public PreventSpecificEntitiesInPortals() {
        super("preventions.portals.prevent-specific-types");
        this.forbiddenTypes = config.getList(configPath + ".entities",
                        Arrays.asList("DROPPED_ITEM", "FIREWORK", "PRIMED_TNT", "THROWN_EXP_BOTTLE", "EXPERIENCE_ORB", "ARMOR_STAND"),
                "Defaults prevent common lag methods.")
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(EntityType.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortal(EntityPortalEvent event) {
        if (forbiddenTypes.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }
}
