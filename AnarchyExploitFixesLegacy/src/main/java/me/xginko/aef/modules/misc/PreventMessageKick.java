package me.xginko.aef.modules.misc;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerKickEvent;

import java.util.Arrays;
import java.util.HashSet;
import java.util.stream.Collectors;

public class PreventMessageKick implements AEFModule, Listener {

    private final HashSet<String> kickMessagesToListenTo;

    public PreventMessageKick() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable", "Cancels the kick for specific kick messages.");
        this.kickMessagesToListenTo = config.getList(configPath() + ".kick-messages-to-listen-to",
                        Arrays.asList("Kicked for spamming", "Stop spamming!"))
                .stream()
                .map(String::toLowerCase)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String configPath() {
        return "misc.kicks.prevent-message-kick";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        if (kickMessagesToListenTo.contains(event.getReason().toLowerCase())) {
            event.setCancelled(true);
        }
    }
}
