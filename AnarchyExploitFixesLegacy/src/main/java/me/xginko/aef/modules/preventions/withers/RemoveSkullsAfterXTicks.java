package me.xginko.aef.modules.preventions.withers;

import me.xginko.aef.modules.AEFModule;
import org.bukkit.World;
import org.bukkit.entity.WitherSkull;

public class RemoveSkullsAfterXTicks extends AEFModule implements Runnable {

    private final long maxAgeInTicks, checkPeriod;

    public RemoveSkullsAfterXTicks() {
        super("preventions.withers.remove-flying-wither-skulls.if-lived-longer-than-x-ticks");
        config.addComment(configPath + ".enable",
                "Remove wither skulls that have been flying for too long to prevent\n" +
                "them from causing lag.");
        this.maxAgeInTicks = config.getInt(configPath + ".max-age-in-ticks", 200);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 40,
                "The delay in ticks until all skulls are checked for their alive time\n" +
                "again.");
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (WitherSkull entity : world.getEntitiesByClass(WitherSkull.class)) {
                if (entity.getTicksLived() > maxAgeInTicks) {
                    entity.remove();
                }
            }
        }
    }
}
