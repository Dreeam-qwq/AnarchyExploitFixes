package me.xginko.aef.modules.combat;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Location;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;

import java.time.Duration;

public class PistonAuraDelay implements AEFModule, Listener {

    private final ExpiringSet<Location> pistonsPushingCrystals;

    public PistonAuraDelay() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable", "Rate-limits pistons that extend into crystals");
        this.pistonsPushingCrystals = new ExpiringSet<>(Duration.ofMillis(
                Math.max(config.getInt(configPath() + ".piston-extend-delay-in-ticks", 40), 1) * 50L));
    }

    @Override
    public String configPath() {
        return "combat.crystal-aura.piston-aura-delay";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExtend(BlockPistonExtendEvent event) {
        if (
                !event.getBlock().getRelative(event.getDirection()).getLocation()
                        .getNearbyEntitiesByType(EnderCrystal.class, 1).isEmpty()
        ) {
            if (pistonsPushingCrystals.contains(event.getBlock().getLocation())) {
                event.setCancelled(true);
            } else {
                pistonsPushingCrystals.add(event.getBlock().getLocation());
            }
        }
    }
}
