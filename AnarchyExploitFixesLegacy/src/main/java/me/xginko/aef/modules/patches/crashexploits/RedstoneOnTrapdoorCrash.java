package me.xginko.aef.modules.patches.crashexploits;

import com.cryptomorin.xseries.XMaterial;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.time.Duration;

public class RedstoneOnTrapdoorCrash implements AEFModule, Listener {

    private final Cache<Location, Integer> trapdoorActivationCache;
    private final Material AIR;
    private final int trapdoorActivationLimit;
    private final boolean logIsEnabled;

    public RedstoneOnTrapdoorCrash() {
        shouldEnable();
        this.AIR = XMaterial.AIR.parseMaterial();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "prevents a powerful crash exploit present in 1.13 - 1.19.3");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", true);
        this.trapdoorActivationLimit = config.getInt(configPath() + ".max-trapdoor-activations-by-redstone-per-time", 10);
        this.trapdoorActivationCache = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(
                Math.max(config.getInt(configPath() + ".time-in-ticks", 30, "1 sec = 20 ticks"), 1) * 50L
        )).build();
    }

    @Override
    public String configPath() {
        return "patches.prevent-redstone-on-trapdoor-crash";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onRedstonePowerTrapdoor(BlockRedstoneEvent event) {
        Block block = event.getBlock();
        if (!MaterialUtil.TRAPDOORS.contains(block.getType())) return;

        final Location trapdoorLoc = block.getLocation();
        Integer activationCount = trapdoorActivationCache.getIfPresent(trapdoorLoc);
        if (activationCount == null) activationCount = 0;

        activationCount++;
        trapdoorActivationCache.put(trapdoorLoc, activationCount);

        if (activationCount > trapdoorActivationLimit) {
            block.setType(AIR);
            if (logIsEnabled) info("Prevented potential trapdoor crash at " + LocationUtil.toString(trapdoorLoc));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Block block = event.getBlock();
        if (block == null) return;
        if (!MaterialUtil.REDSTONE.contains(block.getType())) return;

        if (MaterialUtil.TRAPDOORS.contains(block.getRelative(BlockFace.DOWN).getType())) {
            event.setCancelled(true);
            if (logIsEnabled) info("Prevented potential trapdoor crash at " + LocationUtil.toString(block.getLocation()));
        }
    }
}