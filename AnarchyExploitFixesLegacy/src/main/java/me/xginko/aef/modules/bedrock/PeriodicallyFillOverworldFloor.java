package me.xginko.aef.modules.bedrock;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.Chunk;
import org.bukkit.World;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class PeriodicallyFillOverworldFloor implements AEFModule, Runnable {

    private final AnarchyExploitFixes plugin;
    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final int floorY;
    private final boolean checkShouldPauseOnLowTPS;

    public PeriodicallyFillOverworldFloor() {
        shouldEnable();
        plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable","only checks loaded chunks");
        this.floorY = config.overworld_floor_min_y;
        this.checkPeriod = config.getInt(configPath() + ".check-period-in-seconds", 10) * 20L;
        this.exemptedWorlds = new HashSet<>(config.getList(configPath() + ".exempted-worlds", Arrays.asList("exampleworld", "exampleworld2")));
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath() + ".pause-on-low-tps", true);
        this.pauseTPS = config.getDouble(configPath() + ".pause-tps", 16.0);
    }

    @Override
    public String configPath() {
        return "bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill";
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void run() {
        if (checkShouldPauseOnLowTPS && (AnarchyExploitFixes.getTPSCache().getTPS() <= pauseTPS)) return;

        for (World world : plugin.getServer().getWorlds()) {
            if (world.getEnvironment() == World.Environment.NORMAL) {
                if (!exemptedWorlds.contains(world.getName())) {
                    for (Chunk chunk : world.getLoadedChunks()) {
                        ChunkUtil.createBedrockLayer(chunk, floorY);
                    }
                }
            }
        }
    }
}
