package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.utils.models.ExpiringSet;

import java.time.Duration;
import java.util.UUID;

public class CraftingRecipeLag extends AEFPacketModule {

    private final ExpiringSet<UUID> recipeCooldowns;
    private final boolean log, kick;

    public CraftingRecipeLag() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Prevent lag or crash caused by flooding the server with crafting recipe book requests.\n" +
                        "This can even be done by hand on servers with low specs.\n" +
                        "Only affects versions < 1.16");
        this.recipeCooldowns = new ExpiringSet<>(Duration.ofMillis(
                Math.max(1, config.getInt(configPath() + ".crafting-recipe-delay-in-ticks", 5,
                "How many ticks a player needs to wait to be able to use the crafting recipe book again")) * 50L
        ));
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.prevent-crafting-recipe-lag-exploit";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CRAFT_RECIPE_REQUEST) return;

        if (recipeCooldowns.contains(event.getUser().getUUID())) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        } else {
            recipeCooldowns.add(event.getUser().getUUID());
        }
    }
}
