package me.xginko.aef.modules.chunklimits;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

public class VehicleLimit implements AEFModule, Listener, Runnable {

    private final AnarchyExploitFixes plugin;
    private final long checkPeriod;
    private final int maxVehiclesPerChunk;
    private final boolean logIsEnabled;

    public VehicleLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Limit the amount of vehicles to prevent some lag machines involving boats and a dispenser.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log-removals", false);
        this.maxVehiclesPerChunk = config.getInt(configPath() + ".max-vehicles-per-chunk", 25);
        this.checkPeriod = Math.max(1, config.getInt(configPath() + ".check-period-in-ticks", 400,
                "200 ticks = 10 seconds."));
    }

    @Override
    public String configPath() {
        return "chunk-limits.vehicle-limit";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        int vehicleCount = 0;

        for (Entity entity : event.getVehicle().getChunk().getEntities()) {
            if (!EntityUtil.isVehicle(entity)) continue;
            vehicleCount++;
            if (vehicleCount <= maxVehiclesPerChunk) continue;

            entity.remove();
            if (logIsEnabled) info("Removed vehicle " + entity.getType() + " at " +
                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxVehiclesPerChunk);
        }
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                if (!chunk.isLoaded()) continue;

                int vehicleCount = 0;

                for (Entity entity : chunk.getEntities()) {
                    if (!EntityUtil.isVehicle(entity)) continue;
                    vehicleCount++;
                    if (vehicleCount <= maxVehiclesPerChunk) continue;

                    entity.remove();
                    if (logIsEnabled) info("Removed vehicle " + entity.getType() + " at " +
                            LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxVehiclesPerChunk);
                }
            }
        }
    }
}
