package me.xginko.aef.modules.lagpreventions;

import com.cryptomorin.xseries.XEntityType;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.World;
import org.bukkit.entity.Entity;

public class FallingBlockStasis extends AEFModule implements Runnable {

    private final long check_period_in_ticks;
    private final int max_alive_time;
    private final boolean logIsEnabled;
    
    public FallingBlockStasis() {
        super("lag-preventions.prevent-falling-block-stasis");
        config.addComment(configPath + ".enable",
                "Patches a lag exploit where FALLING_BLOCK entities are being held in\n" +
                "a stasis using piston heads, allowing them to accumulate in large\n" +
                "numbers that are able to crash the server.");
        this.logIsEnabled = config.getBoolean(configPath + ".log", false);
        this.max_alive_time = config.getInt(configPath + ".falling-blocks-max-alive-time-in-ticks", 300,
                "(20 ticks = 1 second)");
        this.check_period_in_ticks = Math.max(1, config.getInt(configPath + ".check-period-in-seconds", 120,
                "How frequently we should check the alive time of all falling blocks.")) * 20L;
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", true);
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Entity entity : world.getEntities()) {
                if (entity.getType() == XEntityType.FALLING_BLOCK.get() && entity.getTicksLived() > max_alive_time) {
                    entity.remove();
                    if (logIsEnabled) info("Removed falling block at " + LocationUtil.toString(entity.getLocation()) +
                            " because it has been alive for " + entity.getTicksLived() + " ticks (max= " + max_alive_time + ").");
                }
            }
        }
    }
}
