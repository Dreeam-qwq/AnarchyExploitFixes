package me.xginko.aef.modules.lagpreventions;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;

public class FallingBlockStasis implements AEFModule, Runnable {

    private final AnarchyExploitFixes plugin;
    private final long check_period_in_ticks;
    private final int max_alive_time;
    private final boolean logIsEnabled;
    
    public FallingBlockStasis() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Patches a lag exploit where a shitton of entities are generated\n" +
                        "by holding falling blocks in a stasis using piston heads.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
        this.max_alive_time = config.getInt(configPath() + ".falling-blocks-max-alive-time-in-ticks", 300,
                "(20 ticks = 1 second)");
        this.check_period_in_ticks = Math.max(config.getInt(configPath() + ".check-period-in-seconds", 120,
                "How frequently we should check for all projectile's alive time"), 1) * 20L;
    }

    @Override
    public String configPath() {
        return "lag-preventions.prevent-falling-block-stasis";
    }

    @Override
    public void enable() {
        plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, this, 20L, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Entity entity : world.getEntities()) {
                if (entity.getType() == EntityType.FALLING_BLOCK && entity.getTicksLived() > max_alive_time) {
                    entity.remove();
                    if (logIsEnabled) info("Removed falling block at " + LocationUtil.toString(entity.getLocation()) +
                            " because it has been alive for " + entity.getTicksLived() + " ticks (max= " + max_alive_time + ").");
                }
            }
        }
    }
}
