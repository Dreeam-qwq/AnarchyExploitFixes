package me.xginko.aef.modules.preventions.blockbreak;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.World;
import org.bukkit.block.BlockState;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.StructureGrowEvent;

public class StructureGrowPermBlockRemoval implements AEFModule, Listener {

    public StructureGrowPermBlockRemoval() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment(configPath() + ".enable",
                "Prevents removal of permanent blocks by growing structures like mushrooms into them.");
    }

    @Override
    public String configPath() {
        return "preventions.permanent-block-breaking.by-growing-structures";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onStructureGrow(StructureGrowEvent event) {
        final World world = event.getWorld();
        for (final BlockState blockState : event.getBlocks()) {
            if (MaterialUtil.INDESTRUCTIBLES.contains(world.getBlockAt(blockState.getLocation()).getType())) {
                event.setCancelled(true);
                info("Prevented permanent block break by growing a structure at " + LocationUtil.toString(blockState.getLocation()));
                return;
            }
        }
    }
}
