package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class InvalidStackSize implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored, preventHopperBypass;

    public InvalidStackSize() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Prevents usage of or reverts items with a higher or lower stack size than their vanilla limit.");
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", true);
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items",
                        Collections.singletonList(XMaterial.TOTEM_OF_UNDYING.parseMaterial().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
    }

    @Override
    public String configPath() {
        return "illegals.illegally-stacked-items";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(getHopperListener(), plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_OVERSTACKED;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (itemStack.getAmount() > itemStack.getMaxStackSize() || itemStack.getAmount() < 1) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        switch (legality) {
            case ILLEGAL:
                itemStack.setAmount(itemStack.getMaxStackSize());
                break;
            case CONTAINS_ILLEGAL:
                itemStack.setAmount(0);
        }
    }
}
