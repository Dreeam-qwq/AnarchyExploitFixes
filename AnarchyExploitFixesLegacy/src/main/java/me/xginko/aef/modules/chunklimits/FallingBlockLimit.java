package me.xginko.aef.modules.chunklimits;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import me.xginko.aef.utils.models.ChunkUID;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Chunk;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.entity.EntityChangeBlockEvent;

import java.time.Duration;
import java.util.Set;

public class FallingBlockLimit implements AEFModule, Listener {

    private final Set<ChunkUID> checkedChunks;
    private final int maxFallingGravityBlockPerChunk;
    private final boolean logIsEnabled;

    public FallingBlockLimit() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Prevent players from placing massive sand chunks and killing the server.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
        this.maxFallingGravityBlockPerChunk = config.getInt(configPath() + ".max-falling-gravitiy-blocks-per-chunk", 60,
                "Removes any falling block if there is more than x blocks (actively) falling in a chunk.");
        this.checkedChunks = new ExpiringSet<>(Duration.ofMillis(
                Math.max(1, config.getInt(configPath() + ".chunk-check-delay-in-ticks", 20,
                "Delay in ticks until the same chunk can be checked again.\n" +
                        "Prevents overchecking because a physics event can be called multiple times for the same chunk.")) * 50L
        ));
    }

    @Override
    public String configPath() {
        return "chunk-limits.falling-block-limit";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPhysics(BlockPhysicsEvent event) {
        Chunk chunk = event.getBlock().getChunk();
        final ChunkUID chunkUID = ChunkUID.of(chunk);
        if (checkedChunks.contains(chunkUID)) return;

        int count = 0;
        boolean removed_falling = false;

        for (Entity entity : chunk.getEntities()) {
            if (entity.getType() == EntityType.FALLING_BLOCK) {
                count++;
                if (count > maxFallingGravityBlockPerChunk) {
                    entity.remove();
                    removed_falling = true;
                }
            }
        }

        checkedChunks.add(chunkUID);

        if (logIsEnabled && removed_falling) info("Removed falling block(s) at " +
                LocationUtil.toString(event.getSourceBlock().getLocation()) + " because reached limit of " +
                maxFallingGravityBlockPerChunk + " falling gravity blocks per chunk");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChangeBlock(EntityChangeBlockEvent event) {
        if (!event.getEntityType().equals(EntityType.FALLING_BLOCK)) return;
        Chunk chunk = event.getBlock().getChunk();
        final ChunkUID chunkUID = ChunkUID.of(chunk);
        if (checkedChunks.contains(chunkUID)) return;

        int count = 0;
        boolean removed_falling = false;

        for (Entity entity : chunk.getEntities()) {
            if (entity.getType() == EntityType.FALLING_BLOCK) {
                count++;
                if (count > maxFallingGravityBlockPerChunk) {
                    entity.remove();
                    removed_falling = true;
                }
            }
        }

        checkedChunks.add(chunkUID);

        if (logIsEnabled && removed_falling) info("Removed falling block(s) at " +
                LocationUtil.toString(event.getBlock().getLocation()) + " because reached limit of " +
                maxFallingGravityBlockPerChunk + " falling gravity blocks per chunk");
    }
}