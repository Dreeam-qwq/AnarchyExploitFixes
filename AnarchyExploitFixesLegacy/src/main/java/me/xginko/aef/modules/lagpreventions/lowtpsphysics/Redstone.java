package me.xginko.aef.modules.lagpreventions.lowtpsphysics;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.block.BlockRedstoneEvent;

public class Redstone implements AEFModule, Listener {

    private final double disableRedstoneTPS;
    private final boolean logIsEnabled;

    public Redstone() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Disable redstone during low TPS to prevent some lag machines.");
        this.disableRedstoneTPS = config.getDouble(configPath() + ".disable-TPS", 16.0);
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
    }

    @Override
    public String configPath() {
        return "lag-preventions.disable-physics-during-low-tps.redstone";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onRedstoneEvent(BlockRedstoneEvent event) {
        if (AnarchyExploitFixes.getTPSCache().getTPS() <= disableRedstoneTPS) {
            event.setNewCurrent(0);
            if (logIsEnabled) info("Disabled redstone because tps is lower than " + disableRedstoneTPS);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onPistonExtendEvent(BlockPistonExtendEvent event) {
        if (AnarchyExploitFixes.getTPSCache().getTPS() <= disableRedstoneTPS) {
            event.setCancelled(true);
            if (logIsEnabled) info("Cancelled piston event because tps is lower than " + disableRedstoneTPS);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onPistonRetractEvent(BlockPistonRetractEvent event) {
        if (AnarchyExploitFixes.getTPSCache().getTPS() <= disableRedstoneTPS) {
            event.setCancelled(true);
            if (logIsEnabled) info("Cancelled piston event because tps is lower than " + disableRedstoneTPS);
        }
    }
}
