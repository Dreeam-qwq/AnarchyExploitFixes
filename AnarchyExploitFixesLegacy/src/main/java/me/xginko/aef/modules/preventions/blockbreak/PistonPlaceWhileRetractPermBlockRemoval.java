package me.xginko.aef.modules.preventions.blockbreak;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.MaterialUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonRetractEvent;

import java.util.Collections;
import java.util.HashSet;
import java.util.Set;

public class PistonPlaceWhileRetractPermBlockRemoval implements AEFModule, Listener {

    private final Set<String> whitelistedWorlds;

    public PistonPlaceWhileRetractPermBlockRemoval() {
        shouldEnable();
        this.whitelistedWorlds = new HashSet<>(AnarchyExploitFixes.config()
                .getList(configPath() + ".whitelisted-worlds", Collections.singletonList("example_world_name")));
    }

    @Override
    public String configPath() {
        return "preventions.permanent-block-breaking.by-placing-piston-on-retract";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonRetract(BlockPistonRetractEvent event) {
        if (whitelistedWorlds.contains(event.getBlock().getWorld().getName())) return;

        if (MaterialUtil.INDESTRUCTIBLES.contains(event.getBlock().getRelative(event.getDirection().getOppositeFace()).getType())) {
            event.setCancelled(true);
        }
    }
}
