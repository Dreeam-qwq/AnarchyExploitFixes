package me.xginko.aef.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class Unbreakables extends IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean skipZeroDurability, useWhitelist, blacklistMode, checkStored, preventHopperBypass;

    public Unbreakables() {
        super("illegals.revert-unbreakables");
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Deletes and prevents usage of unbreakable items.\n" +
                        "This can be anything from items with illegal damage to items with the \"unbreakable\" NBT tag." +
                        "Due to the limitations of the API, we can sadly only delete these items or fully allow them.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false,
                "Will delete shulkers and bundles if they contain unbreakables.");
        this.skipZeroDurability = config.getBoolean(configPath + ".skip-zero-durability", PaperLib.getMinecraftVersion() < 16,
                "Make sure to keep enabled on 1.16+, otherwise netherite tools will mistakenly be set to max durability, due to some bug in spigot.");
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items",
                        Collections.singletonList(XMaterial.DIAMOND_CHESTPLATE.parseMaterial().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath + ".prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(getHopperListener(), plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_UNBREAKABLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (isUnbreakable(itemStack)) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }

    private boolean isUnbreakable(ItemStack itemStack) {
        final int durability = itemStack.getDurability();
        final short maxDurability = itemStack.getType().getMaxDurability();
        if (!skipZeroDurability || maxDurability != 0) {
            if (durability > maxDurability) {
                return true;
            }
            return durability < 0;
        } else {
            return durability > 2031;
        }
    }
}
