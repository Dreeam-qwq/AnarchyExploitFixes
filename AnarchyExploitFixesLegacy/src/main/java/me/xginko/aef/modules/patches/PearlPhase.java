package me.xginko.aef.modules.patches;

import com.cryptomorin.xseries.XMaterial;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerTeleportEvent;

public class PearlPhase extends AEFModule implements Listener {

    private final Material cobweb;
    private final int radius;

    public PearlPhase() {
        super("patches.pearl-phase");
        config.addComment(configPath+ ".enable",
                "Attempts to patch a pearl phasing exploit by cancelling the teleport\n" +
                        "if the pearl is thrown at or near a cobweb.");
        this.radius = config.getInt(configPath + ".cobweb-block-radius", 2,
                "How many blocks around the teleport location should be searched\n" +
                        "for cobwebs if the teleport location isn't one itself.");
        this.cobweb = XMaterial.COBWEB.parseMaterial();
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath+".enable", false);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerTeleport(PlayerTeleportEvent event) {
        if (event.getCause() != PlayerTeleportEvent.TeleportCause.ENDER_PEARL) return;

        Location destination = event.getTo();
        Block destBlock = destination.getBlock();

        if (destBlock.getType() == cobweb) {
            event.setCancelled(true);
            return;
        }

        for (BlockFace blockFace : BlockFace.values()) {
            for (int i = 0; i < radius; i++) {
                if (destination.getBlock().getRelative(blockFace).getType() == cobweb) {
                    event.setCancelled(true);
                    return;
                }
            }
        }
    }
}
