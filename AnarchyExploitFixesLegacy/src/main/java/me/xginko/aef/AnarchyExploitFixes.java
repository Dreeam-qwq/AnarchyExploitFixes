package me.xginko.aef;

import com.github.retrooper.packetevents.PacketEvents;
import io.github.retrooper.packetevents.factory.spigot.SpigotPacketEventsBuilder;
import io.papermc.lib.PaperLib;
import me.xginko.aef.commands.AEFCommand;
import me.xginko.aef.config.Config;
import me.xginko.aef.config.Datastore;
import me.xginko.aef.config.LanguageCache;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.CachingPermTool;
import me.xginko.aef.utils.models.TPSCache;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.config.Configurator;
import org.bstats.bukkit.Metrics;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.FileNotFoundException;
import java.nio.file.Files;
import java.util.*;
import java.util.jar.JarFile;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.zip.ZipEntry;

public class AnarchyExploitFixes extends JavaPlugin {

    private static AnarchyExploitFixes instance;
    private static Map<String, LanguageCache> languageCacheMap;
    private static Config config;
    private static Datastore datastore;
    private static TPSCache tpsCache;
    private static CachingPermTool cachingPermTool;
    private static Logger prefixedLogger, unPrefixedLogger;
    private static Metrics metrics;
    private static boolean cannotEnable;

    @Override
    public void onLoad() {
        prefixedLogger = LoggerFactory.getLogger(getLogger().getName());
        unPrefixedLogger = LoggerFactory.getLogger("");
        // Disable logging for some shaded libraries as those can get very verbose
        String shadedLibs = getClass().getPackage().getName() + ".libs";
        Configurator.setLevel(shadedLibs + ".reflections.Reflections", Level.OFF);
        Configurator.setLevel(shadedLibs + ".zaxxer.hikari.pool.PoolBase", Level.OFF);
        Configurator.setLevel(shadedLibs + ".zaxxer.hikari.pool.HikariPool", Level.OFF);
        Configurator.setLevel(shadedLibs + ".zaxxer.hikari.HikariDataSource", Level.OFF);
        Configurator.setLevel(shadedLibs + ".zaxxer.hikari.HikariConfig", Level.OFF);
        Configurator.setLevel(shadedLibs + ".zaxxer.hikari.util.DriverDataSource", Level.OFF);
        // Ensure packetevents is loaded
        if (!getServer().getPluginManager().isPluginEnabled("packetevents")) {
            prefixedLogger.error("AEF requires PacketEvents by retrooper to function.");
            prefixedLogger.error("You can either download the latest release from modrinth:");
            prefixedLogger.error("   https://modrinth.com/plugin/packetevents/");
            prefixedLogger.error("or choose a dev build from their jenkins:");
            prefixedLogger.error("   https://ci.codemc.io/job/retrooper/job/packetevents/");
            cannotEnable = true;
            return;
        }
        // Build, configure and load packetevents
        PacketEvents.setAPI(SpigotPacketEventsBuilder.build(this));
        PacketEvents.getAPI().getSettings().kickOnPacketException(true).reEncodeByDefault(false).checkForUpdates(false).bStats(false);
        PacketEvents.getAPI().load();
        cannotEnable = false;
    }

    @Override
    public void onEnable() {
        if (cannotEnable) {
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        instance = this;
        cachingPermTool = CachingPermTool.enable(this);

        prefixedLogger.info("                                                          ");
        prefixedLogger.info("                                                          ");
        prefixedLogger.info("     █████  ███████ ███████                               ");
        prefixedLogger.info("    ██   ██ ██      ██             AnarchyExploitFixes    ");
        prefixedLogger.info("    ███████ █████   █████            Made by moom0o       ");
        prefixedLogger.info("    ██   ██ ██      ██             Rewritten by xGinko    ");
        prefixedLogger.info("    ██   ██ ███████ ██                                    ");
        prefixedLogger.info("                                                          ");
        prefixedLogger.info("                                                          ");

        if (!PaperLib.isPaper()) {
            prefixedLogger.error("This plugin depends on Paper's API, which is not present on your server.");
            PaperLib.suggestPaper(this, java.util.logging.Level.SEVERE);
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        prefixedLogger.info("Detected Version 1.{}.{}", PaperLib.getMinecraftVersion(), PaperLib.getMinecraftPatchVersion());

        if (PaperLib.getMinecraftVersion() < 12) {
            prefixedLogger.warn("This version is unsupported. Expect issues.");
        } else if (PaperLib.getMinecraftVersion() >= 20) {
            prefixedLogger.error("Legacy is intended for Paper server versions 1.12 - 1.19.4.");
            prefixedLogger.error("Please use the Folia jar for your server.");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        try {
            getDataFolder().mkdirs();
        } catch (Exception e) {
            prefixedLogger.trace("Failed to create plugin folder!", e);
            getServer().getPluginManager().disablePlugin(this);
        }

        prefixedLogger.info("Loading Datastore");
        datastore = new Datastore();

        prefixedLogger.info("Loading Config");
        reloadConfiguration();

        prefixedLogger.info("Loading Translations");
        reloadLang();

        prefixedLogger.info("Registering Commands");
        AEFCommand.registerCommands();

        prefixedLogger.info("Initializing PacketEvents");
        PacketEvents.getAPI().init();

        prefixedLogger.info("Ready.");
    }

    @Override
    public void onDisable() {
        AEFModule.disableAll();
        PacketEvents.getAPI().terminate();
        if (metrics != null) {
            metrics.shutdown();
            metrics = null;
        }
        if (cachingPermTool != null) {
            cachingPermTool.shutdown();
            cachingPermTool = null;
        }
        instance = null;
        config = null;
        languageCacheMap = null;
        tpsCache = null;
        prefixedLogger = null;
    }

    public static AnarchyExploitFixes getInstance()  {
        return instance;
    }
    public static Config getConfiguration() {
        return config;
    }
    public static Datastore getDatastore() {
        return datastore;
    }
    public static TPSCache getTPSCache() {
        return tpsCache;
    }
    public static Logger getPrefixedLogger() {
        return prefixedLogger;
    }
    public static Logger getUnprefixedLogger() {
        return unPrefixedLogger;
    }
    public static LanguageCache getLang(Locale locale) {
        return getLang(locale.toString().toLowerCase());
    }
    public static LanguageCache getLang(CommandSender commandSender) {
        return commandSender instanceof Player ? getLang(((Player) commandSender).getLocale()) : getLang(config.default_lang);
    }
    public static LanguageCache getLang(String lang) {
        if (!config.auto_lang) return languageCacheMap.get(config.default_lang.toString().toLowerCase());
        return languageCacheMap.getOrDefault(lang.replace("-", "_"), languageCacheMap.get(config.default_lang.toString().toLowerCase()));
    }

    public void reloadPlugin() {
        reloadLang();
        reloadConfiguration();
    }

    private void reloadConfiguration() {
        try {
            config = new Config();
            tpsCache = TPSCache.create(config.tps_cache_duration);
            AEFModule.reloadModules();
            if (metrics != null) metrics.shutdown();
            metrics = new Metrics(this, 8700);
            config.saveConfig();
        } catch (Throwable t) {
            prefixedLogger.error("Failed while loading config!", t);
        }
    }

    public void reloadLang() {
        languageCacheMap = new HashMap<>();
        try {
            final List<String> availableLocales = getAvailableTranslations();
            if (!config.auto_lang) {
                final String defaultLang = config.default_lang.toString().replace("-", "_").toLowerCase();
                if (!availableLocales.contains(defaultLang))
                    throw new FileNotFoundException("Could not find any translation file for language '" + config.default_lang + "'");
                availableLocales.removeIf(localeString -> !localeString.equalsIgnoreCase(defaultLang));
            }
            StringBuilder friendlyLog = new StringBuilder();
            for (int i = 0; i < availableLocales.size(); i++) {
                final String localeStr = availableLocales.get(i);
                friendlyLog.append(localeStr);
                if (i < availableLocales.size() - 1)
                    friendlyLog.append(", ");
                if ((i + 1) % 4 == 0 || i == availableLocales.size() - 1) {
                    prefixedLogger.info(friendlyLog.toString());
                    friendlyLog = new StringBuilder();
                }
                languageCacheMap.put(localeStr, new LanguageCache(localeStr));
            }
        } catch (Throwable t) {
            prefixedLogger.error("Error loading language files!", t);
        } finally {
            if (languageCacheMap.isEmpty()) {
                prefixedLogger.error("Unable to load translations. Disabling.");
                getServer().getPluginManager().disablePlugin(this);
            } else {
                prefixedLogger.info("Loaded {} translation(s)", languageCacheMap.size());
            }
        }
    }

    private List<String> getAvailableTranslations() {
        try (final JarFile pluginJar = new JarFile(getFile())) {
            final File langDirectory = new File(getDataFolder() + "/lang");
            Files.createDirectories(langDirectory.toPath());
            final Pattern langPattern = Pattern.compile("([a-z]{1,3}_[a-z]{1,3})(\\.yml)", Pattern.CASE_INSENSITIVE);
            return Stream.concat(pluginJar.stream().map(ZipEntry::getName), Arrays.stream(langDirectory.listFiles()).map(File::getName))
                    .map(langPattern::matcher)
                    .filter(Matcher::find)
                    .map(matcher -> matcher.group(1))
                    .distinct()
                    .sorted()
                    .collect(Collectors.toList());
        } catch (Throwable t) {
            prefixedLogger.error("Failed while searching for available translations!", t);
            return Collections.emptyList();
        }
    }
}
