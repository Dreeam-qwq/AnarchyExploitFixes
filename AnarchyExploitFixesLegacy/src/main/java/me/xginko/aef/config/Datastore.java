package me.xginko.aef.config;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import me.xginko.aef.AnarchyExploitFixes;
import org.bukkit.Bukkit;

import javax.sql.DataSource;
import java.sql.*;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

public class Datastore {

    private final DataSource dataSource;
    private final String loadPlayer, savePlayerConMsgSetting;

    public Datastore() {
        HikariConfig config = new HikariConfig();
        config.setJdbcUrl("jdbc:sqlite:plugins/AnarchyExploitFixes/data.db");
        config.setMaximumPoolSize(Bukkit.getMaxPlayers());
        this.dataSource = new HikariDataSource(config);
        createTables();
        this.loadPlayer = "SELECT * FROM `players` WHERE player_uuid = ?;";
        this.savePlayerConMsgSetting = "INSERT INTO `players` (player_uuid, show_connect_msgs) VALUES (?, ?) ON CONFLICT(player_uuid) DO UPDATE SET show_connect_msgs = ?;";
    }

    private void createTables() {
        try (Statement statement = dataSource.getConnection().createStatement()) {
            statement.execute("CREATE TABLE IF NOT EXISTS `players` (`player_uuid` varchar(36) NOT NULL PRIMARY KEY, `show_connect_msgs` boolean);");
        } catch (SQLException e) {
            AnarchyExploitFixes.getPrefixedLogger().trace("Error creating database tables!", e);
        }
    }

    public CompletableFuture<Boolean> getJoinLeaveEnabled(UUID uuid) {
        return CompletableFuture.supplyAsync(() -> {
            try (Connection connection = dataSource.getConnection(); PreparedStatement statement = connection.prepareStatement(loadPlayer)) {
                statement.setString(1, uuid.toString());
                ResultSet result = statement.executeQuery();
                if (result.next()) {
                    return result.getBoolean("show_connect_msgs");
                } else {
                    return AnarchyExploitFixes.config().connectionMsgsAreOnByDefault;
                }
            } catch (SQLException e) {
                AnarchyExploitFixes.getPrefixedLogger().error("Error getting connection message enable state from player!", e);
                return AnarchyExploitFixes.config().connectionMsgsAreOnByDefault;
            }
        });
    }

    public CompletableFuture<Void> setJoinLeaveEnabled(UUID uuid, boolean enable) {
        return CompletableFuture.runAsync(() -> {
            try (Connection connection = dataSource.getConnection(); PreparedStatement statement = connection.prepareStatement(savePlayerConMsgSetting)) {
                statement.setString(1, uuid.toString());
                statement.setBoolean(2, enable);
                statement.setBoolean(3, enable);
                statement.executeUpdate();
            } catch (SQLException e) {
                AnarchyExploitFixes.getPrefixedLogger().error("Error setting connection message enable state for player!", e);
            }
        });
    }
}
