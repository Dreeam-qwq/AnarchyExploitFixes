package me.moomoo.anarchyexploitfixes.listener;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.protocol.player.InteractionHand;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientInteractEntity;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.events.PacketPlayerAttackEntityEvent;
import org.bukkit.entity.Player;
import org.bukkit.inventory.EquipmentSlot;

public final class InteractEntityPacketListener extends PacketListenerAbstract implements AEFListener {

    public InteractEntityPacketListener() {
        super(PacketListenerPriority.NORMAL);
    }

    @Override
    public boolean shouldEnable() {
        return !AnarchyExploitFixes.getConfiguration().packets_disabled;
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.INTERACT_ENTITY) return;

        final WrapperPlayClientInteractEntity packet = new WrapperPlayClientInteractEntity(event);
        if (packet.getAction() != WrapperPlayClientInteractEntity.InteractAction.ATTACK) return;

        PacketPlayerAttackEntityEvent attackEvent = new PacketPlayerAttackEntityEvent(
                (Player) event.getPlayer(),
                packet.getHand() == InteractionHand.MAIN_HAND ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND,
                event.isCancelled()
        );

        if (!attackEvent.callEvent()) {
            event.setCancelled(true);
        }
    }
}
