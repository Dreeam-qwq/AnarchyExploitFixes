package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.InventoryView;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class AntiWindowClickCrash extends AEFPacketModule implements Listener {

    private final Map<UUID, InventoryView> openInventories = new HashMap<>();
    private final boolean log, kick;

    public AntiWindowClickCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches a variety of different lag and crash methods that work by sending invalid\n" +
                        "Window Click packets, causing lots of error logs or crash dumps that eventually kill the server.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.window-click-crash-patch";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        final WrapperPlayClientClickWindow packet = new WrapperPlayClientClickWindow(event);

        final int button = packet.getButton();

        if (button < 0 || button > 10 && button != 40 && button != 99) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
            return;
        }

        final int slot = packet.getSlot();

        if (slot != -999 && slot != -1) {
            if (slot < 0) event.setCancelled(true);
            Player player = (Player) event.getPlayer();
            if (player != null && slot >= openInventories.computeIfAbsent(player.getUniqueId(), uuid -> player.getOpenInventory()).countSlots())
                event.setCancelled(true);
            return;
        }

        if (button == 40) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
            return;
        }

        switch (packet.getWindowClickType()) {
            case SWAP:
            case PICKUP_ALL:
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            case THROW:
                if (slot == -1) {
                    event.setCancelled(true);
                    onCancel(log, kick, event.getUser());
                }
                return;
            case QUICK_MOVE:
                if (slot == -999) {
                    event.setCancelled(true);
                    onCancel(log, kick, event.getUser());
                }
        }
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onInventoryOpen(InventoryOpenEvent event) {
        this.openInventories.put(event.getPlayer().getUniqueId(), event.getView());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onInventoryClose(InventoryCloseEvent event) {
        this.openInventories.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        this.openInventories.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        this.openInventories.remove(event.getPlayer().getUniqueId());
    }
}
