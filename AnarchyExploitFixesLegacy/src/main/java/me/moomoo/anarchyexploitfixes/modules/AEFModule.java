package me.moomoo.anarchyexploitfixes.modules;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import org.bukkit.event.HandlerList;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.util.HashSet;
import java.util.Set;

public interface AEFModule {

    String configPath();
    void enable();
    boolean shouldEnable();

    Set<AEFModule> enabledModules = new HashSet<>();
    Reflections reflections = new Reflections(AEFModule.class.getPackage().getName());

    static void disableAll() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getScheduler().cancelTasks(plugin);
        HandlerList.unregisterAll(plugin);
        for (AEFModule module : enabledModules) {
            if (module instanceof PacketListenerAbstract) {
                PacketEvents.getAPI().getEventManager().unregisterListener((PacketListenerAbstract) module);
            }
        }
        enabledModules.clear();
    }

    static void reloadModules() {
        disableAll();

        for (Class<?> clazz : reflections.get(Scanners.SubTypes.of(AEFModule.class).asClass())) {
            if (clazz.isInterface()) continue;

            try {
                AEFModule module = (AEFModule) clazz.getDeclaredConstructor().newInstance();
                if (module.shouldEnable()) {
                    module.enable();
                    enabledModules.add(module);
                }
            } catch (Exception e) {
                AnarchyExploitFixes.getPrefixedLogger().error("Failed to load module " + clazz.getSimpleName(), e);
            }
        }
    }

    default void error(String message, Throwable throwable) {
        AnarchyExploitFixes.getPrefixedLogger().error(prefix() + message, throwable);
    }

    default void error(String message) {
        AnarchyExploitFixes.getPrefixedLogger().error(prefix() + message);
    }

    default void warn(String message) {
        AnarchyExploitFixes.getPrefixedLogger().warn(prefix() + message);
    }

    default void info(String message) {
        AnarchyExploitFixes.getPrefixedLogger().info(prefix() + message);
    }

    default void notRecognized(Class<?> clazz, String unrecognized) {
        warn("Unable to parse " + clazz.getSimpleName() + " at '" + unrecognized + "'. Please check your configuration.");
    }

    default String prefix() {
        String[] split = configPath().split("\\.");
        if (split.length <= 2) return "<" + configPath() + "> ";
        return "<" + String.join(".", split[split.length - 2], split[split.length - 1]) + "> ";
    }
}
