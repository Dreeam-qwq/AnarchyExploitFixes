package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEvent;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class PreventSpecificEntitiesInPortals implements AEFModule, Listener {

    private final Set<EntityType> forbiddenTypes;

    public PreventSpecificEntitiesInPortals() {
        shouldEnable();
        this.forbiddenTypes = AnarchyExploitFixes.getConfiguration().getList(configPath() + ".entities",
                        Arrays.asList("DROPPED_ITEM", "FIREWORK", "PRIMED_TNT", "THROWN_EXP_BOTTLE", "EXPERIENCE_ORB", "ARMOR_STAND"),
                "Defaults prevent common lag methods.")
                .stream()
                .map(configuredType -> {
                    try {
                        return EntityType.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(EntityType.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));
    }

    @Override
    public String configPath() {
        return "preventions.portals.prevent-specific-types";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortal(EntityPortalEvent event) {
        if (forbiddenTypes.contains(event.getEntityType())) {
            event.setCancelled(true);
        }
    }
}
