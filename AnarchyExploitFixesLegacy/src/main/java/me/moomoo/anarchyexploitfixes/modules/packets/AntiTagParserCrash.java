package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.models.Disableable;
import org.bukkit.entity.Player;

public class AntiTagParserCrash extends PacketListenerAbstract implements AEFModule, Disableable {

    private final AnarchyExploitFixes plugin;
    private static final String[] ABUSABLE_SEQUENCES = { "@", "[", "nbt", "=", "{", "}", "]" };
    private final boolean log, kick;

    public AntiTagParserCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable", "Patches MojangParser/TagParser crash exploit.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.tag-parser-crash-patch";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.TAB_COMPLETE) return;
        final Player player = (Player) event.getPlayer();
        if (player == null || player.isOp()) return;

        final String text = new WrapperPlayClientTabComplete(event).getText();

        for (String sequence : ABUSABLE_SEQUENCES) {
            if (text.indexOf(sequence) != -1) {
                event.setCancelled(true);
                if (log) info("Prevented player '"+player.getName()+"' from using TagParser crash.");
                if (kick) plugin.getServer().getScheduler().runTask(plugin, () ->
                        player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).misc_MaskedKickMessage));
                return;
            }
        }

        if (text.length() > 64) {
            final int index = text.indexOf(' ');
            if (index == -1 || index >= 64) {
                event.setCancelled(true);
                if (log) info("Prevented player '"+player.getName()+"' from using TagParser crash.");
                if (kick) plugin.getServer().getScheduler().runTask(plugin, () ->
                        player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).misc_MaskedKickMessage));
            }
        }
    }
}
