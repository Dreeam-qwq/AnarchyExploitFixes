package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class InapplicableEnchants implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention, removeIllegalShulkers,
            preventHopperBypass;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;
    private final Material air;

    public InapplicableEnchants() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-inapplicable-enchants.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-inapplicable-enchants.use-as-blacklist-instead", false);
        List<String> configuredWhitelistedItems = config.getList("illegals.enchantments.revert-inapplicable-enchants.whitelisted-items", Collections.singletonList("GOLDEN_APPLE"));
        for (String configuredItem : configuredWhitelistedItems) {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        }
        this.preventHopperBypass = config.getBoolean("illegals.enchantments.revert-inapplicable-enchants.prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n"+
                        "out of the hoppers inventory.\n"+
                        "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.removeIllegalShulkers = config.getBoolean("illegals.enchantments.revert-inapplicable-enchants.delete-shulker-if-contains-inapplicable-enchant", false);
        this.enableStrictPrevention = config.getBoolean("illegals.enchantments.revert-inapplicable-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.revert-inapplicable-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.air = XMaterial.AIR.parseMaterial();
    }
    
    @Override
    public String name() {
        return "revert-inapplicable-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    ItemStack item = event.getItem();
                    if (!whitelistIsEnabled) {
                        if (isInapplicableEnchanted(item))
                            event.setCancelled(true);
                    } else {
                        if (useWhitelistAsBlacklist) {
                            if (
                                    whitelistedItems.contains(item.getType())
                                    && isInapplicableEnchanted(item)
                            ) event.setCancelled(true);
                        } else {
                            if (
                                    !whitelistedItems.contains(item.getType())
                                    && isInapplicableEnchanted(item)
                            ) event.setCancelled(true);
                        }
                    }
                }
            }, plugin);
        }

        if (enableStrictPrevention) {
            plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, () -> {
                for (Player player : plugin.getServer().getOnlinePlayers()) {
                    for (ItemStack item : player.getInventory()) {
                        handleInapplicableEnchantedIfPresent(item);
                    }
                }
            }, 20L, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.revert-inapplicable-enchants.enable", true);
    }

    private void handleInapplicableEnchantedIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (!whitelistIsEnabled) {
            filterEnchantments(item);
        } else {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    filterEnchantments(item);
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    filterEnchantments(item);
                }
            }
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsInapplicableEnchant((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsInapplicableEnchant(ShulkerBox shulkerBox) {
        for (ItemStack shulkerContentItem : shulkerBox.getInventory()) {
            if (shulkerContentItem == null || shulkerContentItem.getType().equals(Material.AIR)) continue;
            if (!whitelistIsEnabled) {
                if (isInapplicableEnchanted(shulkerContentItem))
                    return true;
            } else {
                if (useWhitelistAsBlacklist) {
                    if (
                            whitelistedItems.contains(shulkerContentItem.getType())
                            && isInapplicableEnchanted(shulkerContentItem)
                    ) return true;
                } else {
                    if (
                            !whitelistedItems.contains(shulkerContentItem.getType())
                            && isInapplicableEnchanted(shulkerContentItem)
                    ) return true;
                }
            }
        }
        return false;
    }

    private boolean isInapplicableEnchanted(ItemStack shulkerItem) {
        for (Map.Entry<Enchantment, Integer> enchant : shulkerItem.getEnchantments().entrySet()) {
            if (!enchant.getKey().canEnchantItem(shulkerItem)) {
                return true;
            }
        }
        return false;
    }

    private void filterEnchantments(ItemStack item) {
        for (Map.Entry<Enchantment, Integer> enchant : item.getEnchantments().entrySet()) {
            Enchantment enchantment = enchant.getKey();
            if (!enchantment.canEnchantItem(item))
                item.removeEnchantment(enchantment);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            handleInapplicableEnchantedIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            handleInapplicableEnchantedIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleInapplicableEnchantedIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleInapplicableEnchantedIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleInapplicableEnchantedIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (isShulkerBox(placedBlock.getType()) && shulkerContainsInapplicableEnchant((ShulkerBox) placedBlock.getState())) {
                placedBlock.setType(air);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            handleInapplicableEnchantedIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            handleInapplicableEnchantedIfPresent(event.getCursor());
            handleInapplicableEnchantedIfPresent(event.getCurrentItem());
            for (ItemStack item : event.getInventory())
                handleInapplicableEnchantedIfPresent(item);
            for (ItemStack item : event.getWhoClicked().getInventory())
                handleInapplicableEnchantedIfPresent(item);
        }, 1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            handleInapplicableEnchantedIfPresent(item);
    }
}