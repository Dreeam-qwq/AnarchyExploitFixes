package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

public class CommandItems implements IllegalItemModule {

    private final boolean checkStored;

    public CommandItems() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Deletes items with commands in their NBT data that run as operator.\n" +
                        "These can only be created by players with creative access.\n" +
                        "Most common items are books, since it allows storing multiple commands.");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
    }

    @Override
    public String configPath() {
        return "illegals.nbt.command-items";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_NBT_COMMAND_ITEM;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!checkStored && MaterialUtil.INVENTORY_HOLDER_BLOCKS.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (new NBTItem(itemStack).toString().contains("\"action\":\"run_command\"")) {
            return ItemLegality.ILLEGAL;
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
