package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class NBTFilledStorageItem implements IllegalItemModule {

    private final Set<Material> storageTypes;
    private final String stored_items_tag;
    private final boolean doSomething, checkStored;

    public NBTFilledStorageItem() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Prevents usage of or deletes storage items that have been pre-filled with items using NBT tags.\n" +
                        "These can only be created by players with creative access.\n" +
                        "Most commonly dispensers, droppers and chests containing kit shulkers are created but there are more possibilities.");
        this.stored_items_tag = config.getString(configPath() + ".tag", "BlockEntityTag",
                "The exact name of the nbt tag that signals items are stored inside.");
        this.doSomething = config.getBoolean(configPath() + ".delete-item", true,
                "Whether to delete the item as well.");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.storageTypes = config.getList(configPath() + ".storage-types", MaterialUtil.INVENTORY_HOLDER_BLOCKS.stream()
                        .filter(material -> !MaterialUtil.SHULKER_BOXES.contains(material)).map(Enum::name).sorted().collect(Collectors.toList()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public String configPath() {
        return "illegals.nbt.impossibly-stored-items";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (storageTypes.contains(itemStack.getType()) && new NBTItem(itemStack).getKeys().contains(stored_items_tag)) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return determineLegality(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        if (checkResult != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
