package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import com.cryptomorin.xseries.XMaterial;
import de.tr7zw.changeme.nbtapi.NBTItem;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class NBTFilledStorageItem implements IllegalItemModule {

    private final Set<Material> storageTypes;
    private final String stored_items_tag;
    private final boolean doSomething, checkStored;

    public NBTFilledStorageItem() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Prevents usage of prefilled storage items using NBT tags.\n" +
                        "Commonly used to create dispensers / chests containing kit shulkers.\n" +
                        "Bypass permission: " + bypassPermission().get());
        this.stored_items_tag = config.getString(configPath() + ".tag", "BlockEntityTag",
                "The exact name of the nbt tag that signals items are stored inside.");
        this.doSomething = config.getBoolean(configPath() + ".delete-item", true,
                "Whether to delete the item as well.");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        List<String> defaults = Stream.of(
                        XMaterial.BARREL,
                        XMaterial.CHEST,
                        XMaterial.TRAPPED_CHEST,
                        XMaterial.DISPENSER,
                        XMaterial.DROPPER)
                .map(XMaterial::parseMaterial)
                .filter(Objects::nonNull)
                .map(Enum::name)
                .collect(Collectors.toList());
        this.storageTypes = config.getList(configPath() + ".materials-to-check", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
    }

    @Override
    public String configPath() {
        return "illegals.nbt.impossibly-stored-items";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_NBT_STOREDITEMS;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (storageTypes.contains(itemStack.getType()) && new NBTItem(itemStack).getKeys().contains(stored_items_tag)) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        if (checkResult != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
