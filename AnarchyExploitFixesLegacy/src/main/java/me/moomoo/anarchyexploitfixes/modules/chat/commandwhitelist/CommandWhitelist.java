package me.moomoo.anarchyexploitfixes.modules.chat.commandwhitelist;

import com.destroystokyo.paper.event.server.AsyncTabCompleteEvent;
import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.models.Disableable;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.server.TabCompleteEvent;

import java.util.*;
import java.util.stream.Collectors;

import static me.moomoo.anarchyexploitfixes.utils.CommandUtil.*;

/**
 * Credits go to: YouHaveTrouble - https://github.com/YouHaveTrouble/CommandWhitelist
 * A lot of code bits were yoinked from that project to make this simplified module
 */
public class CommandWhitelist implements AEFModule, Listener, Disableable {

    private final Set<PacketListenerAbstract> packetListeners = new HashSet<>(2);
    private final Set<String> allowedCommands, bannedSubCommands;
    private final boolean usePackets, shouldLog;

    public CommandWhitelist() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "This will make it pretty much impossible to find your plugins as only the commands you specify will be able to work." +
                "\nAllow bypass using permission: anarchyexploitfixes.commandwhitelistbypass");
        this.shouldLog = config.getBoolean(configPath() + ".log", false,
                "Will show logs when a command was denied.");
        this.usePackets = config.getBoolean(configPath() + ".use-packets", true,
                "Without this enabled, tabcomplete filters will not work properly.");
        // Whitelisted Commands
        this.allowedCommands = config.getList(configPath() + ".whitelisted-commands", Arrays.asList(
                        "help", "vote", "kill", "discord", "togglechat", "toggleconnectionmsgs", "toggletells", "togglewhispering", "toggleprivatemsgs",
                        "ignore", "ignorelist", "ignorehard", "toggledeathmsg", "dmt", "worldstats", "stats", "tps", "msg", "whisper", "w", "m", "t",
                        "pm", "tell", "r", "reply", "last"), 
                        "Add all commands you want your players to be able to access (without the '/'). Not case sensitive.")
                .stream()
                .map(String::toLowerCase)
                .collect(Collectors.toCollection(HashSet::new));
        // Blacklisted Subcommands
        this.bannedSubCommands = new HashSet<>(config.getList(configPath() + ".blacklisted-subcommands",
                Arrays.asList("help about", "vote List", "vote Best", "vote Total", "worldstats reload", "stats reload"),
                "Add all subcommands you don't want your players to be able to access. Case sensitive!"));
    }

    @Override
    public String configPath() {
        return "chat.command-whitelist";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (usePackets) {
            if (AnarchyExploitFixes.getConfiguration().packets_disabled) {
                warn("Can't enable packet listener(s) because packets are disabled in config.");
            } else {
                packetListeners.add(new CWChatPacketListener(allowedCommands, bannedSubCommands, shouldLog));
                // packetListeners.add(new CWTabCompletePacketListener(allowedCommands)); - Broken, waiting for packetevents fix
            }
        }
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        packetListeners.forEach(PacketEvents.getAPI().getEventManager()::unregisterListener);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommandPreProcess(PlayerCommandPreprocessEvent event) {
        final Player player = event.getPlayer();
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_CMD_WHITELIST, player)) return;

        String message = event.getMessage();
        String commandLabel = getCommandLabel(message).toLowerCase();
        String fullCommand = message.substring(commandLabel.length()+1);
        fullCommand = "/"+commandLabel+fullCommand;
        event.setMessage(fullCommand);

        if (!allowedCommands.contains(commandLabel)) {
            event.setCancelled(true);
            player.sendMessage(AnarchyExploitFixes.getLang(player.getLocale()).chat_CommandWhitelist_BadCommand);
            if (shouldLog) info(player.getName() + " tried to execute a non whitelisted command: " + fullCommand);
            return;
        }

        for (String bannedSubCommand : bannedSubCommands) {
            if (message.toLowerCase().substring(1).startsWith(bannedSubCommand)) {
                event.setCancelled(true);
                player.sendMessage(AnarchyExploitFixes.getLang(player.getLocale()).chat_CommandWhitelist_BadCommand);
                if (shouldLog) info(player.getName() + " tried to execute a blacklisted subcommand: " + message);
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onAsyncCommandTabComplete(AsyncTabCompleteEvent event) {
        if (event.getCompletions().isEmpty()) return;
        if (!(event.getSender() instanceof Player)) return;
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_CMD_WHITELIST, (Player) event.getSender())) return;

        event.setCompletions(getFilteredTabCompletions(event.getBuffer(), event.getCompletions()));
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onCommandTabComplete(TabCompleteEvent event) {
        if (event.getCompletions().isEmpty()) return;
        if (!(event.getSender() instanceof Player)) return;
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_CMD_WHITELIST, (Player) event.getSender())) return;

        event.setCompletions(getFilteredTabCompletions(event.getBuffer(), event.getCompletions()));
    }

    private List<String> getFilteredTabCompletions(String buffer, List<String> suggestions) {
        if (buffer.startsWith("/")) buffer = buffer.substring(1);
        List<String> suggestionsList = new ArrayList<>(suggestions);
        if (suggestions.isEmpty() || bannedSubCommands.isEmpty()) return suggestionsList;
        for (String bannedSubCommand : bannedSubCommands) {
            String scommand = cutLastArgument(bannedSubCommand);
            if (buffer.startsWith(scommand)) {
                String slast = getLastArgument(bannedSubCommand);
                while (suggestionsList.contains(slast))
                    suggestionsList.remove(slast);
            }
        }
        return suggestionsList;
    }
}
