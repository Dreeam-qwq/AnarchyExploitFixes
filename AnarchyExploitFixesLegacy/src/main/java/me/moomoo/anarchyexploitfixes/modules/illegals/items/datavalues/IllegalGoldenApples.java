package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import com.cryptomorin.xseries.XMaterial;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;
import org.bukkit.material.MaterialData;

import java.util.EnumMap;
import java.util.Map;

public class IllegalGoldenApples implements IllegalItemModule {

    private final Map<Material, MaterialData> allowedAppleData = new EnumMap<>(Material.class);
    private final boolean doSomething, checkStored;

    public IllegalGoldenApples() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "1.12 Only. Bypass permission: " + bypassPermission().get() + "\n" +
                        "Deletes apples with illegal MaterialData values. Will use the API to determine what a natural value looks like.");
        this.doSomething = config.getBoolean(configPath() + ".fix-or-delete-items", false,
                "Will delete shulkers if they contain illegal apples and revert apples themselves to default");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        if (XMaterial.GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.GOLDEN_APPLE.parseMaterial()));
        }
        if (XMaterial.ENCHANTED_GOLDEN_APPLE.isSupported()) {
            this.allowedAppleData.put(
                    XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial(),
                    new MaterialData(XMaterial.ENCHANTED_GOLDEN_APPLE.parseMaterial()));
        }
    }

    @Override
    public String configPath() {
        return "illegals.data-values.illegal-golden-apples";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false)
                && PaperLib.getMinecraftVersion() <= 12;
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_DATA_APPLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (allowedAppleData.containsKey(itemStack.getType()) && !allowedAppleData.containsValue(itemStack.getData())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        switch (legality) {
            case ILLEGAL:
                itemStack.setData(allowedAppleData.get(itemStack.getType()));
                break;
            case CONTAINS_ILLEGAL:
                itemStack.setAmount(0);
        }
    }
}
