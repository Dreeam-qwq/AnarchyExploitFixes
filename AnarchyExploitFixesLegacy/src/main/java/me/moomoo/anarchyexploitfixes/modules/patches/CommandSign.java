package me.moomoo.anarchyexploitfixes.modules.patches;

import com.cryptomorin.xseries.XTag;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;

import java.util.HashSet;

public class CommandSign implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> signs = new HashSet<>();

    public CommandSign() {
        shouldEnable();
        XTag.SIGNS.getValues().forEach(xMaterial -> {
            Material signType = xMaterial.parseMaterial();
            if (signType != null) this.signs.add(signType);
        });
        AnarchyExploitFixes.getConfiguration().addComment("patches.prevent-command-sign",
                "Will have the side effect of players being unable to dye signs in newer versions.");
    }

    @Override
    public String name() {
        return "prevent-command-sign";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.prevent-command-sign", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInteract(PlayerInteractEvent event) {
        if (!event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) return;
        if (signs.contains(event.getClickedBlock().getType())) {
            event.setCancelled(true);
        }
    }
}
