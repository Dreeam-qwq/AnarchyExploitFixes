package me.moomoo.anarchyexploitfixes.modules.illegals.placedblocks;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.ChunkUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class RemoveIllegalBlocksOnChunkload implements AEFModule, Listener {

    private final Set<Material> blocksToRemove;
    private final Set<String> exemptedWorlds;
    private final Material AIR, BEDROCK;
    private final double pauseTPS;
    private final int netherCeilY;
    private final boolean checkShouldPauseOnLowTPS;

    public RemoveIllegalBlocksOnChunkload() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable", "Remove illegally placed blocks on chunkload.");
        List<String> defaults = Stream.of(
                XMaterial.CHAIN_COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK,
                XMaterial.COMMAND_BLOCK_MINECART,
                XMaterial.REPEATING_COMMAND_BLOCK,
                XMaterial.BEDROCK,
                XMaterial.BARRIER)
                .map(XMaterial::parseMaterial)
                .filter(Objects::nonNull)
                .map(Enum::name)
                .sorted()
                .collect(Collectors.toList());
        this.blocksToRemove = config.getList(configPath() + ".blocks-to-remove", defaults)
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.exemptedWorlds = new HashSet<>(config.getList(configPath() + ".exempted-worlds",
                Arrays.asList("exampleworld1", "exampleworld2")));
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath() + ".pause-on-low-TPS", true);
        this.pauseTPS = config.getDouble(configPath() + ".pause-TPS", 14.0);
        this.netherCeilY = config.nether_ceiling_max_y;

        this.AIR = XMaterial.AIR.parseMaterial();
        this.BEDROCK = XMaterial.BEDROCK.parseMaterial();
    }

    @Override
    public String configPath() {
        return "illegals.remove-placed-blocks.on-chunkload";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk() || (checkShouldPauseOnLowTPS && AnarchyExploitFixes.getTPSCache().getTPS() <= pauseTPS)) return;

        Chunk chunk = event.getChunk();
        World world = chunk.getWorld();
        if (exemptedWorlds.contains(world.getName())) return;

        final int minY = ChunkUtil.guessMinWorldHeight(world);
        final int maxY = world.getMaxHeight();
        final boolean inNether = world.getEnvironment() == World.Environment.NETHER;

        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                for (int y = minY; y < maxY; y++) {
                    Block block = chunk.getBlock(x, y, z);
                    if (!blocksToRemove.contains(block.getType())) continue;

                    if (MaterialUtil.isPlayerHead(block.getState())) {
                        block.setType(AIR, false);
                        continue;
                    }

                    // If is bedrock, make sure not to delete naturally generated
                    if (block.getType() == BEDROCK) {
                        if (y > minY + 4) { // offset to not delete natural bedrock floor
                            if (inNether) {
                                // offset to not delete bedrock ceiling
                                if (y < netherCeilY - 5) block.setType(AIR, false);
                            } else {
                                block.setType(AIR, false);
                            }
                        }
                        continue;
                    }

                    block.setType(AIR, false);
                }
            }
        }
    }
}
