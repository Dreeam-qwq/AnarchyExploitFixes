package me.moomoo.anarchyexploitfixes.modules.elytra;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XSound;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import static me.moomoo.anarchyexploitfixes.utils.ElytraUtils.*;

public class ElytraAtSpawn implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private final int spawn_Radius;
    private final double spawn_SpeedOldChunks, spawn_SpeedNewChunks, spawn_DenyElytraTPS;
    private final boolean teleportBack, spawn_shouldCheckPermission, spawn_DenyElytra, spawn_DenyOnLowTPS,
            spawn_AlsoRemoveElytraOnLowTPS, showActionbarMsgs, displayChunkInfo, playNotifSound;
    private final Material elytra;
    private final Sound notifyDing;

    public ElytraAtSpawn() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        this.playNotifSound = config.getBoolean("elytra.elytra-speed.play-sound-when-too-fast", true);
        this.teleportBack = config.getBoolean("elytra.elytra-speed.teleport-instead-of-canceling-movement", false);
        config.addComment("elytra.elytra-speed.At-Spawn.enable", "Use separate values for players at spawn.");
        this.spawn_shouldCheckPermission = config.getBoolean("elytra.elytra-speed.At-Spawn.use-bypass-permission", false,
                "Can be slow with a lot of players. Enable only if needed.");
        this.spawn_DenyElytra = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-usage", false);
        this.spawn_Radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.spawn_SpeedOldChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-old-chunks", 1.0);
        this.spawn_SpeedNewChunks = config.getDouble("elytra.elytra-speed.At-Spawn.speed-new-chunks", 0.8);
        this.spawn_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.deny-elytra-on-low-TPS", true);
        this.spawn_DenyElytraTPS = config.getDouble("elytra.elytra-speed.At-Spawn.deny-elytra-TPS", 10.0);
        this.spawn_AlsoRemoveElytraOnLowTPS = config.getBoolean("elytra.elytra-speed.At-Spawn.also-remove-elytra-on-low-TPS", true);
        this.elytra = XMaterial.ELYTRA.parseMaterial();
        this.notifyDing = XSound.ENTITY_EXPERIENCE_ORB_PICKUP.parseSound();
    }

    @Override
    public String name() {
        return "elytra-speed.At-Spawn";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (spawn_shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (!isAtSpawn(player, spawn_Radius)) return;

        if (spawn_DenyElytra) {
            if (teleportBack) player.teleport(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.getLocale()).elytra_spawn_DisabledHere
                    .replace("%radius%", String.valueOf(spawn_Radius))
            );
            return;
        }

        if (spawn_DenyOnLowTPS && plugin.tps <= spawn_DenyElytraTPS) {
            if (teleportBack) player.teleport(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);
            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.getLocale()).elytra_spawn_DisabledLowTPS
                    .replace("%tps%", String.valueOf(spawn_DenyElytraTPS))
            );

            if (spawn_AlsoRemoveElytraOnLowTPS) {
                PlayerInventory playerInv = player.getInventory();
                if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(elytra)) {
                    ItemStack elytra = playerInv.getChestplate();
                    playerInv.setChestplate(null);
                    player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                }
            }

            return;
        }

        double flySpeed = blocksPerTick(event.getFrom(), event.getTo());

        if (plugin.NEW_CHUNK_PLAYERS.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (flySpeed > spawn_SpeedNewChunks+tolerance) {
                // too fast
                if (teleportBack) player.teleport(event.getFrom());
                else event.setCancelled(true);

                if (playNotifSound) player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                if (!showActionbarMsgs) return;
                LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());
                if (displayChunkInfo) {
                    player.sendActionBar(lang.elytra_spawn_TooFastChunkInfo
                            .replace("%neworold%", lang.elytra_spawn_New)
                            .replace("%chunks%", lang.elytra_spawn_Chunks)
                            .replace("%radius%", String.valueOf(spawn_Radius))
                    );
                } else {
                    player.sendActionBar(lang.elytra_spawn_TooFast
                            .replace("%radius%", String.valueOf(spawn_Radius))
                    );
                }
            } else {
                if (!showActionbarMsgs) return;
                LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());
                if (displayChunkInfo) {
                    player.sendActionBar(lang.elytra_spawn_YouAreFlyingIn
                            .replace("%neworold%", lang.elytra_spawn_New_Color+lang.elytra_spawn_New.toUpperCase())
                            .replace("%chunks%", lang.elytra_spawn_Chunks)
                    +" "+lang.elytra_spawn_Speed
                            .replace("%speed%", speed(flySpeed))
                            .replace("%maxspeed%", String.valueOf(spawn_SpeedNewChunks))
                    );
                } else {
                    player.sendActionBar(lang.elytra_spawn_Speed
                            .replace("%speed%", speed(flySpeed))
                            .replace("%maxspeed%", String.valueOf(spawn_SpeedNewChunks))
                    );
                }
            }
        } else {
            // Speed Old Chunks
            if (flySpeed > spawn_SpeedOldChunks+tolerance) {
                // too fast
                if (teleportBack) player.teleport(event.getFrom());
                else event.setCancelled(true);

                if (playNotifSound) player.playSound(player.getEyeLocation(), notifyDing, 1.0F, 1.0F);

                if (!showActionbarMsgs) return;
                LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());
                if (displayChunkInfo) {
                    player.sendActionBar(lang.elytra_spawn_TooFastChunkInfo
                            .replace("%neworold%", lang.elytra_spawn_Old)
                            .replace("%chunks%", lang.elytra_spawn_Chunks)
                            .replace("%radius%", String.valueOf(spawn_Radius))
                    );
                } else {
                    player.sendActionBar(lang.elytra_spawn_TooFast
                            .replace("%radius%", String.valueOf(spawn_Radius))
                    );
                }
            } else {
                if (!showActionbarMsgs) return;
                LanguageCache lang = AnarchyExploitFixes.getLang(player.getLocale());
                if (displayChunkInfo) {
                    player.sendActionBar(lang.elytra_spawn_YouAreFlyingIn
                            .replace("%neworold%", lang.elytra_spawn_Old_Color+lang.elytra_spawn_Old.toUpperCase())
                            .replace("%chunks%", lang.elytra_spawn_Chunks)
                    +" "+lang.elytra_spawn_Speed
                            .replace("%speed%", speed(flySpeed))
                            .replace("%maxspeed%", String.valueOf(spawn_SpeedOldChunks))
                    );
                } else {
                    player.sendActionBar(lang.elytra_global_Speed
                            .replace("%speed%", speed(flySpeed))
                            .replace("%maxspeed%", String.valueOf(spawn_SpeedOldChunks))
                    );
                }
            }
        }
    }
}
