package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryCloseEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

public class AntiLecternCrash extends AEFPacketModule implements Listener {

    private final Map<UUID, InventoryType> openInventoryTypes = new HashMap<>();
    private InventoryType LECTERN;
    private final boolean log, kick;

    public AntiLecternCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        try { this.LECTERN = InventoryType.valueOf("LECTERN"); } catch (IllegalArgumentException ignored) {}
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches an instant server crash exploit that involves sending an invalid Window Click packet\n" +
                        "while taking a book out of a Lectern.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.lectern-crash-patch";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true) && LECTERN != null;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        if (new WrapperPlayClientClickWindow(event)
                .getWindowClickType() != WrapperPlayClientClickWindow.WindowClickType.QUICK_MOVE) return;

        if (
                this.openInventoryTypes.containsKey(event.getUser().getUUID())
                && this.openInventoryTypes.get(event.getUser().getUUID()) == LECTERN
        ) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryOpen(InventoryOpenEvent event) {
        this.openInventoryTypes.put(event.getPlayer().getUniqueId(), event.getView().getType());
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onInventoryClose(InventoryCloseEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerQuit(PlayerQuitEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.MONITOR, ignoreCancelled = true)
    private void onPlayerKick(PlayerKickEvent event) {
        this.openInventoryTypes.remove(event.getPlayer().getUniqueId());
    }
}
