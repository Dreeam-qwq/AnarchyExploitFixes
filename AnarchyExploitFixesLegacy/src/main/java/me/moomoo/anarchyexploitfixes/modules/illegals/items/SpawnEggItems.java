package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import me.moomoo.anarchyexploitfixes.utils.MaterialUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class SpawnEggItems implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final boolean shouldDelete, checkStored;

    public SpawnEggItems() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Prevents usage of spawn eggs. Bypass permission: " + bypassPermission().get());
        this.shouldDelete = config.getBoolean(configPath() + ".remove-spawn-eggs", false);
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false,
                "Will delete shulker/bundle if they contain any spawneggs.");
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items",
                        Collections.singletonList(XMaterial.VILLAGER_SPAWN_EGG.parseMaterial().name()))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public String configPath() {
        return "illegals.ban-spawn-eggs";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_SPAWNEGG;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || whitelistedTypes.contains(itemStack.getType())) {
            return ItemLegality.LEGAL;
        }

        if (MaterialUtil.isSpawnEgg(itemStack)) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult != ItemLegality.LEGAL) {
            if (shouldDelete) itemStack.setAmount(0);
        }
    }
}
