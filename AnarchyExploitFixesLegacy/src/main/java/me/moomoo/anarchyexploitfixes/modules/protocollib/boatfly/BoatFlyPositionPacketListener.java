package me.moomoo.anarchyexploitfixes.modules.protocollib.boatfly;

import com.comphenix.protocol.PacketType;
import com.comphenix.protocol.ProtocolLibrary;
import com.comphenix.protocol.events.ListenerPriority;
import com.comphenix.protocol.events.PacketAdapter;
import com.comphenix.protocol.events.PacketEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.entity.Boat;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class BoatFlyPositionPacketListener extends PacketAdapter {

    private final boolean logIsEnabled, shouldKickPlayer;
    private final int maxEntityPacketsPer10s;
    private final HashMap<UUID, Integer> boatLevels = new HashMap<>();
    private final String log_name;

    protected BoatFlyPositionPacketListener(
            AnarchyExploitFixes plugin,
            int maxEntityPacketsPer10s,
            boolean shouldKickPlayer,
            boolean logIsEnabled,
            String log_name
    ) {
        super(plugin, ListenerPriority.HIGHEST, PacketType.Play.Client.POSITION);
        this.logIsEnabled = logIsEnabled;
        this.maxEntityPacketsPer10s = maxEntityPacketsPer10s;
        this.shouldKickPlayer = shouldKickPlayer;
        this.log_name = log_name;
    }

    protected void register() {
        ProtocolLibrary.getProtocolManager().addPacketListener(this);
    }
    
    @Override
    public void onPacketReceiving(PacketEvent event) {
        if (event.isPlayerTemporary()) return;
        Player player = event.getPlayer();
        Entity vehicle = player.getVehicle();
        if (!(vehicle instanceof Boat)) return;

        UUID playerUniqueID = player.getUniqueId();

        if (!boatLevels.containsKey(playerUniqueID)) {
            boatLevels.put(playerUniqueID, 1);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,
                    () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L);
            return;
        }

        if (boatLevels.get(playerUniqueID) <= maxEntityPacketsPer10s) {
            boatLevels.merge(playerUniqueID, 1, Integer::sum);
            plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin,
                    () -> boatLevels.put(playerUniqueID, boatLevels.get(playerUniqueID) - 1), 200L);
            return;
        }

        plugin.getServer().getScheduler().runTask(plugin, vehicle::remove);
        if (logIsEnabled)
            LogUtils.moduleLog(Level.INFO, log_name, "Prevented player '"+player.getName()+"' from boat flying");
        if (shouldKickPlayer)
            plugin.getServer().getScheduler().runTask(plugin, () -> player.kickPlayer(AnarchyExploitFixes.getLang(player.getLocale()).misc_MaskedKickMessage));
    }
}
