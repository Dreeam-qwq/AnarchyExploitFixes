package me.moomoo.anarchyexploitfixes.modules.illegals.items.playerheads;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.SkullMeta;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class BanPlayerHeads implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final ItemStack PLAYER_HEAD;
    private final Material air;
    private final boolean enableStrictPrevention, removeIllegalShulkers, preventHopperBypass;
    private final long checkPeriod;

    public BanPlayerHeads() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.PLAYER_HEAD = XMaterial.PLAYER_HEAD.parseItem();
        config.addComment("illegals.player-heads.remove-items.enable", "This deletes playerheads with and without owners");
        this.preventHopperBypass = config.getBoolean("illegals.player-heads.remove-items.prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n"+
                        "out of the hoppers inventory.\n"+
                        "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.removeIllegalShulkers = config.getBoolean("illegals.player-heads.remove-items.delete-shulker-if-contains-player-head", false);
        this.enableStrictPrevention = config.getBoolean("illegals.player-heads.remove-items.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.player-heads.remove-items.periodically-check-player-inventories.check-period-in-ticks", 20);

        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "player-heads.remove-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    ItemStack hopperItem = event.getItem();
                    if (hopperItem.isSimilar(PLAYER_HEAD) || ((SkullMeta) hopperItem.getItemMeta()).hasOwner()) {
                        event.setCancelled(true);
                    }
                }
            }, plugin);
        }

        if (enableStrictPrevention) {
            plugin.getServer().getScheduler().scheduleSyncRepeatingTask(plugin, () -> {
                for (Player player : plugin.getServer().getOnlinePlayers()) {
                    for (ItemStack item : player.getInventory()) {
                        removePlayerHeadItemIfPresent(item);
                    }
                }
            }, 20L, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.player-heads.remove-items.enable", false);
    }

    private void removePlayerHeadItemIfPresent(ItemStack item) {
        if (item == null) return;

        if (item.getType().equals(PLAYER_HEAD.getType()) && (item.isSimilar(PLAYER_HEAD) || ((SkullMeta) item.getItemMeta()).hasOwner())) {
            item.subtract(item.getAmount());
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsIllegalHead((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsIllegalHead(ShulkerBox shulkerBox) {
        for (ItemStack shulkerContentItem : shulkerBox.getInventory()) {
            if (shulkerContentItem != null && shulkerContentItem.getType().equals(PLAYER_HEAD.getType())) {
                if (shulkerContentItem.isSimilar(PLAYER_HEAD) || ((SkullMeta) shulkerContentItem.getItemMeta()).hasOwner()) {
                    return true;
                }
            }
        }
        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            removePlayerHeadItemIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            removePlayerHeadItemIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        removePlayerHeadItemIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        removePlayerHeadItemIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        removePlayerHeadItemIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (isShulkerBox(placedBlock.getType()) && shulkerContainsIllegalHead((ShulkerBox) placedBlock.getState())) {
                placedBlock.setType(air);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            removePlayerHeadItemIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            removePlayerHeadItemIfPresent(event.getCursor());
            removePlayerHeadItemIfPresent(event.getCurrentItem());
            for (ItemStack item : event.getInventory())
                removePlayerHeadItemIfPresent(item);
            for (ItemStack item : event.getWhoClicked().getInventory())
                removePlayerHeadItemIfPresent(item);
        },1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            removePlayerHeadItemIfPresent(item);
    }
}
