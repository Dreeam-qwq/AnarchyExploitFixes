package me.moomoo.anarchyexploitfixes.modules.misc;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.OfflinePlayer;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;

import java.util.Arrays;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class FirstJoinMessages implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final AtomicInteger totalPlayers = new AtomicInteger(0);
    private final boolean logFirstJoin;

    public FirstJoinMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable", "Configure message in lang folder.");
        this.logFirstJoin = config.getBoolean(configPath() + ".show-in-console", true);
    }

    @Override
    public String configPath() {
        return "misc.join-leave-messages.first-join-messages";
    }

    @Override
    public void enable() {
        // Prevent lag by getting total player number once and then counting up manually,
        // as getting all players is resource intense.
        // We do so async to not make the main thread wait.
        CompletableFuture.runAsync(() -> totalPlayers.set(Arrays.stream(plugin.getServer().getOfflinePlayers())
                .filter(OfflinePlayer::hasPlayedBefore).collect(Collectors.toSet()).size()))
                .thenRun(() -> plugin.getServer().getPluginManager().registerEvents(this, plugin));
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoin(PlayerJoinEvent event) {
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPlayedBefore()) return;
        if (joiningPlayer.hasPermission(AEFPermission.SILENT_JOIN.get())) return;

        final int joiningPlayersNumber = totalPlayers.incrementAndGet();

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            AnarchyExploitFixes.getDatastore().getJoinLeaveEnabled(onlinePlayer.getUniqueId()).thenAccept(enabled -> {
                if (enabled) {
                    for (String line : AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_firstJoinMessage) {
                        onlinePlayer.sendMessage(line
                                .replace("%player%", joiningPlayer.getName())
                                .replace("%players_num%", AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).ordinalFormat
                                        .format(joiningPlayersNumber, "%digits-ordinal")));
                    }
                }
            });
        }

        if (logFirstJoin) {
            for (String line : AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).misc_firstJoinMessage) {
                AnarchyExploitFixes.getUnprefixedLogger().info(line
                        .replace("%player%", joiningPlayer.getName())
                        .replace("%players_num%", AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).ordinalFormat
                                .format(joiningPlayersNumber, "%digits-ordinal")));
            }
        }
    }
}
