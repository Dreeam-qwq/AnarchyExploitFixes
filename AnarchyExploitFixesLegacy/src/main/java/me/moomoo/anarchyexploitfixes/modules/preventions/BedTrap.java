package me.moomoo.anarchyexploitfixes.modules.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.PlayerDeathEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;
import java.util.logging.Level;

public class BedTrap implements AnarchyExploitFixesModule, Listener {

    private final HashMap<UUID, Long> cooldowns = new HashMap<>();
    private final HashMap<UUID, Integer> deathCounts = new HashMap<>();
    private final boolean logIsEnabled;
    private final int maxDeathsPerTime;
    private final long deathCooldownInMillis;
    private final double maxBedDistance;

    public BedTrap() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.anti-bed-trap.enable", "Resets Bed Respawn when a player dies too many times within a certain timeframe.");
        this.logIsEnabled = config.getBoolean("preventions.anti-bed-trap.log", false);
        this.maxDeathsPerTime = config.getInt("preventions.anti-bed-trap.max-deaths-per-time", 7, "Amount of times player can die until he is determined as bed-trapped.");
        this.deathCooldownInMillis = config.getInt("preventions.anti-bed-trap.time-in-seconds", 5, "Time until death counter will be reset again") * 1000L;
        this.maxBedDistance = config.getDouble("preventions.anti-bed-trap.max-distance-to-bed", 6.0);
    }

    @Override
    public String name() {
        return "anti-bed-trap";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.anti-bed-trap.enable", false);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onDeath(PlayerDeathEvent event) {
        Player player = event.getEntity();
        Location bedSpawn = player.getBedSpawnLocation();
        if (bedSpawn == null) return;
        // Only continue logic if a bed is near
        if (!player.getWorld().equals(bedSpawn.getWorld()) || player.getLocation().distance(bedSpawn) > maxBedDistance) return;

        final UUID playerUniqueId = player.getUniqueId();
        final long currentTime = System.currentTimeMillis();

        if (!deathCounts.containsKey(playerUniqueId) || !cooldowns.containsKey(playerUniqueId)) {
            deathCounts.put(playerUniqueId, 1);
            cooldowns.put(playerUniqueId, currentTime);
            return;
        }

        int playerDeathCount = deathCounts.get(playerUniqueId);

        if (playerDeathCount >= maxDeathsPerTime) {
            if (currentTime - cooldowns.get(playerUniqueId) < deathCooldownInMillis) {
                player.setBedSpawnLocation(null, true);
                if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Reset bed respawn of potentially bed-trapped player '"+ player.getName() + "'");
                return;
            }

            playerDeathCount = 1;
        }

        playerDeathCount++;

        deathCounts.put(playerUniqueId, playerDeathCount);
        cooldowns.put(playerUniqueId, currentTime);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        final UUID playerUniqueId = event.getPlayer().getUniqueId();
        deathCounts.remove(playerUniqueId);
        cooldowns.remove(playerUniqueId);
    }
}
