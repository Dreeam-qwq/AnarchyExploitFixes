package me.moomoo.anarchyexploitfixes.modules.preventions;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.Action;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

import java.time.Duration;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

public class MapSpam implements AEFModule, Listener {

    private final Map<UUID, Integer> mapCount = new HashMap<>();
    private final Map<UUID, Long> cooldowns = new HashMap<>();
    private final Material MAP;
    private final long cooldownInMillis;
    private final int mapCreateLimit;
    private final boolean shouldNotifyPlayers;
    
    public MapSpam() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Puts a cooldown on creating maps so players cant reset map arts that easily\n" +
                        "Only needed on versions below 1.12 and lower.\n" +
                        "Bypass permission: " + AEFPermission.BYPASS_MAP_SPAM.get());
        this.shouldNotifyPlayers = config.getBoolean(configPath() + ".notify-players", true,
                "Sends a message to players telling them how many maps they can create per time");
        this.cooldownInMillis = TimeUnit.MINUTES.toMillis(config.getInt(configPath() + ".cooldown-time-in-minutes", 60));
        this.mapCreateLimit = config.getInt(configPath() + ".max-amount-of-maps-per-time", 4);
        this.MAP = XMaterial.MAP.parseMaterial();
    }

    @Override
    public String configPath() {
        return "preventions.prevent-map-reset-spam";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onMapCreate(PlayerInteractEvent event) {
        if (event.getAction() == Action.LEFT_CLICK_AIR || event.getAction() == Action.LEFT_CLICK_BLOCK) return;
        final ItemStack mapItem = event.getItem();
        if (mapItem == null || mapItem.getType() != MAP) return;
        final Player player = event.getPlayer();
        if (player.hasPermission(AEFPermission.BYPASS_MAP_SPAM.get())) return;

        final UUID playerUniqueId = player.getUniqueId();
        final long currentTime = System.currentTimeMillis();

        if (!mapCount.containsKey(playerUniqueId) || !cooldowns.containsKey(playerUniqueId)) {
            mapCount.put(playerUniqueId, 1);
            cooldowns.put(playerUniqueId, currentTime);
            if (shouldNotifyPlayers) player.sendMessage(
                    AnarchyExploitFixes.getLang(player.getLocale()).mapspam_youCanOnlyCreateXMoreMaps
                            .replace("%amount%", String.valueOf(mapCreateLimit-1))
                            .replace("%time%", formatToHoursAndMinutes(cooldownInMillis))
                    );
            return;
        }

        int mapsCreatedCount = mapCount.get(playerUniqueId);
        final long millisBetweenFirstMapCreateAndNow = currentTime - cooldowns.get(playerUniqueId);

        if (mapsCreatedCount >= mapCreateLimit) {
            if (millisBetweenFirstMapCreateAndNow < cooldownInMillis) {
                event.setCancelled(true);
                player.updateInventory();
                if (shouldNotifyPlayers) player.sendMessage(
                        AnarchyExploitFixes.getLang(player.getLocale()).mapspam_exceededLimit
                                .replace("%time%", formatToHoursAndMinutes(cooldownInMillis - millisBetweenFirstMapCreateAndNow))
                        );
                return;
            }

            // Reset
            mapsCreatedCount = 1;
        }

        mapsCreatedCount++;

        if (shouldNotifyPlayers) {
            int remaining = mapCreateLimit - mapsCreatedCount;
            if (remaining > 0) player.sendMessage(
                    AnarchyExploitFixes.getLang(player.getLocale()).mapspam_youCanOnlyCreateXMoreMaps
                            .replace("%amount%", String.valueOf(remaining))
                            .replace("%time%", formatToHoursAndMinutes(cooldownInMillis - millisBetweenFirstMapCreateAndNow))
            );
        }

        mapCount.put(playerUniqueId, mapsCreatedCount);
        cooldowns.put(playerUniqueId, currentTime);
    }

    private static String formatToHoursAndMinutes(long millis) {
        Duration duration = Duration.ofMillis(millis);
        if (duration.toHours() <= 0) return String.format("%02dm", (int) duration.toMinutes() % 60);
        return String.format("%02dh %02dm", duration.toHours(), (int) duration.toMinutes() % 60);
    }
}
