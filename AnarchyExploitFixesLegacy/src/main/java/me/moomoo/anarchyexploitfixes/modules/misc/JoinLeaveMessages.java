package me.moomoo.anarchyexploitfixes.modules.misc;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;

public class JoinLeaveMessages implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean showInConsole, firstJoinEnabled;

    public JoinLeaveMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "If you want to hide yourself or someone else when logging into the game,\n" +
                        "use these permissions: " + AEFPermission.SILENT_JOIN.get() + ", " + AEFPermission.SILENT_LEAVE.get());
        this.showInConsole = config.getBoolean(configPath() + ".show-in-console", false);
        this.firstJoinEnabled = config.getBoolean(configPath() + ".first-join-messages.enable", false);
    }

    @Override
    public String configPath() {
        return "misc.join-leave-messages";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        event.setJoinMessage(null);
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPermission(AEFPermission.SILENT_JOIN.get())) return;
        if (firstJoinEnabled && !joiningPlayer.hasPlayedBefore()) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            AnarchyExploitFixes.getDatastore().getJoinLeaveEnabled(onlinePlayer.getUniqueId()).thenAccept(enabled -> {
                if (enabled) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_joinMessage
                            .replace("%player%", joiningPlayer.getName()));
                }
            });
        }

        if (showInConsole) AnarchyExploitFixes.getUnprefixedLogger().info(AnarchyExploitFixes.getLang(joiningPlayer.getLocale()).misc_joinMessage
                .replace("%player%", joiningPlayer.getName()) + " ("+joiningPlayer.getLocale() + ")");
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerLeaveEvent(PlayerQuitEvent event) {
        event.setQuitMessage(null);
        final Player leavingPlayer = event.getPlayer();
        if (leavingPlayer.hasPermission(AEFPermission.SILENT_LEAVE.get())) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            if (onlinePlayer.getUniqueId().equals(leavingPlayer.getUniqueId())) continue;
            AnarchyExploitFixes.getDatastore().getJoinLeaveEnabled(onlinePlayer.getUniqueId()).thenAccept(enabled -> {
                if (enabled) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.getLocale()).misc_leaveMessage
                            .replace("%player%", leavingPlayer.getName()));
                }
            });
        }

        if (showInConsole) AnarchyExploitFixes.getUnprefixedLogger().info(AnarchyExploitFixes.getLang(leavingPlayer.getLocale()).misc_leaveMessage
                .replace("%player%", leavingPlayer.getName()) + " (" + leavingPlayer.getLocale() + ")");
    }
}
