package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.util.Vector3i;
import com.github.retrooper.packetevents.wrapper.play.client.*;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.util.NumberConversions;

public class AntiNoCom extends AEFPacketModule {

    private final double maxDistanceSquared;
    private final boolean log, kick;

    public AntiNoCom() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Prevents the abusable mechanic used by the infamous \"No Comment\" coordinate exploit,\n" +
                        "where the server responds to requests that are far outside of the sending player's reach,\n" +
                        "therefore either crashing or revealing positions loaded by other players.\n" +
                        "More information: https://www.youtube.com/watch?v=elqAh3GWRpA \n" +
                        "This is still useful to keep enabled even if your version is not affected by the NoCom vulnerability.");
        this.maxDistanceSquared = NumberConversions.square(config.getInt(configPath() + ".max-distance", 24));
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.prevent-nocom-coordinate-exploit";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        final Vector3i blockPos;
        if (event.getPacketType() == PacketType.Play.Client.PLAYER_DIGGING) {
            blockPos = new WrapperPlayClientPlayerDigging(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.PLAYER_BLOCK_PLACEMENT) {
            blockPos = new WrapperPlayClientPlayerBlockPlacement(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_SIGN) {
            blockPos = new WrapperPlayClientUpdateSign(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.QUERY_BLOCK_NBT) {
            blockPos = new WrapperPlayClientQueryBlockNBT(event).getBlockPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_COMMAND_BLOCK) {
            blockPos = new WrapperPlayClientUpdateCommandBlock(event).getPosition();
        } else if (event.getPacketType() == PacketType.Play.Client.UPDATE_JIGSAW_BLOCK) {
            blockPos = new WrapperPlayClientUpdateJigsawBlock(event).getPosition();
        } else {
            return;
        }

        final Player player = (Player) event.getPlayer();
        if (player == null) return;

        if (distanceSquared(blockPos, player.getLocation()) > maxDistanceSquared) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }

    private double distanceSquared(final Vector3i packetPos, final Location playerPos) {
        return  NumberConversions.square(packetPos.x - playerPos.getX()) +
                NumberConversions.square(packetPos.y - playerPos.getY()) +
                NumberConversions.square(packetPos.z - playerPos.getZ());
    }
}
