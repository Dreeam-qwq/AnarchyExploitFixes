package me.moomoo.anarchyexploitfixes.modules.illegals.items.datavalues;

import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.stream.Collectors;

public class CustomDataValues implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private final Set<String> forbiddenDataValues;
    private final boolean useWhitelist, blacklistMode, checkStored, doSomething;

    public CustomDataValues() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "1.12 Only. Bypass permission: " + bypassPermission().get() + "\n" +
                        "Deletes items with configured illegal MaterialData values.\n" +
                        "Use '/aef datavalue' ingame while holding an item to add the specific value here.");
        this.doSomething = config.getBoolean(configPath() + ".delete-item", true);
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.forbiddenDataValues = new HashSet<>(config.getList(configPath() + ".data-values",
                Collections.singletonList("SuperIllegalItem(0)")));
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items",
                        Collections.singletonList("GOLDEN_APPLE"))
                .stream()
                .map(configuredItem -> {
                    try {
                        return Material.valueOf(configuredItem);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredItem);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public String configPath() {
        return "illegals.data-values.custom-data-values";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false)
                && PaperLib.getMinecraftVersion() <= 12;
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_DATA_CUSTOM;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (forbiddenDataValues.contains(itemStack.getData().toString())) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
