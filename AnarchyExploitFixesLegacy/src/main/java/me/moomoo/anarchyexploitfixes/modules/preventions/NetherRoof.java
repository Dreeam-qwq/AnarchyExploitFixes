package me.moomoo.anarchyexploitfixes.modules.preventions;

import com.cryptomorin.xseries.XMaterial;
import com.cryptomorin.xseries.XTag;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

public class NetherRoof implements AnarchyExploitFixesModule, Listener {

    private final int ceilingY;
    private final boolean safe_teleport_enabled;

    private final Material air, nether_portal, netherrack;

    public NetherRoof() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.prevent-nether-roof.enable", "Prevent players from going above the nether roof.");
        this.safe_teleport_enabled = config.getBoolean("preventions.prevent-nether-roof.safely-teleport-players", true);
        this.ceilingY = config.nether_ceiling_max_y;

        this.air = XMaterial.AIR.parseMaterial();
        this.nether_portal = XMaterial.NETHER_PORTAL.parseMaterial();
        this.netherrack = XMaterial.NETHERRACK.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-nether-roof";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.prevent-nether-roof.enable", true);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        final Location teleportDestination = event.getTo();
        if (!teleportDestination.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (teleportDestination.getY() >= ceilingY) {
            if (event.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) return;
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (event.getTo().getY() >= ceilingY || player.getLocation().getY() >= ceilingY) {
            if (player.hasPermission("anarchyexploitfixes.netherroofbypass")) return;
            teleportFromCeiling(player);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        if (!player.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (event.getBlock().getY() > ceilingY) {
            if (player.hasPermission("anarchyexploitfixes.netherroofbypass")) return;

            event.setCancelled(true);
            teleportFromCeiling(player);
        }
    }

    private void teleportFromCeiling(Player player) {
        final Location teleportDestination = player.getLocation().clone().subtract(0.5, 7, 0.5);
        player.teleport(teleportDestination);
        if (player.isInsideVehicle()) player.leaveVehicle();
        if (player.isGliding()) player.setGliding(false);
        if (!safe_teleport_enabled) return;
        // Check block above for liquid or falling block
        Block blockAboveHead = teleportDestination.getBlock().getRelative(BlockFace.UP, 2);
        if (blockAboveHead.isLiquid() || blockAboveHead.getType().hasGravity()) {
            blockAboveHead.setType(netherrack, false);
        }

        // Create air pocket for player
        Block blockAtPlayerLegs = teleportDestination.getBlock();
        if (
                !blockAtPlayerLegs.getType().equals(air)
                && !blockAtPlayerLegs.getType().equals(nether_portal)
        ) {
            blockAtPlayerLegs.setType(air, false);
        }
        Block blockAtPlayerTorso = blockAtPlayerLegs.getRelative(BlockFace.UP);
        if (
                !blockAtPlayerTorso.getType().equals(air)
                && !blockAtPlayerTorso.getType().equals(nether_portal)
        ) {
            blockAtPlayerTorso.setType(air, false);
        }

        // Check all sides of air pocket for liquids and fill with netherrack
        for (int i = 0; i < 2; i++) {
            Block airPocketBlock = blockAtPlayerLegs.getRelative(BlockFace.UP, i);
            if (airPocketBlock.getRelative(BlockFace.NORTH).isLiquid())
                airPocketBlock.getRelative(BlockFace.NORTH).setType(netherrack, false);
            if (airPocketBlock.getRelative(BlockFace.EAST).isLiquid())
                airPocketBlock.getRelative(BlockFace.EAST).setType(netherrack, false);
            if (airPocketBlock.getRelative(BlockFace.SOUTH).isLiquid())
                airPocketBlock.getRelative(BlockFace.SOUTH).setType(netherrack, false);
            if (airPocketBlock.getRelative(BlockFace.WEST).isLiquid())
                airPocketBlock.getRelative(BlockFace.WEST).setType(netherrack, false);
        }

        // Create block below feet if not solid
        Block blockBelowFeet = blockAtPlayerLegs.getRelative(BlockFace.DOWN);
        if (blockBelowFeet.isLiquid() || blockBelowFeet.getType().hasGravity()) {
            blockBelowFeet.setType(netherrack, false);
        }
    }
}

