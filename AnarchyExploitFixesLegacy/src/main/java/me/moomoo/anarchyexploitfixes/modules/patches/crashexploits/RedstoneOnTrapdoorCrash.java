package me.moomoo.anarchyexploitfixes.modules.patches.crashexploits;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockRedstoneEvent;

import java.util.HashMap;
import java.util.logging.Level;

public class RedstoneOnTrapdoorCrash implements AnarchyExploitFixesModule, Listener {

    private final HashMap<Location, Long> cooldowns = new HashMap<>();
    private final HashMap<Location, Integer> trapdoorActivationByRedstoneCounts = new HashMap<>();
    private final boolean logIsEnabled;
    private final int trapdoorActivationLimit;
    private final long trapdoorRedstoneCooldownMillis;
    private final Material air;

    public RedstoneOnTrapdoorCrash() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.enable",  "prevents a powerful crash exploit present in 1.13 - 1.19.3");
        this.logIsEnabled = config.getBoolean("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.log", true);
        this.trapdoorActivationLimit = config.getInt("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.max-trapdoor-activations-by-redstone-per-time", 20);
        this.trapdoorRedstoneCooldownMillis = config.getInt("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.time-in-ticks", 60) * 50L;
        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "prevent-redstone-on-trapdoors";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        plugin.getServer().getScheduler().runTaskTimerAsynchronously(plugin, () -> {
            trapdoorActivationByRedstoneCounts.clear();
            cooldowns.clear();
        }, 6000L, 6000L);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.crash-exploits.prevent-redstone-on-trapdoor-crash.enable", false);
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onRedstonePowerTrapdoor(BlockRedstoneEvent event) {
        Block trapdoor = event.getBlock();
        if (!trapdoor.getType().name().contains("TRAPDOOR")) return;

        final Location trapdoorLoc = trapdoor.getLocation();
        final long currentTime = System.currentTimeMillis();

        if (!trapdoorActivationByRedstoneCounts.containsKey(trapdoorLoc) || !cooldowns.containsKey(trapdoorLoc)) {
            trapdoorActivationByRedstoneCounts.put(trapdoorLoc, 1);
            cooldowns.put(trapdoorLoc, currentTime);
            return;
        }

        int trapdoorOpenByRedstoneCount = trapdoorActivationByRedstoneCounts.get(trapdoorLoc);

        if (trapdoorOpenByRedstoneCount >= trapdoorActivationLimit) {
            if (currentTime - cooldowns.get(trapdoorLoc) < trapdoorRedstoneCooldownMillis) {
                trapdoor.setType(air);
                if (logIsEnabled) LogUtils.moduleLog(Level.WARNING, name(), "Someone tried to crash the server using trapdoors and redstone at: " + trapdoorLoc);
                return;
            }

            trapdoorOpenByRedstoneCount = 1;
        }

        trapdoorOpenByRedstoneCount++;

        trapdoorActivationByRedstoneCounts.put(trapdoorLoc, trapdoorOpenByRedstoneCount);
        cooldowns.put(trapdoorLoc, currentTime);
    }
}
