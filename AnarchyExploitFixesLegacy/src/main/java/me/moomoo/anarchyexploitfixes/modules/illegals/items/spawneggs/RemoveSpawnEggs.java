package me.moomoo.anarchyexploitfixes.modules.illegals.items.spawneggs;

import com.cryptomorin.xseries.XMaterial;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;
import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isSpawnEgg;

public class RemoveSpawnEggs implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean removeIllegalShulkers, preventHopperBypass;
    private final Material air;

    public RemoveSpawnEggs() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.preventHopperBypass = config.getBoolean("illegals.spawn-eggs.remove-spawn-eggs.prevent-hopper32k-mechanic", true,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n"+
                        "out of the hoppers inventory.\n"+
                        "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.removeIllegalShulkers = config.getBoolean("illegals.spawn-eggs.remove-spawn-eggs.delete-shulker-if-contains-spawn-egg", false);

        this.air = XMaterial.AIR.parseMaterial();
    }

    @Override
    public String name() {
        return "spawn-eggs.remove-spawn-eggs";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            plugin.getServer().getPluginManager().registerEvents(new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (isSpawnEgg(event.getItem())) {
                        event.setCancelled(true);
                    }
                }
            }, plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.spawn-eggs.remove-spawn-eggs.enable", false);
    }

    private void removeSpawnEggIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(air)) return;

        if (isSpawnEgg(item)) {
            item.subtract(item.getAmount());
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsSpawnEgg((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsSpawnEgg(ShulkerBox shulkerBox) {
        for (ItemStack shulkerContentItem : shulkerBox.getInventory()) {
            if (isSpawnEgg(shulkerContentItem)) return true;
        }
        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory())
            removeSpawnEggIfPresent(item);
        for (ItemStack item : player.getEnderChest())
            removeSpawnEggIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        removeSpawnEggIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        removeSpawnEggIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        removeSpawnEggIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (isShulkerBox(placedBlock.getType()) && shulkerContainsSpawnEgg((ShulkerBox) placedBlock.getState())) {
                placedBlock.setType(air);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        for (ItemStack item : event.getInventory())
            removeSpawnEggIfPresent(item);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
            removeSpawnEggIfPresent(event.getCursor());
            removeSpawnEggIfPresent(event.getCurrentItem());
            for (ItemStack item : event.getInventory())
                removeSpawnEggIfPresent(item);
            for (ItemStack item : event.getWhoClicked().getInventory())
                removeSpawnEggIfPresent(item);
        },1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        for (ItemStack item : event.getInventory())
            removeSpawnEggIfPresent(item);
    }
}