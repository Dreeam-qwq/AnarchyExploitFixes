package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTCompound;
import de.tr7zw.changeme.nbtapi.NBTCompoundList;
import de.tr7zw.changeme.nbtapi.NBTItem;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.stream.Collectors;

public class CustomNBTFilter implements IllegalItemModule {

    private final Set<String> illegalTags;
    private final Set<Material> whitelistedTypes;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, checkStored, preventHopperBypass, doSomething;

    public CustomNBTFilter() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                "Deletes items that have one or more of the configured tags.");
        this.doSomething = config.getBoolean(configPath() + ".delete-item", true);
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.illegalTags = new HashSet<>(config.getList(configPath() + ".tags", Collections.singletonList("dmg"),
                "The exact, case sensitive value of the nbt tag."));
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items", Collections.singletonList("GOLDEN_APPLE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false,
                "Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\n" +
                "out of the hoppers inventory.\n" +
                "WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.");
        this.doPeriodicCheck = config.getBoolean(configPath() + ".periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt(configPath() + ".periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String configPath() {
        return "illegals.nbt.ban-custom-tags";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        final Server server = plugin.getServer();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            server.getPluginManager().registerEvents(getHopperListener(), plugin);
        }

        if (doPeriodicCheck) {
            server.getScheduler().scheduleSyncRepeatingTask(plugin, () -> server.getOnlinePlayers().forEach(player ->
                    player.getInventory().forEach(item -> handleItem(item, legalityOf(item)))), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_NBT_CUSTOM;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType() == Material.AIR) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (legalityOf(new NBTItem(itemStack)) != ItemLegality.LEGAL) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    private ItemLegality legalityOf(NBTCompound compound) {
        if (compound == null) {
            return ItemLegality.LEGAL;
        }

        for (String key : compound.getKeys()) {
            if (illegalTags.contains(key)) {
                return ItemLegality.ILLEGAL;
            }

            if (legalityOf(compound.getCompound(key)) != ItemLegality.LEGAL) {
                return ItemLegality.ILLEGAL;
            }

            if (legalityOf(compound.getCompoundList(key)) != ItemLegality.LEGAL) {
                return ItemLegality.ILLEGAL;
            }
        }

        return ItemLegality.LEGAL;
    }

    private ItemLegality legalityOf(NBTCompoundList compoundList) {
        if (compoundList == null) {
            return ItemLegality.LEGAL;
        }

        for (int i = 0; i < compoundList.size(); i++) {
            if (legalityOf(compoundList.get(i)) != ItemLegality.LEGAL) {
                return ItemLegality.ILLEGAL;
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
