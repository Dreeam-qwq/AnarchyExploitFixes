package me.moomoo.anarchyexploitfixes.utils;

import org.bukkit.entity.*;
import org.bukkit.inventory.InventoryHolder;

import java.util.Arrays;
import java.util.EnumSet;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.stream.Collectors;

public class EntityUtil {

    public static final Set<EntityType> BOATS = Arrays.stream(EntityType.values())
            .filter(entityType -> entityType.name().toUpperCase().contains("BOAT"))
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    public static final Set<EntityType> MINECARTS = Arrays.stream(EntityType.values())
            .filter(entityType -> entityType.name().toUpperCase().contains("MINECART"))
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    public static final Set<EntityType> ITEM_FRAMES = Arrays.stream(EntityType.values())
            .filter(entityType -> entityType.name().toUpperCase().contains("ITEM_FRAME"))
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    private static final Set<EntityType> CACHED_INVENTORY_HOLDER_TYPES = new CopyOnWriteArraySet<>();
    private static final Set<EntityType> CACHED_NON_INVENTORY_HOLDER_TYPES = new CopyOnWriteArraySet<>();
    public static boolean isInventoryHolder(Entity entity) {
        if (entity == null) return false;

        if (CACHED_INVENTORY_HOLDER_TYPES.contains(entity.getType()))
            return true;
        if (CACHED_NON_INVENTORY_HOLDER_TYPES.contains(entity.getType()))
            return false;

        if (entity instanceof InventoryHolder) {
            CACHED_INVENTORY_HOLDER_TYPES.add(entity.getType());
            return true;
        } else {
            CACHED_NON_INVENTORY_HOLDER_TYPES.add(entity.getType());
            return false;
        }
    }

    private static final Set<EntityType> CACHED_CHESTABLE_TYPES = new CopyOnWriteArraySet<>();
    private static final Set<EntityType> CACHED_NON_CHESTABLE_TYPES = new CopyOnWriteArraySet<>();
    public static boolean isChestableHorse(Entity entity) {
        if (entity == null) return false;

        if (CACHED_CHESTABLE_TYPES.contains(entity.getType()))
            return true;
        if (CACHED_NON_CHESTABLE_TYPES.contains(entity.getType()))
            return false;

        if (entity instanceof ChestedHorse) {
            CACHED_CHESTABLE_TYPES.add(entity.getType());
            return true;
        } else {
            CACHED_NON_CHESTABLE_TYPES.add(entity.getType());
            return false;
        }
    }

    private static final Set<EntityType> CACHED_LIVING_TYPES = new CopyOnWriteArraySet<>();
    private static final Set<EntityType> CACHED_NON_LIVING_TYPES = new CopyOnWriteArraySet<>();
    public static boolean isLivingEntity(Entity entity) {
        if (entity == null) return false;

        if (CACHED_LIVING_TYPES.contains(entity.getType()))
            return true;
        if (CACHED_NON_LIVING_TYPES.contains(entity.getType()))
            return false;

        if (entity instanceof LivingEntity) {
            CACHED_LIVING_TYPES.add(entity.getType());
            return true;
        } else {
            CACHED_NON_LIVING_TYPES.add(entity.getType());
            return false;
        }
    }

    private static final Set<EntityType> CACHED_VEHICLE_TYPES = new CopyOnWriteArraySet<>();
    private static final Set<EntityType> CACHED_NON_VEHICLE_TYPES = new CopyOnWriteArraySet<>();
    public static boolean isVehicle(Entity entity) {
        if (entity == null) return false;

        if (CACHED_VEHICLE_TYPES.contains(entity.getType()))
            return true;
        if (CACHED_NON_VEHICLE_TYPES.contains(entity.getType()))
            return false;

        if (entity instanceof Vehicle) {
            CACHED_VEHICLE_TYPES.add(entity.getType());
            return true;
        } else {
            CACHED_NON_VEHICLE_TYPES.add(entity.getType());
            return false;
        }
    }

    private static final Set<EntityType> CACHED_PROJECTILE_TYPES = new CopyOnWriteArraySet<>();
    private static final Set<EntityType> CACHED_NON_PROJECTILE_TYPES = new CopyOnWriteArraySet<>();
    public static boolean isProjectile(Entity entity) {
        if (entity == null) return false;

        if (CACHED_PROJECTILE_TYPES.contains(entity.getType()))
            return true;
        if (CACHED_NON_PROJECTILE_TYPES.contains(entity.getType()))
            return false;

        if (entity instanceof Projectile) {
            CACHED_PROJECTILE_TYPES.add(entity.getType());
            return true;
        } else {
            CACHED_NON_PROJECTILE_TYPES.add(entity.getType());
            return false;
        }
    }
}
