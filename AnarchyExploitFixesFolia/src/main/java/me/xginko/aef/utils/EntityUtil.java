package me.xginko.aef.utils;

import org.bukkit.entity.*;
import org.bukkit.inventory.InventoryHolder;

import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class EntityUtil {

    public static final Set<EntityType> ITEM_FRAMES = Stream.of(
            EntityType.ITEM_FRAME,
            EntityType.GLOW_ITEM_FRAME)
            .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)));

    private static final Map<EntityType, Boolean> IS_INVHOLDER_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isInventoryHolder(Entity entity) {
        if (entity == null) return false;
        return IS_INVHOLDER_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof InventoryHolder);
    }

    private static final Map<EntityType, Boolean> IS_CHESTABLE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isChestableHorse(Entity entity) {
        if (entity == null) return false;
        return IS_CHESTABLE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof ChestedHorse);
    }

    private static final Map<EntityType, Boolean> IS_LIVING_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isLivingEntity(Entity entity) {
        if (entity == null) return false;
        return IS_LIVING_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof LivingEntity);
    }

    private static final Map<EntityType, Boolean> IS_VEHICLE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isVehicle(Entity entity) {
        if (entity == null) return false;
        return IS_VEHICLE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof Vehicle);
    }

    private static final Map<EntityType, Boolean> IS_PROJECTILE_CACHE = new EnumMap<>(EntityType.class);
    public static boolean isProjectile(Entity entity) {
        if (entity == null) return false;
        return IS_PROJECTILE_CACHE.computeIfAbsent(entity.getType(), entityType -> entity instanceof Projectile);
    }
}
