package me.xginko.aef.commands.aef.subcommands;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.commands.SubCommand;
import me.xginko.aef.enums.AEFPermission;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.jetbrains.annotations.NotNull;

import java.util.Collections;
import java.util.List;

public class LagSubCmd extends SubCommand {

    private final List<String> tabCompletes;

    public LagSubCmd() {
        this.tabCompletes = List.of("1000", "2500", "5000");
    }

    @Override
    public @NotNull String label() {
        return "lag";
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        return args.length == 2 && sender.hasPermission(AEFPermission.CMD_AEF_LAG.bukkit()) ? tabCompletes : Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (!sender.hasPermission(AEFPermission.CMD_AEF_LAG.bukkit())) {
            sender.sendMessage(AnarchyExploitFixes.getLang(sender).no_permission);
            return true;
        }

        if (args.length != 2) {
            return true;
        }

        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        if (sender instanceof Player player) {
            player.getScheduler().execute(plugin, () -> {
                try {
                    Thread.sleep(Long.parseLong(args[1]));
                } catch (InterruptedException e) {
                    sender.sendMessage(Component.text("Operation was interrupted! - " + e.getLocalizedMessage()).color(NamedTextColor.RED));
                    AnarchyExploitFixes.getPrefixedLogger().error("Lag command encountered an error!", e);
                }
            }, null, 1L);
        } else {
            plugin.getServer().getGlobalRegionScheduler().execute(plugin, () -> {
                try {
                    Thread.sleep(Long.parseLong(args[1]));
                } catch (InterruptedException e) {
                    sender.sendMessage(Component.text("Operation was interrupted! - " + e.getLocalizedMessage()).color(NamedTextColor.RED));
                    AnarchyExploitFixes.getPrefixedLogger().error("Lag command encountered an error!", e);
                }
            });
        }

        return true;
    }
}