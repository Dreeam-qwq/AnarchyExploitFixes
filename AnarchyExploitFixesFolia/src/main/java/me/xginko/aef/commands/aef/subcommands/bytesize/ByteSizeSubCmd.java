package me.xginko.aef.commands.aef.subcommands.bytesize;

import me.xginko.aef.commands.SubCommand;
import org.bukkit.command.CommandException;
import org.bukkit.command.CommandSender;
import org.jetbrains.annotations.NotNull;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public class ByteSizeSubCmd extends SubCommand {

    private final List<SubCommand> subCommands;
    private final List<String> tabCompletes;

    public ByteSizeSubCmd() {
        this.subCommands = Arrays.asList(new InventorySubCmd(), new ItemSubCmd());
        this.tabCompletes = subCommands.stream().map(SubCommand::label).collect(Collectors.toList());
    }

    @Override
    public @NotNull String label() {
        return "bytesize";
    }

    @Override
    public @NotNull List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args)
            throws CommandException, IllegalArgumentException
    {
        if (args.length == 2) {
            return tabCompletes;
        }

        if (args.length > 2) {
            for (SubCommand subCommand : subCommands) {
                if (args[1].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.tabComplete(sender, alias, args);
                }
            }
        }

        return Collections.emptyList();
    }

    @Override
    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
        if (args.length > 1) {
            for (SubCommand subCommand : subCommands) {
                if (args[1].equalsIgnoreCase(subCommand.label())) {
                    return subCommand.execute(sender, commandLabel, args);
                }
            }
        }

        return true;
    }
}