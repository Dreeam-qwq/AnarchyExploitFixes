package me.xginko.aef.commands;

import cloud.commandframework.annotations.Argument;
import cloud.commandframework.annotations.CommandDescription;
import cloud.commandframework.annotations.CommandMethod;
import cloud.commandframework.annotations.CommandPermission;
import io.papermc.paper.plugin.configuration.PluginMeta;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.event.ClickEvent;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;

import java.util.Arrays;
import java.util.Objects;

public class AEFCmd implements AEFCommand {

    private final AnarchyExploitFixes plugin;

    public AEFCmd() {
        this.plugin = AnarchyExploitFixes.getInstance();
    }

    @Override
    public boolean shouldRegister() {
        return true;
    }

    @SuppressWarnings("UnstableApiUsage")
    @CommandMethod("aef version")
    @CommandDescription("Get the plugin version.")
    @CommandPermission("aef.cmd.version")
    public void versionCommand(
            final CommandSender sender
    ) {
        PluginMeta pluginMeta = plugin.getPluginMeta();
        sender.sendMessage(
                Component.newline()
                        .append(Component.text(pluginMeta.getName()+" "+pluginMeta.getVersion()).color(NamedTextColor.GOLD)
                                .append(Component.text(" by ").color(NamedTextColor.GRAY))
                                .append(Component.text(pluginMeta.getAuthors().get(0)+" & "+pluginMeta.getAuthors().get(1)).color(NamedTextColor.DARK_AQUA))
                                .clickEvent(ClickEvent.openUrl(pluginMeta.getWebsite())))
                        .append(Component.newline())
        );
    }

    @CommandMethod("aef disable")
    @CommandDescription("Disable all plugin features.")
    @CommandPermission("aef.cmd.disable")
    public void disableCommand(
            final CommandSender sender
    ) {
        sender.sendMessage(Component.text("Disabling plugin.").color(NamedTextColor.RED));
        AEFModule.enabledModules.forEach(AEFModule::disable);
        sender.sendMessage(Component.text("All enabled plugin features have been disabled.").color(NamedTextColor.GREEN));
        sender.sendMessage(Component.text("Use /aef reload to enable the plugin again. " +
                "You can also use third party options like plugman or serverutils.").color(NamedTextColor.WHITE));
    }

    @CommandMethod("aef reload")
    @CommandDescription("Reload the plugin configuration.")
    @CommandPermission("aef.cmd.reload")
    public void reloadCommand(
            final CommandSender sender
    ) {
        sender.sendMessage(Component.text("Reloading AnarchyExploitFixes...").color(NamedTextColor.WHITE));
        plugin.reloadPlugin();
        sender.sendMessage(Component.text("Reload complete.").color(NamedTextColor.GREEN));
    }

    @CommandMethod("aef lag <milliseconds>")
    @CommandDescription("Artificially lag the server for testing.")
    @CommandPermission("aef.cmd.lag")
    public void lagCommand(
            final CommandSender sender,
            final @Argument(value = "milliseconds", description = "Lag duration in milliseconds") long millis
    ) {
        plugin.getServer().getGlobalRegionScheduler().execute(plugin, () -> {
            try {
                Thread.sleep(millis);
            } catch (InterruptedException e) {
                sender.sendMessage(Component.text("Operation was interrupted! - " + e.getLocalizedMessage()).color(NamedTextColor.RED));
                AnarchyExploitFixes.getPrefixedLogger().error("Lag command encountered an error!", e);
            }
        });
    }

    @CommandMethod("aef elytra")
    @CommandDescription("Show how many players are currently flying with an elytra.")
    @CommandPermission("aef.cmd.elytra")
    public void elytraCommand(
            final CommandSender sender
    ) {
        StringBuilder flying = new StringBuilder();
        StringBuilder notFlying = new StringBuilder();
        int glidingPlayerCount = 0;
        int nonGlidingPlayerCount = 0;

        for (Player player : plugin.getServer().getOnlinePlayers()) {
            if (player.isGliding()) {
                flying.append(player.getName()).append(", ");
                glidingPlayerCount++;
            } else {
                notFlying.append(player.getName()).append(", ");
                nonGlidingPlayerCount++;
            }
        }

        sender.sendMessage(Component.newline());
        sender.sendMessage(
                Component.text("Elytra flying: ").color(NamedTextColor.WHITE)
                        .append(Component.text(flying.toString()).color(NamedTextColor.GOLD))
                        .append(Component.text(" (" + glidingPlayerCount + ")").color(NamedTextColor.WHITE))
        );
        sender.sendMessage(
                Component.text("Not elytra flying: ").color(NamedTextColor.WHITE)
                        .append(Component.text(notFlying.toString()).color(NamedTextColor.GOLD))
                        .append(Component.text(" (" + nonGlidingPlayerCount + ")").color(NamedTextColor.WHITE))
        );
        sender.sendMessage(
                Component.text("Total players: ").color(NamedTextColor.WHITE)
                        .append(Component.text(String.valueOf(glidingPlayerCount + nonGlidingPlayerCount)).color(NamedTextColor.GOLD))
        );
        sender.sendMessage(Component.newline());
    }

    @CommandMethod("aef geared")
    @CommandDescription("Show how many players are currently wearing at least one armor piece.")
    @CommandPermission("aef.cmd.geared")
    public void gearedCommand(
            final CommandSender sender
    ) {
        StringBuilder geared = new StringBuilder();
        StringBuilder ungeared = new StringBuilder();
        int gearedPlayerCount = 0;
        int ungearedPlayerCount = 0;

        for (Player player : plugin.getServer().getOnlinePlayers()) {
            if (Arrays.stream(player.getInventory().getArmorContents()).anyMatch(Objects::nonNull)) {
                geared.append(player.getName()).append(", ");
                gearedPlayerCount++;
            } else {
                ungeared.append(player.getName()).append(", ");
                ungearedPlayerCount++;
            }
        }

        sender.sendMessage(Component.newline());
        sender.sendMessage(
                Component.text("Geared players: ").color(NamedTextColor.WHITE)
                        .append(Component.text(geared.toString()).color(NamedTextColor.GOLD))
                        .append(Component.text(" (" + gearedPlayerCount + ")").color(NamedTextColor.WHITE))
        );
        sender.sendMessage(
                Component.text("Ungeared players: ").color(NamedTextColor.WHITE)
                        .append(Component.text(ungeared.toString()).color(NamedTextColor.GOLD))
                        .append(Component.text(" (" + ungearedPlayerCount + ")").color(NamedTextColor.WHITE))
        );
        sender.sendMessage(
                Component.text("Total players: ").color(NamedTextColor.WHITE)
                        .append(Component.text(String.valueOf(ungearedPlayerCount + gearedPlayerCount)).color(NamedTextColor.GOLD))
        );
        sender.sendMessage(Component.newline());
    }
}