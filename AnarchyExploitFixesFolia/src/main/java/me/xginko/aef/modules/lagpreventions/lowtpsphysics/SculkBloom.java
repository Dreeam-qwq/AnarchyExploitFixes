package me.xginko.aef.modules.lagpreventions.lowtpsphysics;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.SculkBloomEvent;

public class SculkBloom implements AEFModule, Listener {

    private final double disableSculkTPS;
    private final boolean logIsEnabled;

    public SculkBloom() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        this.disableSculkTPS = config.getDouble(configPath() + ".disable-TPS", 14.0);
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
    }

    @Override
    public String configPath() {
        return "lag-preventions.disable-physics-during-low-tps.sculk-bloom";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.LOWEST)
    private void onSkulkBloom(SculkBloomEvent event) {
        if (AnarchyExploitFixes.getTickData().getTPS() <= disableSculkTPS) {
            event.setCancelled(true);
            if (logIsEnabled) info("Stopped sculk bloom because tps is lower than " + disableSculkTPS);
        }
    }
}
