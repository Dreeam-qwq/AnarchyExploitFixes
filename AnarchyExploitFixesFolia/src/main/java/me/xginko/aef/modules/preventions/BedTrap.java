package me.xginko.aef.modules.preventions;

import com.destroystokyo.paper.event.player.PlayerPostRespawnEvent;
import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;

import java.time.Duration;
import java.util.UUID;

public class BedTrap extends AEFModule implements Listener {

    private final Cache<UUID, Integer> playerDeathNearBedCount;
    private final int maxDeathsPerTime;
    private final boolean shouldLog;

    public BedTrap() {
        super("preventions.anti-bed-trap");
        config.addComment(configPath + ".enable",
                "Resets Bed Respawn when a player dies too many times within a certain timeframe.");
        this.maxDeathsPerTime = config.getInt(configPath + ".max-deaths-per-time", 7,
                "Amount of times player can die until he is determined as bed-trapped.");
        this.playerDeathNearBedCount = Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(
                Math.max(1, config.getInt(configPath + ".time-in-seconds", 5,
                        "Time until death counter will be reset again")))).build();
        this.shouldLog = AnarchyExploitFixes.config().getBoolean(configPath+".show-logs", false);
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @SuppressWarnings("deprecation")
    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onRespawn(PlayerPostRespawnEvent event) {
        final Player player = event.getPlayer();
        if (!event.isBedSpawn()) return;

        int nearBedDeaths = playerDeathNearBedCount.get(player.getUniqueId(), k -> 0);
        nearBedDeaths++;

        if (nearBedDeaths > maxDeathsPerTime) {
            player.getScheduler().execute(plugin, () -> {
                try {
                    player.setRespawnLocation(null, true);
                } catch (NoSuchMethodError e) {
                    player.setBedSpawnLocation(null, true);
                }
                if (shouldLog) info("Reset bed respawn of potentially bed-trapped player '" + player.getName() + "'");
            }, null, 1L);
            return;
        }

        playerDeathNearBedCount.put(player.getUniqueId(), nearBedDeaths);
    }
}