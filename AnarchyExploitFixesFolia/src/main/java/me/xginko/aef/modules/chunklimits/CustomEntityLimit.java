package me.xginko.aef.modules.chunklimits;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;
import org.bukkit.event.world.ChunkUnloadEvent;

import java.util.EnumMap;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.function.Consumer;

public class CustomEntityLimit extends AEFModule implements Consumer<ScheduledTask>, Listener {

    private ScheduledTask scheduledTask;
    private final Map<EntityType, Integer> entityLimits = new EnumMap<>(EntityType.class);
    private final long checkPeriod, minChunkAge;
    private final boolean logIsEnabled, enableChunkAgeSkip, forceLoadEntities;

    public CustomEntityLimit() {
        super("chunk-limits.entity-limits.custom-limit");
        config.addComment(configPath + ".enable", """
                Limit specific entity types per chunk.""");
        this.logIsEnabled = config.getBoolean(configPath + ".log-removals", true);
        this.checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 1200, """
                Check all loaded chunks every x ticks.""");
        this.enableChunkAgeSkip = config.getBoolean(configPath + ".chunk-age-skip.enable", true);
        this.minChunkAge = config.getInt(configPath + ".chunk-age-skip.min-age-in-ticks", 800, """
                How long a chunk has to have been inhabited for it to be checked.\s
                1 second = 20 ticks.""");
        this.forceLoadEntities = config.getBoolean(configPath + ".forceload-entities", false, """
                When a chunk is loaded, entities inside of it are not necessarily\s
                loaded as well. Force loading is worse for performance, but there\s
                might be a scenario where this turns out to be useful.""");

        Map<String, Object> defaults = new TreeMap<>();
        defaults.put("ARROW", 20);
        defaults.put("FIREBALL", 5);
        defaults.put("SMALL_FIREBALL", 5);
        defaults.put("SNOWBALL", 5);
        defaults.put("WITHER", 16);
        defaults.put("WITHER_SKULL", 10);
        defaults.put("BLAZE", 10);
        defaults.put("CREEPER", 10);
        defaults.put("ENDERMAN", 10);
        defaults.put("MAGMA_CUBE", 10);
        defaults.put("PHANTOM", 10);
        defaults.put("SLIME", 10);
        defaults.put("SKELETON", 10);
        defaults.put("STRAY", 10);
        defaults.put("WITHER_SKELETON", 10);
        defaults.put("SPIDER", 10);
        defaults.put("CAVE_SPIDER", 10);
        defaults.put("ZOMBIE", 10);
        defaults.put("DROWNED", 10);
        defaults.put("HUSK", 10);
        defaults.put("PIGLIN_BRUTE", 10);
        defaults.put("ZOMBIFIED_PIGLIN", 10);
        defaults.put("HOGLIN", 10);
        defaults.put("ZOGLIN", 10);
        defaults.put("CHICKEN", 10);
        defaults.put("PIG", 10);
        defaults.put("SHEEP", 10);
        defaults.put("COW", 10);
        defaults.put("MUSHROOM_COW", 10);
        defaults.put("WOLF", 10);
        defaults.put("DONKEY", 10);
        defaults.put("HORSE", 10);
        defaults.put("MULE", 10);
        defaults.put("SKELETON_HORSE", 10);
        defaults.put("ZOMBIE_HORSE", 10);
        defaults.put("GOAT", 10);
        defaults.put("LLAMA", 10);
        defaults.put("TRADER_LLAMA", 10);
        defaults.put("BAT", 3);
        defaults.put("CAT", 10);
        defaults.put("OCELOT", 3);
        defaults.put("DOLPHIN", 4);
        defaults.put("ENDERMITE", 3);
        defaults.put("FOX", 10);
        defaults.put("PANDA", 5);
        defaults.put("PARROT", 10);
        defaults.put("POLAR_BEAR", 5);
        defaults.put("RABBIT", 5);
        defaults.put("SILVERFISH", 3);
        defaults.put("STRIDER", 3);
        defaults.put("EVOKER", 15);
        defaults.put("VEX", 15);
        defaults.put("PILLAGER", 15);
        defaults.put("VINDICATOR", 15);
        defaults.put("WITCH", 15);
        defaults.put("RAVAGER", 15);
        defaults.put("AXOLOTL", 10);
        defaults.put("COD", 6);
        defaults.put("SALMON", 6);
        defaults.put("TROPICAL_FISH", 6);
        defaults.put("PUFFERFISH", 3);
        defaults.put("SQUID", 20);
        defaults.put("GLOW_SQUID", 20);
        defaults.put("FROG", 20);
        defaults.put("TADPOLE", 20);
        defaults.put("ALLAY", 20);
        defaults.put("BEE", 15);
        defaults.put("TURTLE", 20);
        defaults.put("GUARDIAN", 20);
        defaults.put("PIGLIN", 25);
        defaults.put("IRON_GOLEM", 15);
        defaults.put("ZOMBIE_VILLAGER", 25);
        defaults.put("WANDERING_TRADER", 10);

        ConfigSection section = config.getConfigSection(configPath + ".limited-types", defaults, """
                Check the paper api for correct EntityType enums:\s
                https://jd.papermc.io/paper/1.20.6/org/bukkit/entity/EntityType.html\s
                Make sure your minecraft version is matching as well.""");
        for (String configuredEntity : section.getKeys(false)) {
            try {
                Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredEntity));
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } catch (NumberFormatException e) {
                notRecognized(Integer.class, configuredEntity);
            } catch (IllegalArgumentException e) {
                notRecognized(Material.class, configuredEntity);
            }
        }
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false) && !entityLimits.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkUnload(ChunkUnloadEvent event) {
        for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
            final int maxAllowedPerChunk = limit.getValue();

            AtomicInteger count = new AtomicInteger();

            for (Entity entity : event.getChunk().getEntities()) {
                entity.getScheduler().execute(plugin, () -> {
                    if (entity.getType() != limit.getKey()) return;
                    if (count.incrementAndGet() <= maxAllowedPerChunk) return;

                    entity.remove();
                    if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                            LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxAllowedPerChunk);
                }, null, 1L);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        final EntityType spawnedType = event.getEntityType();
        if (!entityLimits.containsKey(spawnedType)) return;

        final int maxAllowedPerChunk = entityLimits.get(spawnedType);
        int entityCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType() != spawnedType) continue;

            entityCount++;
            if (entityCount <= maxAllowedPerChunk) continue;

            entity.remove();
            if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxAllowedPerChunk);
        }
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!forceLoadEntities && !chunk.isEntitiesLoaded()) return;
                    if (enableChunkAgeSkip && chunk.getInhabitedTime() < minChunkAge) return;

                    Entity[] chunkEntities = chunk.getEntities();

                    for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {
                        final int maxAllowedPerChunk = limit.getValue();
                        AtomicInteger count = new AtomicInteger();
                        for (Entity entity : chunkEntities) {
                            entity.getScheduler().execute(plugin, () -> {
                                if (entity.getType() != limit.getKey()) return;
                                if (count.incrementAndGet() <= maxAllowedPerChunk) return;

                                entity.remove();
                                if (logIsEnabled) info("Removed entity " + entity.getType() + " at " +
                                        LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxAllowedPerChunk);
                            }, null, 1L);
                        }
                    }
                });
            }
        }
    }
}