package me.xginko.aef.modules.illegals.items.enchantments;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class IncompatibleEnchants implements IllegalItemModule {

    private final Set<Material> whitelistedTypes;
    private Listener hopperListener;
    private final boolean useWhitelist, blacklistMode, preventHopperBypass, checkStored, doSomething;

    private static final Enchantment[] DAMAGE_ENCHANTS = {
            Enchantment.DAMAGE_ALL,
            Enchantment.DAMAGE_UNDEAD,
            Enchantment.DAMAGE_ARTHROPODS };
    private static final Enchantment[] PROTECT_ENCHANTS = {
            Enchantment.PROTECTION_ENVIRONMENTAL,
            Enchantment.PROTECTION_EXPLOSIONS,
            Enchantment.PROTECTION_FIRE,
            Enchantment.PROTECTION_PROJECTILE };

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Reverts or prevents usage of ItemStacks with Enchantments that cannot coexist\n" +
                        "in vanilla survival minecraft.\n" +
                        "Examples: A bow with mending and infinity or armor with all protection enchantments.");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.doSomething = config.getBoolean(configPath() + ".delete-or-revert-item", false,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items", List.of("BOW"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
    }

    @Override
    public String configPath() {
        return "illegals.enchantments.incompatible-enchants";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            this.hopperListener = getHopperListener();
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_INCOMPATIBLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();
            if (!enchantments.isEmpty()) {
                if (enchantments.contains(Enchantment.BINDING_CURSE) && enchantments.contains(Enchantment.VANISHING_CURSE))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.MULTISHOT) && enchantments.contains(Enchantment.PIERCING))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.RIPTIDE) && (enchantments.contains(Enchantment.LOYALTY) || enchantments.contains(Enchantment.CHANNELING)))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.ARROW_INFINITE) && enchantments.contains(Enchantment.MENDING))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.SILK_TOUCH) && enchantments.contains(Enchantment.LOOT_BONUS_BLOCKS))
                    return ItemLegality.ILLEGAL;
                if (enchantments.contains(Enchantment.DEPTH_STRIDER) && enchantments.contains(Enchantment.FROST_WALKER))
                    return ItemLegality.ILLEGAL;

                int dmgEnchCount = 0;
                for (Enchantment damageEnchant : DAMAGE_ENCHANTS) {
                    if (enchantments.contains(damageEnchant)) {
                        dmgEnchCount++;
                        if (dmgEnchCount > 1) {
                            return ItemLegality.ILLEGAL;
                        }
                    }
                }

                int protEnchCount = 0;
                for (Enchantment protectEnchant : PROTECT_ENCHANTS) {
                    if (enchantments.contains(protectEnchant)) {
                        protEnchCount++;
                        if (protEnchCount > 1) {
                            return ItemLegality.ILLEGAL;
                        }
                    }
                }
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        switch (legality) {
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
            case ILLEGAL -> {
                final Set<Enchantment> enchantments = itemStack.getEnchantments().keySet();

                if (enchantments.contains(Enchantment.BINDING_CURSE) && enchantments.contains(Enchantment.VANISHING_CURSE))
                    itemStack.removeEnchantment(Enchantment.BINDING_CURSE);
                if (enchantments.contains(Enchantment.MULTISHOT) && enchantments.contains(Enchantment.PIERCING))
                    itemStack.removeEnchantment(Enchantment.MULTISHOT);
                if (enchantments.contains(Enchantment.RIPTIDE) && (enchantments.contains(Enchantment.LOYALTY) || enchantments.contains(Enchantment.CHANNELING)))
                    itemStack.removeEnchantment(Enchantment.RIPTIDE);
                if (enchantments.contains(Enchantment.MENDING) && enchantments.contains(Enchantment.ARROW_INFINITE))
                    itemStack.removeEnchantment(Enchantment.ARROW_INFINITE);
                if (enchantments.contains(Enchantment.SILK_TOUCH) && enchantments.contains(Enchantment.LOOT_BONUS_BLOCKS))
                    itemStack.removeEnchantment(Enchantment.LOOT_BONUS_BLOCKS);
                if (enchantments.contains(Enchantment.DEPTH_STRIDER) && enchantments.contains(Enchantment.FROST_WALKER))
                    itemStack.removeEnchantment(Enchantment.FROST_WALKER);

                if (enchantments.contains(Enchantment.DAMAGE_ALL)) { // Prefer keeping Sharpness enchantment if present
                    for (Enchantment dmgEnchant : DAMAGE_ENCHANTS) {
                        if (dmgEnchant != Enchantment.DAMAGE_ALL) {
                            itemStack.removeEnchantment(dmgEnchant);
                        }
                    }
                } else if (enchantments.contains(Enchantment.DAMAGE_ARTHROPODS) && enchantments.contains(Enchantment.DAMAGE_UNDEAD)) {
                    itemStack.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
                }

                if (enchantments.contains(Enchantment.PROTECTION_ENVIRONMENTAL)) { // Prefer keeping Protection enchantment if present
                    for (Enchantment protEnchant : PROTECT_ENCHANTS) {
                        if (protEnchant != Enchantment.PROTECTION_ENVIRONMENTAL) {
                            itemStack.removeEnchantment(protEnchant);
                        }
                    }
                } else if (enchantments.contains(Enchantment.PROTECTION_EXPLOSIONS)) { // If protection is present, prefer blast protection
                    for (Enchantment protEnchant : PROTECT_ENCHANTS) {
                        if (protEnchant != Enchantment.PROTECTION_EXPLOSIONS) {
                            itemStack.removeEnchantment(protEnchant);
                        }
                    }
                } else if (enchantments.contains(Enchantment.PROTECTION_PROJECTILE) && enchantments.contains(Enchantment.PROTECTION_FIRE)) {
                    itemStack.removeEnchantment(Enchantment.PROTECTION_FIRE); // If protection and blast protection is not present, prefer projectile protection
                }
            }
        }
    }
}
