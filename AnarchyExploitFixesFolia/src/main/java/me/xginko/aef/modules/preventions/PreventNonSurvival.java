package me.xginko.aef.modules.preventions;

import io.papermc.paper.event.player.AsyncChatEvent;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.GameMode;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryEvent;
import org.bukkit.event.player.PlayerCommandPreprocessEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerMoveEvent;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class PreventNonSurvival implements AEFModule, Listener {

    private final Set<String> allowedGamemodePlayers;
    private final boolean logIsEnabled;
    
    public PreventNonSurvival() {
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Checks if player is in survival and puts him back into survival if not, Useful if you had a backdoor incident.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", true);
        this.allowedGamemodePlayers = new HashSet<>(config.getList(configPath() + ".whitelisted-players", List.of("Notch")));
    }

    @Override
    public String configPath() {
        return "preventions.prevent-non-survival-players";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void checkForIllegalGamemode(HumanEntity player) {
        if (allowedGamemodePlayers.contains(player.getName())) return;

        if (player.getGameMode() != GameMode.SURVIVAL) {
            player.setGameMode(GameMode.SURVIVAL);
            if (logIsEnabled) warn("Changed gamemode of '"+player.getName()+"' back to survival.");
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onInventory(InventoryEvent event) {
        checkForIllegalGamemode(event.getView().getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onJoin(PlayerJoinEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onMove(PlayerMoveEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onChat(AsyncChatEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onCommand(PlayerCommandPreprocessEvent event) {
        checkForIllegalGamemode(event.getPlayer());
    }
}
