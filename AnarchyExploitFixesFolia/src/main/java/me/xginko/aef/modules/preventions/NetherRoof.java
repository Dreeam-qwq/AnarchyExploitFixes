package me.xginko.aef.modules.preventions;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.utils.CachingPermTool;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;
import org.bukkit.event.vehicle.VehicleMoveEvent;

public class NetherRoof implements AEFModule, Listener {

    private static final BlockFace[] CARDINAL_FACES = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };
    private final AnarchyExploitFixes plugin;
    private final boolean safe_teleport_enabled;

    public NetherRoof() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable", "Prevent players from going above the nether roof.");
        this.safe_teleport_enabled = config.getBoolean(configPath() + ".safely-teleport-players", true);
    }

    @Override
    public String configPath() {
        return "preventions.prevent-nether-roof";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        if (
                LocationUtil.isNetherCeiling(event.getTo())
                && !CachingPermTool.hasPermission(AEFPermission.BYPASS_NETHER_ROOF, event.getPlayer())
        ) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        final Player player = event.getPlayer();
        if (
                LocationUtil.isNetherCeiling(player.getLocation())
                && !CachingPermTool.hasPermission(AEFPermission.BYPASS_NETHER_ROOF, player)
        ) {
            Location belowCeiling = getBelowCeilLocation(player.getLocation());
            event.setTo(belowCeiling);
            createSafespace(belowCeiling);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onVehicleMove(VehicleMoveEvent event) {
        final Vehicle vehicle = event.getVehicle();
        if (!LocationUtil.isNetherCeiling(vehicle.getLocation())) return;

        for (Entity passenger : vehicle.getPassengers()) {
            if (passenger.getType() == EntityType.PLAYER
                    && CachingPermTool.hasPermission(AEFPermission.BYPASS_NETHER_ROOF, (Player) passenger)) return;
        }

        for (Entity passenger : vehicle.getPassengers()) {
            if (passenger.getType() == EntityType.PLAYER) {
                teleportFromCeiling((Player) passenger);
            } else {
                passenger.leaveVehicle();
                passenger.remove();
            }
        }

        vehicle.remove();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        final Player player = event.getPlayer();
        if (CachingPermTool.hasPermission(AEFPermission.BYPASS_NETHER_ROOF, player)) return;

        if (LocationUtil.isNetherCeiling(event.getBlock().getLocation())) {
            event.setCancelled(true);
        }

        if (LocationUtil.isNetherCeiling(player.getLocation())) {
            teleportFromCeiling(player);
        }
    }

    private static Location getBelowCeilLocation(Location location) {
        Location belowRoofCentered = location.toBlockLocation().add(0.5, 0, 0.5);
        belowRoofCentered.setY(AnarchyExploitFixes.getConfiguration().nether_ceiling_max_y - 7);
        return belowRoofCentered;
    }

    private void teleportFromCeiling(Player player) {
        player.leaveVehicle();
        player.setGliding(false);
        Location belowCeiling = getBelowCeilLocation(player.getLocation());
        player.teleportAsync(belowCeiling).thenAccept(tpSuccess -> {
            if (safe_teleport_enabled && tpSuccess)
                createSafespace(belowCeiling);
        });
    }

    private void createSafespace(Location location) {
        plugin.getServer().getRegionScheduler().execute(plugin, location, () -> {
            // Check block above for liquid or falling block
            Block blockAboveHead = location.clone().add(0, 2, 0).getBlock();
            if (isUnsafe(blockAboveHead) && !blockAboveHead.getType().equals(Material.NETHER_PORTAL))
                blockAboveHead.setType(Material.NETHERRACK, false);

            // Create an air pocket for the player
            Block blockAtPlayerLegs = location.getBlock();
            if (!blockAtPlayerLegs.getType().equals(Material.AIR) && !blockAtPlayerLegs.getType().equals(Material.NETHER_PORTAL))
                blockAtPlayerLegs.setType(Material.AIR, false);
            Block blockAtPlayerTorso = blockAtPlayerLegs.getRelative(BlockFace.UP);
            if (!blockAtPlayerTorso.getType().equals(Material.AIR) && !blockAtPlayerTorso.getType().equals(Material.NETHER_PORTAL))
                blockAtPlayerTorso.setType(Material.AIR, false);

            // Check all sides of air pocket for liquids and fill with netherrack
            for (int i = 0; i < 2; i++) {
                Block airPocketBlock = blockAtPlayerLegs.getRelative(BlockFace.UP, i);
                for (BlockFace face : CARDINAL_FACES) {
                    Block around = airPocketBlock.getRelative(face);
                    if (isUnsafe(around)) around.setType(Material.NETHERRACK, false);
                }
            }

            // Create block below feet if not solid
            Block blockBelowFeet = blockAtPlayerLegs.getRelative(BlockFace.DOWN);
            if (isUnsafe(blockBelowFeet) || blockBelowFeet.getType().equals(Material.NETHER_PORTAL))
                blockBelowFeet.setType(Material.NETHERRACK, true);
        });
    }

    private static boolean isUnsafe(Block block) {
        return block.isLiquid() || block.getType().hasGravity() || !block.getType().isSolid();
    }
}
