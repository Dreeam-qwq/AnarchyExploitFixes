package me.xginko.aef.modules.illegals.items;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.Damageable;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class Unbreakables extends IllegalItemModule {

    private Listener hopperListener;
    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, checkStored, preventHopperBypass;

    public Unbreakables() {
        super("illegals.revert-unbreakables");
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Deletes and prevents usage of unbreakable items.\n" +
                        "This can be anything from items with illegal damage attributes to\n" +
                        "Metadata/NBT tags.\n" +
                        "Note: Due to the limitations of the API, we can only fully prevent\n" +
                        "usage of these items by deleting them.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", false);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false,
                "Will delete shulkers and bundles if they contain unbreakables.");
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items", List.of("DIAMOND_CHESTPLATE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath + ".prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals\s
                on top of a hopper, then using the illegal out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource\s
                intense as the event fires for every single item getting moved by the\s
                hopper. Enable only if you need to.""");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            this.hopperListener = getHopperListener();
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_UNBREAKABLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            if (isUnbreakable(itemStack)) {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }

    private boolean isUnbreakable(ItemStack itemStack) {
        if (!itemStack.hasItemMeta()) return false;

        ItemMeta meta = itemStack.getItemMeta();
        if (meta.isUnbreakable()) return true;

        Damageable damageMeta = (Damageable) meta;
        if (!damageMeta.hasDamage()) return false;

        final short itemMaxDurability = itemStack.getType().getMaxDurability();
        if (itemMaxDurability == 0) return false;

        final int remainingDurability = itemMaxDurability - damageMeta.getDamage();
        return remainingDurability > itemMaxDurability || remainingDurability < 0;
    }
}
