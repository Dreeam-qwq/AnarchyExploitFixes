package me.xginko.aef.modules.preventions.portals;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.entity.EntityPortalEvent;

public class PreventProjectilesInPortals implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;

    public PreventProjectilesInPortals() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AnarchyExploitFixes.config().addComment(configPath(),
                "Prevents a lag exploit. Might disable some chunk loader designs.");
    }

    @Override
    public String configPath() {
        return "preventions.portals.prevent-projectiles-in-portals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath(), false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(EntityPortalEvent event) { // Does not fire on folia due to broken API
        if (EntityUtil.isProjectile(event.getEntity())) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!AnarchyExploitFixes.isServerFolia()) return; // Avoid fallback logic on non-folia

        if (EntityUtil.isProjectile(event.getEntity())) {
            event.getEntity().getScheduler().run(plugin, kill -> event.getEntity().remove(), null);
        }
    }
}
