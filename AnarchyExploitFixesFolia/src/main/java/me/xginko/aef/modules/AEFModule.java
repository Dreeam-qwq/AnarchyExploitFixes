package me.xginko.aef.modules;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.packets.AEFPacketModule;
import me.xginko.aef.utils.models.Disableable;
import me.xginko.aef.utils.models.Enableable;
import org.reflections.Reflections;
import org.reflections.scanners.Scanners;

import java.lang.reflect.Modifier;
import java.util.HashSet;
import java.util.Set;

public abstract class AEFModule implements Enableable, Disableable {

    protected final AnarchyExploitFixes plugin;
    protected final Config config;
    public final String configPath, logFormat;

    public AEFModule(String configPath) {
        this.plugin = AnarchyExploitFixes.getInstance();
        this.config = AnarchyExploitFixes.config();
        this.configPath = configPath;
        String[] paths = configPath.split("\\.");
        if (paths.length <= 2) this.logFormat = "<"+configPath+"> {}";
        else this.logFormat = "<"+paths[paths.length - 2] + "." + paths[paths.length - 1]+"> {}";
        shouldEnable(); // Ensure enable option is always first
    }

    public abstract boolean shouldEnable();

    public static final Set<AEFModule> ENABLED_MODULES = new HashSet<>();
    private static final Reflections MODULES_PACKAGE = new Reflections(AEFModule.class.getPackage().getName());

    public static void reloadModules() {
        ENABLED_MODULES.forEach(AEFModule::disable);
        ENABLED_MODULES.clear();

        for (Class<?> clazz : MODULES_PACKAGE.get(Scanners.SubTypes.of(AEFModule.class).asClass())) {
            if (clazz.isInterface() || Modifier.isAbstract(clazz.getModifiers())) continue;

            try {
                AEFModule module = (AEFModule) clazz.getDeclaredConstructor().newInstance();
                if (module.shouldEnable()) {
                    if (module instanceof AEFPacketModule && AnarchyExploitFixes.config().packets_disabled) {
                        module.warn("Cannot enable because you disabled packets in config!");
                        continue;
                    }

                    module.enable();
                    ENABLED_MODULES.add(module);
                }
            } catch (Throwable t) {
                AnarchyExploitFixes.getPrefixedLogger().error("Failed to load module {}", clazz.getSimpleName(), t);
            }
        }
    }

    protected void error(String message, Throwable throwable) {
        AnarchyExploitFixes.getPrefixedLogger().error(logFormat, message, throwable);
    }

    protected void error(String message) {
        AnarchyExploitFixes.getPrefixedLogger().error(logFormat, message);
    }

    protected void warn(String message) {
        AnarchyExploitFixes.getPrefixedLogger().warn(logFormat, message);
    }

    protected void info(String message) {
        AnarchyExploitFixes.getPrefixedLogger().info(logFormat, message);
    }

    protected void notRecognized(Class<?> clazz, String unrecognized) {
        warn("Unable to parse " + clazz.getSimpleName() + " at '" + unrecognized + "'. Please check your configuration.");
    }
}
