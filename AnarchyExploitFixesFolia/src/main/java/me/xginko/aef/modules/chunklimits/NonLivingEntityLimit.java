package me.xginko.aef.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.concurrent.atomic.AtomicInteger;

public class NonLivingEntityLimit implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxNonLivingEntities;
    private final boolean logIsEnabled;

    public NonLivingEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Limit the amount of non living entities in a chunk to prevent lag (does not affect items).");
        this.logIsEnabled = config.getBoolean(configPath() + ".log-removals", true);
        this.maxNonLivingEntities = config.getInt(configPath() + ".max-non-living-per-chunk", 100);
        this.checkPeriod = config.getInt(configPath() + ".check-period-in-ticks", 20,
                "20 ticks = 1 second");
    }

    @Override
    public String configPath() {
        return "chunk-limits.entity-limits.non-living-limit";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (event.getEntityType().equals(EntityType.DROPPED_ITEM) || EntityUtil.isLivingEntity(event.getEntity())) return;

        int nonLivingCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType().equals(EntityType.DROPPED_ITEM)) continue;
            if (EntityUtil.isLivingEntity(entity)) continue;

            nonLivingCount++;
            if (nonLivingCount <= maxNonLivingEntities) continue;

            event.setCancelled(true);

            entity.getScheduler().run(plugin, kill -> {
                entity.remove();
                if (logIsEnabled) info("Removed non-living entity " + entity.getType() + " at " +
                        LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxNonLivingEntities);
            }, null);
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), checkChunk -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger nonLivingCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().run(plugin, checkEntity -> {
                            if (entity.getType().equals(EntityType.DROPPED_ITEM)) return;
                            if (EntityUtil.isLivingEntity(entity)) return;
                            if (nonLivingCount.incrementAndGet() <= maxNonLivingEntities) return;

                            entity.remove();
                            if (logIsEnabled) info("Removed non-living entity " + entity.getType() + " at " +
                                    LocationUtil.toString(entity.getLocation()) + " because reached limit of " + maxNonLivingEntities);
                        }, null);
                    }
                });
            }
        }
    }
}
