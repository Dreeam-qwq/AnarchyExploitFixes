package me.xginko.aef.modules.preventions.withers;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;

import java.util.function.Consumer;

public class RemoveAllSkullsPeriodically extends AEFModule implements Consumer<ScheduledTask> {

    private ScheduledTask scheduledTask;
    private final long checkPeriod;

    public RemoveAllSkullsPeriodically() {
        super("preventions.withers.remove-flying-wither-skulls.periodically-remove-all-flying-skulls");
        config.addComment(configPath + ".enable", "Enable if a lot of wither skulls at spawn are causing lag.");
        checkPeriod = config.getInt(configPath + ".check-period-in-ticks", 80);
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().execute(plugin, () -> {
                            if (entity.getType().equals(EntityType.WITHER_SKULL)) {
                                entity.remove();
                            }
                        }, null, 1L);
                    }
                });
            }
        }
    }
}
