package me.xginko.aef.modules.illegals.items;

import com.destroystokyo.paper.event.player.PlayerArmorChangeEvent;
import io.papermc.paper.event.player.PrePlayerAttackEntityEvent;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.utils.CachingPermTool;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.inventory.ItemStack;

public abstract class IllegalItemModule extends AEFModule implements Listener {

    public abstract AEFPermission bypassPermission();
    public abstract ItemLegality legalityOf(ItemStack itemStack);
    public abstract void handleItem(ItemStack itemStack, ItemLegality legality);

    public IllegalItemModule(String configPath) {
        super(configPath);
    }

    public ItemLegality legalityOf(Iterable<ItemStack> itemStacks) {
        if (itemStacks == null) {
            return ItemLegality.LEGAL;
        }

        for (ItemStack itemStack : itemStacks) {
            if (legalityOf(itemStack) != ItemLegality.LEGAL) {
                return ItemLegality.CONTAINS_ILLEGAL;
            }
        }

        return ItemLegality.LEGAL;
    }

    public Listener getHopperListener() {
        return new Listener() {
            @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
            private void onItemGoesThroughHopper(InventoryMoveItemEvent event) {
                if (legalityOf(event.getItem()) != ItemLegality.LEGAL) {
                    event.setCancelled(true);
                }
            }
        };
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onDispense(BlockDispenseEvent event) {
        if (legalityOf(event.getItem()) != ItemLegality.LEGAL) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onArmorChange(PlayerArmorChangeEvent event) {
        if (!CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            handleItem(event.getNewItem(), legalityOf(event.getNewItem()));
            handleItem(event.getOldItem(), legalityOf(event.getOldItem()));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onInventoryClick(InventoryClickEvent event) {
        if (!CachingPermTool.hasPermission(bypassPermission(), event.getWhoClicked())) {
            handleItem(event.getCurrentItem(), legalityOf(event.getCurrentItem()));
            handleItem(event.getCursor(), legalityOf(event.getCursor()));
            for (ItemStack invItem : event.getWhoClicked().getInventory())
                handleItem(invItem, legalityOf(invItem));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onAttack(PrePlayerAttackEntityEvent event) {
        ItemStack mainHandItem = event.getPlayer().getInventory().getItemInMainHand();
        final ItemLegality mainHandLegality = legalityOf(mainHandItem);
        if (mainHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(mainHandItem, mainHandLegality);
        }

        ItemStack offHandItem = event.getPlayer().getInventory().getItemInOffHand();
        final ItemLegality offHandLegality = legalityOf(offHandItem);
        if (offHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(offHandItem, offHandLegality);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onAttack(EntityDamageByEntityEvent event) {
        if (event.getDamager().getType() == EntityType.PLAYER) {
            final Player player = (Player) event.getDamager();

            ItemStack mainHandItem = player.getInventory().getItemInMainHand();
            final ItemLegality mainHandLegality = legalityOf(mainHandItem);
            if (mainHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), player)) {
                event.setCancelled(true);
                handleItem(mainHandItem, mainHandLegality);
            }

            ItemStack offHandItem = player.getInventory().getItemInOffHand();
            final ItemLegality offHandLegality = legalityOf(offHandItem);
            if (offHandLegality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), player)) {
                event.setCancelled(true);
                handleItem(offHandItem, offHandLegality);
            }
            return;
        }

        if (EntityUtil.isLivingEntity(event.getDamager())) {
            if (legalityOf(((LivingEntity) event.getDamager()).getActiveItem()) != ItemLegality.LEGAL) {
                event.getDamager().getScheduler()
                        .execute(AnarchyExploitFixes.getInstance(), () -> event.getDamager().remove(), null, 1L);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        ItemStack pickUpItem = event.getItem().getItemStack();
        final ItemLegality legality = legalityOf(pickUpItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(pickUpItem, legality);
            event.getItem().setItemStack(pickUpItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        ItemStack droppedItem = event.getItemDrop().getItemStack();
        final ItemLegality legality = legalityOf(droppedItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            handleItem(droppedItem, legality);
            event.getItemDrop().setItemStack(droppedItem);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    public void onInteract(PlayerInteractEvent event) {
        ItemStack interactItem = event.getItem();
        final ItemLegality legality = legalityOf(interactItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(interactItem, legality);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    public void onInteractEntity(PlayerInteractEntityEvent event) {
        ItemStack handItem = event.getPlayer().getInventory().getItem(event.getHand());
        final ItemLegality legality = legalityOf(handItem);
        if (legality != ItemLegality.LEGAL && !CachingPermTool.hasPermission(bypassPermission(), event.getPlayer())) {
            event.setCancelled(true);
            handleItem(handItem, legality);
        }
    }
}
