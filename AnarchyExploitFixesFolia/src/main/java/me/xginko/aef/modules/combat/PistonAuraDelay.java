package me.xginko.aef.modules.combat;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ExpiringSet;
import org.bukkit.Location;
import org.bukkit.entity.EnderCrystal;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPistonExtendEvent;

import java.time.Duration;

public class PistonAuraDelay extends AEFModule implements Listener {

    private final ExpiringSet<Location> pistonsPushingCrystals;

    public PistonAuraDelay() {
        super("crystal-aura.piston-aura-delay");
        config.addComment("combat.crystal-aura.piston-aura-delay.enable",
                "Rate-limits pistons that extend into crystals.");
        this.pistonsPushingCrystals = new ExpiringSet<>(Duration.ofMillis(Math.max(1,
                config.getInt("combat.crystal-aura.piston-aura-delay.piston-extend-delay-in-ticks", 40)) * 50L));
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean("combat.crystal-aura.piston-aura-delay.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExtend(BlockPistonExtendEvent event) {
        if (!event.getBlock().getRelative(event.getDirection()).getLocation().getNearbyEntitiesByType(EnderCrystal.class, 1).isEmpty()) {
            if (pistonsPushingCrystals.contains(event.getBlock().getLocation())) {
                event.setCancelled(true);
            } else {
                pistonsPushingCrystals.add(event.getBlock().getLocation());
            }
        }
    }
}
