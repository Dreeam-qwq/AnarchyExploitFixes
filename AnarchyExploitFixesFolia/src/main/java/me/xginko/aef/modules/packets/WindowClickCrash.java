package me.xginko.aef.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientClickWindow;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import org.bukkit.entity.Player;

public class WindowClickCrash extends AEFPacketModule {

    private final boolean log, kick;

    public WindowClickCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Patches a variety of different lag and crash methods that work by sending invalid\n" +
                "Window Click packets, causing lots of error logs or crash dumps that eventually kill the server.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.window-click-crash-patch";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.CLICK_WINDOW) return;
        final WrapperPlayClientClickWindow packet = new WrapperPlayClientClickWindow(event);

        final int button = packet.getButton();

        if (button < 0 || button > 10 && button != 40 && button != 99) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
            return;
        }

        final int slot = packet.getSlot();

        final Player player = (Player) event.getPlayer();
        if (player != null && slot >= player.getOpenInventory().countSlots()) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }

        if (slot != -999 && slot != -1) {
            if (slot < 0) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
            }
            return;
        }

        if (button == 40) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
            return;
        }

        switch (packet.getWindowClickType()) {
            case SWAP, PICKUP_ALL -> {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
            }
            case THROW -> {
                if (slot == -1) {
                    event.setCancelled(true);
                    onCancel(log, kick, event.getUser());
                }
            }
            case QUICK_MOVE -> {
                if (slot == -999) {
                    event.setCancelled(true);
                    onCancel(log, kick, event.getUser());
                }
            }
        }
    }
}
