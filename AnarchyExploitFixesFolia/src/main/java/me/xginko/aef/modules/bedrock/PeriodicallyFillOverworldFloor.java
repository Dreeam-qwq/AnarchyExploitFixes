package me.xginko.aef.modules.bedrock;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.ChunkUtil;
import org.bukkit.Chunk;
import org.bukkit.World;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.function.Consumer;

public class PeriodicallyFillOverworldFloor implements AEFModule, Consumer<ScheduledTask> {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final Set<String> exemptedWorlds;
    private final long checkPeriod;
    private final double pauseTPS;
    private final boolean pauseOnLowTPS;

    public PeriodicallyFillOverworldFloor() {
        shouldEnable();
        plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable","only checks loaded chunks");
        this.checkPeriod = config.getInt(configPath() + ".check-period-in-seconds", 10) * 20L;
        this.exemptedWorlds = new HashSet<>(config.getList(configPath() + ".exempted-worlds",
                List.of("exampleworld", "exampleworld2")));
        this.pauseOnLowTPS = config.getBoolean(configPath() + ".pause-on-low-tps", true);
        this.pauseTPS = config.getDouble(configPath() + ".pause-tps", 16.0);
    }

    @Override
    public String configPath() {
        return "bedrock.fill-in-bedrock.overworld-floor.periodically-check-and-fill";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @Override
    public void accept(ScheduledTask task) {
        for (World world : plugin.getServer().getWorlds()) {
            if (world.getEnvironment() != World.Environment.NORMAL) continue;
            if (exemptedWorlds.contains(world.getName())) continue;

            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().execute(plugin, world, chunk.getX(), chunk.getZ(), () -> {
                    if (!chunk.isEntitiesLoaded()) return;
                    if (pauseOnLowTPS && (AnarchyExploitFixes.getTickData().getTPS() <= pauseTPS)) return;
                    ChunkUtil.createBedrockLayer(chunk, world.getMinHeight());
                });
            }
        }
    }
}
