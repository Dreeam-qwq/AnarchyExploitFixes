package me.xginko.aef.modules.elytra;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Location;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.jetbrains.annotations.NotNull;

import java.time.Duration;
import java.util.Map;
import java.util.UUID;
import java.util.function.Consumer;

public class ElytraHelper extends AEFModule implements Consumer<ScheduledTask> , Listener {

    private static ElytraHelper instance;
    private ScheduledTask scheduledTask;
    private final Cache<UUID, PlayerData> playerDataCache =
            Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(3)).build();

    public ElytraHelper() {
        super("elytra-helper");
        instance = this;
    }

    public static ElytraHelper getInstance() {
        return instance;
    }

    @Override
    public void enable() {
        scheduledTask = plugin.getServer().getGlobalRegionScheduler()
                .runAtFixedRate(plugin, this, 1L, 1L);
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.elytra_enable_at_spawn || config.elytra_enable_global || config.elytra_enable_netherceiling;
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        playerDataCache.cleanUp();
        HandlerList.unregisterAll(this);
    }

    @Override
    public void accept(ScheduledTask task) {
        for (Map.Entry<UUID, PlayerData> entry : playerDataCache.asMap().entrySet()) {
            entry.getValue().update(config.elytra_calculate_3D);
        }
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        if (event.getPlayer().isGliding()) {
            playerDataCache.get(event.getPlayer().getUniqueId(),
                    k -> new PlayerData(event.getFrom(), event.getTo())).latest = event.getTo();
        }
    }

    public boolean isInNewChunks(Player player) {
        return player.getChunk().getInhabitedTime() <= 200L;
    }

    public Location getSetbackLocation(PlayerMoveEvent event) {
        return event.getFrom();
    }

    private static class PlayerData {
        public @NotNull Location loc_50_millis_ago, latest;
        private double speedAvg;

        public PlayerData(@NotNull Location prev, @NotNull Location latest) {
            this.loc_50_millis_ago = prev;
            this.latest = latest;
        }

        public double getSpeedAvg() {
            return speedAvg;
        }

        public void update(boolean using3D) {
            speedAvg = using3D ? LocationUtil.getRelDistance3D(loc_50_millis_ago, latest) : LocationUtil.getRelDistance2D(loc_50_millis_ago, latest);
            speedAvg = speedAvg - 0.02; // Tolerance
            loc_50_millis_ago = latest.clone();
        }
    };
}
