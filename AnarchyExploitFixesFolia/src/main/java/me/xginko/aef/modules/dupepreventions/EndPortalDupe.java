package me.xginko.aef.modules.dupepreventions;

import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.World;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityDamageEvent;

public class EndPortalDupe extends AEFModule implements Listener {

    public EndPortalDupe() {
        super("dupe-preventions.prevent-end-portal-dupe");
        config.addComment(configPath, "Patches https://www.youtube.com/watch?v=RLvErqzeK3Y");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath, false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityDamage(EntityDamageEvent event) {
        switch (event.getCause()) {
            case ENTITY_ATTACK, FALL -> {
                return;
            }
        }

        final Entity entity = event.getEntity();
        if (entity.getWorld().getEnvironment() != World.Environment.THE_END) return;
        if (!EntityUtil.isLivingEntity(entity)) return;
        final LivingEntity livingEntity = (LivingEntity) entity;

        if (
                livingEntity.getCanPickupItems()
                || (EntityUtil.isChestableHorse(livingEntity) && ((ChestedHorse) livingEntity).isCarryingChest())
        ) {
            if (
                    livingEntity.getHealth() - event.getDamage() <= 0
                    && Math.round(livingEntity.getLocation().getX()) == 100
                    && Math.round(livingEntity.getLocation().getZ()) == 0
            ) {
                livingEntity.remove();
            }
        }
    }
}
