package me.xginko.aef.modules.lagpreventions;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;

public class FallingBlockStasis implements AEFModule {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long check_period_in_ticks;
    private final int max_alive_time;
    private final boolean logIsEnabled;
    
    public FallingBlockStasis() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches a lag exploit where a shitton of entities are generated\n" +
                        "by holding falling blocks in a stasis using piston heads.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false);
        this.max_alive_time = config.getInt(configPath() + ".falling-blocks-max-alive-time-in-ticks", 300,
                "(20 ticks = 1 second)");
        this.check_period_in_ticks = Math.max(config.getInt(configPath() + ".check-period-in-seconds", 12,
                "How frequently we should check for all projectile's alive time"), 1) * 20L;
    }

    @Override
    public String configPath() {
        return "lag-preventions.prevent-falling-block-stasis";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, check -> {
            for (World world : plugin.getServer().getWorlds()) {
                for (Chunk chunk : world.getLoadedChunks()) {
                    plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), checkChunk -> {
                        for (Entity entity : chunk.getEntities()) {
                            entity.getScheduler().run(plugin, checkEntity -> {
                                if (entity.getType() == EntityType.FALLING_BLOCK && entity.getTicksLived() > max_alive_time) {
                                    entity.remove();
                                    if (logIsEnabled) info("Removed falling block at " + LocationUtil.toString(entity.getLocation()) +
                                            " because it has been alive for " + entity.getTicksLived() + " ticks (max= " + max_alive_time + ").");
                                }
                            }, null);
                        }
                    });
                }
            }
        }, check_period_in_ticks, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }
}
