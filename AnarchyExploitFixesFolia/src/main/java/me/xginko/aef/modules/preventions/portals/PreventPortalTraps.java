package me.xginko.aef.modules.preventions.portals;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.player.PlayerPortalEvent;

import java.time.Duration;
import java.util.UUID;

public class PreventPortalTraps extends AEFModule implements Listener {

    private final Cache<UUID, Location> portalEnterLocations;
    private final long tpBackDelayTicks;

    public PreventPortalTraps() {
        super("preventions.portals.prevent-portal-traps");
        config.addComment(configPath + ".enable",
                "Teleports a player back to the original location if they stand in a portal for too long.");
        final int tpBackDelaySeconds = Math.max(1, config.getInt(configPath + ".wait-time-until-tp-back-in-seconds", 10));
        this.tpBackDelayTicks = tpBackDelaySeconds * 20L;
        this.portalEnterLocations = AnarchyExploitFixes.isServerFolia() ? Caffeine.newBuilder().expireAfterWrite(Duration.ofSeconds(tpBackDelaySeconds + 2)).build() : null;
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalUse(PlayerPortalEvent event) { // Does not fire on folia due to broken API
        final Player player = event.getPlayer();
        player.getScheduler().execute(plugin, () -> {
            if (player.getLocation().getBlock().getType() == Material.NETHER_PORTAL) {
                player.teleportAsync(event.getFrom()).thenAccept(tpHappened -> {
                    if (tpHappened) {
                        player.playSound(player.getLocation(), Sound.BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F);
                    }
                });
            }
        }, null, tpBackDelayTicks);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!AnarchyExploitFixes.isServerFolia()) return; // Avoid fallback logic on non-folia
        if (event.getEntityType() != EntityType.PLAYER) return;

        final Player player = (Player) event.getEntity();
        final Location firstEnterLoc = portalEnterLocations.getIfPresent(player.getUniqueId());
        if (firstEnterLoc != null) return; // If the first enter loc has been cached, a delayed check has already been scheduled.

        final Location from = player.getLocation();
        portalEnterLocations.put(player.getUniqueId(), from);

        player.getScheduler().execute(plugin, () -> {
            if (player.getLocation().getBlock().getType() == Material.NETHER_PORTAL) {
                player.teleportAsync(from).thenAccept(tpHappened -> {
                    if (tpHappened) {
                        player.playSound(player.getLocation(), Sound.BLOCK_PORTAL_TRAVEL, 1.0F, 1.0F);
                    }
                });
            }
        }, null, tpBackDelayTicks);
    }
}
