package me.xginko.aef.modules.chunklimits;

import io.papermc.paper.tag.EntityTags;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Vehicle;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

import java.util.concurrent.atomic.AtomicInteger;

public class MinecartLimit implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxMinecartsPerChunk;
    private final boolean logIsEnabled;

    public MinecartLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.config();
        config.addComment(configPath() + ".enable",
                "Limit the amount of minecarts to prevent lag.");
        this.logIsEnabled = config.getBoolean(configPath() + ".log-removals", false);
        this.maxMinecartsPerChunk = config.getInt(configPath() + ".max-minecarts-per-chunk", 25);
        this.checkPeriod = Math.max(config.getInt(configPath() + ".check-period-in-ticks", 400,
                "200 ticks = 10 seconds."), 1);
    }

    @Override
    public String configPath() {
        return "chunk-limits.minecart-limit";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        Vehicle vehicle = event.getVehicle();
        if (!EntityTags.MINECARTS.isTagged(vehicle.getType())) return;

        int minecartCount = 0;
        for (Entity entity : vehicle.getChunk().getEntities()) {
            if (!EntityTags.MINECARTS.isTagged(entity.getType())) continue;

            minecartCount++;
            if (minecartCount <= maxMinecartsPerChunk) continue;

            entity.getScheduler().run(plugin, kill -> {
                entity.remove();
                if (logIsEnabled) info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                        " because reached limit of " + maxMinecartsPerChunk);
            }, null);
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), checkChunk -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger minecartCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().run(plugin, kill -> {
                            if (EntityTags.MINECARTS.isTagged(entity.getType()) && minecartCount.incrementAndGet() > maxMinecartsPerChunk) {
                                entity.remove();
                                if (logIsEnabled)
                                    info("Removed minecart " + entity.getType() + " at " + LocationUtil.toString(entity.getLocation()) +
                                            " because reached limit of " + maxMinecartsPerChunk);
                            }
                        }, null);
                    }
                });
            }
        }
    }
}
