package me.xginko.aef.modules.lagpreventions;

import com.github.benmanes.caffeine.cache.Cache;
import com.github.benmanes.caffeine.cache.Caffeine;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.models.ChunkUID;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockFromToEvent;

import java.time.Duration;

public class LiquidUpdateLag implements AEFModule, Listener {

    private final Cache<ChunkUID, Integer> liquidSpreadEventCountCache;
    private final int maxLiquidSpreadEventsPerChunk;
    private final boolean logIsEnabled;

    public LiquidUpdateLag() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxLiquidSpreadEventsPerChunk = config.getInt(configPath() + ".max-liquid-events-in-same-chunk-per-time", 1200,
                "amount of liquid source blocks * sides it can spread to * block spread length");
        this.liquidSpreadEventCountCache = Caffeine.newBuilder().expireAfterWrite(Duration.ofMillis(
                Math.max(config.getInt(configPath() + ".time-in-ticks", 100,
                        "Record time after first liquid spread. \nWhen this time runs out, the spread counter resets"), 1) * 50L
        )).build();
        this.logIsEnabled = config.getBoolean(configPath() + ".log", false,
                "Very spammy, use for testing/debugging only");
    }

    @Override
    public String configPath() {
        return "lag-preventions.prevent-liquid-update-lag";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onLiquidSpread(BlockFromToEvent event) {
        final Block sourceBlock = event.getBlock();
        if (sourceBlock.getType() == Material.DRAGON_EGG) return; // Event fires only for liquids and the dragon egg

        final Chunk chunk = sourceBlock.getChunk();
        final ChunkUID chunkUID = ChunkUID.of(chunk);

        Integer liquidSpreadCount = liquidSpreadEventCountCache.getIfPresent(chunkUID);
        if (liquidSpreadCount == null) liquidSpreadCount = 0;

        liquidSpreadCount++;
        liquidSpreadEventCountCache.put(chunkUID, liquidSpreadCount);

        if (liquidSpreadCount > maxLiquidSpreadEventsPerChunk) {
            event.setCancelled(true);
            if (logIsEnabled) warn("Cancelled liquid events for chunk x=" + chunk.getX() + ", z=" + chunk.getZ() +
                    " in world: " + chunk.getWorld().getName());
            return;
        }

        if (logIsEnabled) info("Recorded " + liquidSpreadCount + " liquid updates in chunk x=" + chunk.getX() +
                ", z=" + chunk.getZ() + " in world: " + chunk.getWorld().getName());
    }
}