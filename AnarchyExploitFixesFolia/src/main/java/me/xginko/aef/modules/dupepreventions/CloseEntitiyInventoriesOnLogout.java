package me.xginko.aef.modules.dupepreventions;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.entity.Entity;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.InventoryHolder;

public class CloseEntitiyInventoriesOnLogout implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;

    public CloseEntitiyInventoriesOnLogout() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AnarchyExploitFixes.config().addComment(configPath(),
                "Closes open inventories of entities that disappeared when the player riding it disconnected.");
    }

    @Override
    public String configPath() {
        return "dupe-preventions.close-entity-inventories-on-player-disconnect";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.config().getBoolean(configPath(), false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerQuit(PlayerQuitEvent event) {
        final Entity vehicle = event.getPlayer().getVehicle();

        if (EntityUtil.isInventoryHolder(vehicle)) {
            vehicle.getScheduler().run(plugin, closeInvGUIs -> {
                for (HumanEntity viewer : ((InventoryHolder) vehicle).getInventory().getViewers()) {
                    viewer.getScheduler().run(plugin, closeInv -> viewer.closeInventory(), null);
                }
            }, null);
        }
    }
}
