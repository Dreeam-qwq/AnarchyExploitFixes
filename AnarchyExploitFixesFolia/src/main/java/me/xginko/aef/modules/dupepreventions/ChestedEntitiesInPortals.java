package me.xginko.aef.modules.dupepreventions;

import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.modules.AEFModule;
import me.xginko.aef.utils.EntityUtil;
import org.bukkit.entity.ChestedHorse;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityPortalEnterEvent;
import org.bukkit.event.entity.EntityPortalEvent;

public class ChestedEntitiesInPortals implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;

    public ChestedEntitiesInPortals() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AnarchyExploitFixes.getConfiguration().addComment(configPath(), """
                CAUTION: Will remove chests and their contents from a chested entity if it touches a portal on Folia!\s
                Prevents entities that can carry chests from using portals.""");
    }

    @Override
    public String configPath() {
        return "dupe-preventions.prevent-chested-living-entities-in-portals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath(), false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onEntityPortalEvent(EntityPortalEvent event) { // Does not fire on folia due to broken API
        if (!EntityUtil.isChestableHorse(event.getEntity())) return;

        if (((ChestedHorse) event.getEntity()).isCarryingChest()) {
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPortalEnter(EntityPortalEnterEvent event) { // Only portal event that can be listened to on folia
        if (!AnarchyExploitFixes.isServerFolia()) return; // Avoid fallback logic on non-folia
        if (!EntityUtil.isChestableHorse(event.getEntity())) return;

        ChestedHorse chestedHorse = (ChestedHorse) event.getEntity();

        if (chestedHorse.isCarryingChest()) {
            chestedHorse.getScheduler().run(plugin, removeChest -> chestedHorse.setCarryingChest(false), null);
        }
    }
}
