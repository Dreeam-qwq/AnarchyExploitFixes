package me.xginko.aef.modules.illegals.items;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.event.HandlerList;
import org.bukkit.inventory.ItemStack;

public class PlayerHeads extends IllegalItemModule {

    private final boolean shouldDelete, checkStored;

    public PlayerHeads() {
        super("illegals.ban-player-heads");
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Deletes or prevents usage of player heads.");
        this.shouldDelete = config.getBoolean(configPath + ".remove-items", false);
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false,
                "Will delete shulker/bundle if they contain any player heads.");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_PLAYERHEAD;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        switch (itemStack.getType()) {
            case PLAYER_HEAD, PLAYER_WALL_HEAD -> {
                return ItemLegality.ILLEGAL;
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!shouldDelete) return;

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
