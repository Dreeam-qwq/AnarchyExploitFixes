package me.xginko.aef.modules.illegals.items.enchantments;

import me.xginko.aef.enums.AEFPermission;
import me.xginko.aef.enums.ItemLegality;
import me.xginko.aef.modules.illegals.items.IllegalItemModule;
import me.xginko.aef.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;

import java.util.EnumSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class InapplicableEnchants extends IllegalItemModule {

    private Listener hopperListener;
    private final Set<Material> whitelistedTypes;
    private final boolean useWhitelist, blacklistMode, doSomething, checkStored, preventHopperBypass;

    public InapplicableEnchants() {
        super("illegals.enchantments.inapplicable-enchants");
        config.addComment(configPath + ".enable",
                "Bypass permission: " + bypassPermission().string() + "\n" +
                        "Reverts or prevents usage of ItemStacks with Enchantments that\n" +
                        "cannot be applied to that ItemStack in vanilla survival minecraft.\n" +
                        "Examples: A helmet with sharpness or a block of stone with fortune.");
        this.checkStored = config.getBoolean(configPath + ".check-stored-items", false);
        this.doSomething = config.getBoolean(configPath + ".delete-or-revert-item", false,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.useWhitelist = config.getBoolean(configPath + ".item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean(configPath + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath + ".whitelisted-items", List.of("GOLDEN_APPLE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath + ".prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals\s
                on top of a hopper, then using the illegal out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource\s
                intense as the event fires for every single item getting moved by the\s
                hopper. Enable only if you need to.""");
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        if (preventHopperBypass) {
            this.hopperListener = getHopperListener();
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return config.getBoolean(configPath + ".enable", false);
    }

    @Override
    public void disable() {
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_INAPPLICABLE;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
                if (!enchant.getKey().canEnchantItem(itemStack)) {
                    return ItemLegality.ILLEGAL;
                }
            }
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        switch (legality) {
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
            case ILLEGAL -> {
                for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
                    if (!enchant.getKey().canEnchantItem(itemStack)) {
                        itemStack.removeEnchantment(enchant.getKey());
                    }
                }
            }
        }
    }
}
