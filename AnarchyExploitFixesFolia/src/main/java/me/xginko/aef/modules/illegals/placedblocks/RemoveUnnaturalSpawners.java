package me.xginko.aef.modules.illegals.placedblocks;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.xginko.aef.AnarchyExploitFixes;
import me.xginko.aef.config.Config;
import me.xginko.aef.modules.AEFModule;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.CreatureSpawner;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.*;
import java.util.stream.Collectors;

public class RemoveUnnaturalSpawners implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Map<String, Set<EntityType>> naturalSpawners = new HashMap<>();
    private final boolean checkShouldPauseOnLowTPS;
    private final double pauseTPS;

    public RemoveUnnaturalSpawners() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.checkShouldPauseOnLowTPS = config.getBoolean(configPath() + ".pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble(configPath() + ".pause-TPS", 14.0);

        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", List.of("SKELETON", "ZOMBIE", "SILVERFISH", "SPIDER", "CAVE_SPIDER"));
        defaults.put("world_nether", List.of("BLAZE", "MAGMA_CUBE"));
        defaults.put("world_the_end", List.of("SKELETON", "SPIDER"));

        ConfigSection section = config.getConfigSection(configPath() + ".natural-spawner-types-per-world", defaults,
                "You can add or remove as much world names here as you want.");
        for (String configuredWorlds : section.getKeys(false)) {
            naturalSpawners.put(configuredWorlds, section.getList(configuredWorlds)
                    .stream()
                    .map(String::valueOf)
                    .map(configuredType -> {
                        try {
                            return EntityType.valueOf(configuredType);
                        } catch (IllegalArgumentException e) {
                            notRecognized(EntityType.class, configuredType);
                            return null;
                        }
                    })
                    .filter(Objects::nonNull)
                    .collect(Collectors.toCollection(() -> EnumSet.noneOf(EntityType.class)))
            );
        }
    }

    @Override
    public String configPath() {
        return "illegals.remove-unnatural-spawners-on-chunkload";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false) && !naturalSpawners.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;
        if (checkShouldPauseOnLowTPS && (AnarchyExploitFixes.getTickData().getTPS() <= pauseTPS)) return;

        Chunk chunk = event.getChunk();
        World world = chunk.getWorld();
        if (!naturalSpawners.containsKey(world.getName())) return;

        final int minY = world.getMinHeight();
        final int maxY = world.getMaxHeight();

        for (int x = 0; x < 16; x++) {
            for (int z = 0; z < 16; z++) {
                for (int y = minY; y < maxY; y++) {
                    Block block = chunk.getBlock(x, y, z);
                    if (
                            block.getType() == Material.SPAWNER
                            && !naturalSpawners.get(world.getName()).contains(((CreatureSpawner) block.getState()).getSpawnedType())
                    ) {
                        block.setType(Material.AIR, false);
                    }
                }
            }
        }
    }
}
