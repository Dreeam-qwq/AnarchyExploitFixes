package me.moomoo.anarchyexploitfixes.commands.aef;

import me.moomoo.anarchyexploitfixes.commands.AnarchyExploitFixesCommand;
import me.moomoo.anarchyexploitfixes.commands.SubCommand;
import me.moomoo.anarchyexploitfixes.commands.aef.subcommands.*;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.command.TabCompleter;
import org.jetbrains.annotations.NotNull;

import java.util.ArrayList;
import java.util.List;

public class AEFCommand implements TabCompleter, AnarchyExploitFixesCommand {

    private final List<SubCommand> subCommands = new ArrayList<>(6);
    private final List<String> tabCompleter = new ArrayList<>(6);

    public AEFCommand() {
        subCommands.add(new ReloadSubCmd());
        subCommands.add(new ElytraSubCmd());
        subCommands.add(new GearedSubCmd());
        subCommands.add(new LagSubCmd());
        subCommands.add(new VersionSubCmd());
        subCommands.add(new KickphraseSubCmd());
        for (SubCommand subcommand : subCommands) {
            tabCompleter.add(subcommand.getLabel());
        }
    }

    @Override
    public String label() {
        return "aef";
    }

    @Override
    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, String[] args) {
        if (args.length == 1) {
            if (args[0].equalsIgnoreCase("lag")) {
                return List.of("1000", "2000", "3000", "4000");
            } else {
                return tabCompleter;
            }
        }
        return null;
    }

    @Override
    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, String[] args) {
        if (args.length > 0) {
            boolean cmdExists = false;
            for (SubCommand subCommand : subCommands) {
                if (args[0].equalsIgnoreCase(subCommand.getLabel())) {
                    subCommand.perform(sender, args);
                    cmdExists = true;
                    break;
                }
            }
            if (!cmdExists) sendCommandOverview(sender);
        } else {
            sendCommandOverview(sender);
        }
        return true;
    }

    private void sendCommandOverview(CommandSender sender) {
        if (!sender.hasPermission("anarchyexploitfixes.cmd.*")) return;
        sender.sendMessage(Component.text("-----------------------------------------------------").color(NamedTextColor.GRAY));
        sender.sendMessage(Component.text("AnarchyExploitFixes Commands").color(NamedTextColor.GOLD));
        sender.sendMessage(Component.text("-----------------------------------------------------").color(NamedTextColor.GRAY));
        for (SubCommand subCommand : subCommands) {
            sender.sendMessage(
                    subCommand.getSyntax()
                    .append(Component.text(" - ").color(NamedTextColor.DARK_GRAY))
                    .append(subCommand.getDescription())
            );
        }
        sender.sendMessage(
                Component.text("/say <message>").color(NamedTextColor.GOLD)
                .append(Component.text(" - ").color(NamedTextColor.DARK_GRAY))
                .append(Component.text("Broadcast a message to all players").color(NamedTextColor.GRAY))
        );
        sender.sendMessage(
                Component.text("/toggleconnectionmsgs").color(NamedTextColor.GOLD)
                .append(Component.text(" - ").color(NamedTextColor.DARK_GRAY))
                .append(Component.text("Toggle connection messages on or off").color(NamedTextColor.GRAY))
        );
        sender.sendMessage(Component.text("-----------------------------------------------------").color(NamedTextColor.GRAY));
    }
}
