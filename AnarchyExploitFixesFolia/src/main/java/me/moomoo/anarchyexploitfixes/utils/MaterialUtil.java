package me.moomoo.anarchyexploitfixes.utils;

import com.destroystokyo.paper.MaterialTags;
import org.bukkit.Material;
import org.bukkit.block.BlockState;
import org.bukkit.block.data.Waterlogged;
import org.bukkit.inventory.ItemStack;

import java.util.EnumMap;
import java.util.Map;

public class MaterialUtil {

    // Blocks that the player gets lowered into slightly when walking on them
    public static boolean isSinkInBlock(Material material) {
        if (material == null) return false;
        return switch (material) {
            case SOUL_SAND, MUD, FARMLAND -> true;
            default -> false;
        };
    }

    public static boolean isAnvil(Material material) {
        if (material == null) return false;
        return switch (material) {
            case ANVIL, CHIPPED_ANVIL, DAMAGED_ANVIL -> true;
            default -> false;
        };
    }

    public static boolean isMap(Material material) {
        if (material == null) return false;
        return switch (material) {
            case MAP, FILLED_MAP -> true;
            default -> false;
        };
    }

    public static boolean isBlockDispenseBucket(ItemStack item) {
        if (item == null) return false;
        return isBlockDispenseBucket(item.getType());
    }

    public static boolean isBlockDispenseBucket(Material material) {
        if (material == null) return false;
        return switch (material) {
            case    WATER_BUCKET,
                    LAVA_BUCKET,
                    COD_BUCKET,
                    SALMON_BUCKET,
                    PUFFERFISH_BUCKET,
                    TROPICAL_FISH_BUCKET,
                    AXOLOTL_BUCKET,
                    TADPOLE_BUCKET,
                    POWDER_SNOW_BUCKET
                    -> true;
            default -> false;
        };
    }

    public static boolean isIndestructible(Material material) {
        return switch (material) {
            case    BEDROCK,
                    END_PORTAL_FRAME,
                    END_PORTAL,
                    REINFORCED_DEEPSLATE,
                    TRAPPED_CHEST,
                    STRUCTURE_BLOCK,
                    BARRIER,
                    COMMAND_BLOCK
                    -> true;
            default -> false;
        };
    }

    public static boolean isSolidIndestructible(Material material) {
        return switch (material) {
            case    BEDROCK,
                    END_PORTAL_FRAME,
                    REINFORCED_DEEPSLATE,
                    TRAPPED_CHEST,
                    STRUCTURE_BLOCK,
                    BARRIER,
                    COMMAND_BLOCK
                    -> true;
            default -> false;
        };
    }

    private static final Map<Material, Boolean> WATERLOGGABLE_CACHE = new EnumMap<>(Material.class);
    public static boolean isWaterlogged(BlockState blockState) {
        if (WATERLOGGABLE_CACHE.containsKey(blockState.getType())) {
            return WATERLOGGABLE_CACHE.get(blockState.getType()) && ((Waterlogged) blockState.getBlockData()).isWaterlogged();
        }

        if (blockState.getBlockData() instanceof Waterlogged) {
            WATERLOGGABLE_CACHE.put(blockState.getType(), true);
            return ((Waterlogged) blockState.getBlockData()).isWaterlogged();
        } else {
            return WATERLOGGABLE_CACHE.put(blockState.getType(), false);
        }
    }

    public static boolean isBook(ItemStack item) {
        if (item == null) return false;
        return isBook(item.getType());
    }

    public static boolean isBook(Material material) {
        if (material == null) return false;
        return switch (material) {
            case WRITABLE_BOOK, WRITTEN_BOOK -> true;
            default -> false;
        };
    }

    public static boolean isShulkerBox(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SHULKER_BOXES.isTagged(item);
    }

    public static boolean isSpawnEgg(ItemStack item) {
        if (item == null) return false;
        return MaterialTags.SPAWN_EGGS.isTagged(item);
    }

    public static boolean isSpawnEgg(Material material) {
        if (material == null) return false;
        return MaterialTags.SPAWN_EGGS.isTagged(material);
    }

    public static boolean isTool(ItemStack item) {
        if (item == null) return false;
        return isTool(item.getType());
    }

    public static boolean isTool(Material material) {
        if (material == null) return false;
        return  MaterialTags.AXES.isTagged(material)
                || MaterialTags.HOES.isTagged(material)
                || MaterialTags.PICKAXES.isTagged(material)
                || MaterialTags.SHOVELS.isTagged(material);
    }

    public static boolean isElytra(ItemStack item) {
        if (item == null) return false;
        return item.getType() == Material.ELYTRA;
    }

    public static boolean isTrident(ItemStack item) {
        if (item == null) return false;
        return item.getType() == Material.TRIDENT;
    }

    public static boolean isCrossbow(ItemStack item) {
        if (item == null) return false;
        return item.getType() == Material.CROSSBOW;
    }

    public static boolean isBow(ItemStack item) {
        if (item == null) return false;
        return item.getType() == Material.BOW;
    }
}