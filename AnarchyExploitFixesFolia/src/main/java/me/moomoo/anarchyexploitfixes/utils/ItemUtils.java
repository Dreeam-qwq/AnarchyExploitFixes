package me.moomoo.anarchyexploitfixes.utils;

import org.bukkit.Material;
import org.bukkit.inventory.ItemStack;

public class ItemUtils {

    public static boolean isBook(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case WRITABLE_BOOK, WRITTEN_BOOK -> true;
            default -> false;
        };
    }

    public static boolean isShulkerBox(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    SHULKER_BOX,
                    BLACK_SHULKER_BOX,
                    BLUE_SHULKER_BOX,
                    BROWN_SHULKER_BOX,
                    CYAN_SHULKER_BOX,
                    GRAY_SHULKER_BOX,
                    GREEN_SHULKER_BOX,
                    LIGHT_BLUE_SHULKER_BOX,
                    LIGHT_GRAY_SHULKER_BOX,
                    LIME_SHULKER_BOX,
                    MAGENTA_SHULKER_BOX,
                    ORANGE_SHULKER_BOX,
                    PINK_SHULKER_BOX,
                    PURPLE_SHULKER_BOX,
                    RED_SHULKER_BOX,
                    WHITE_SHULKER_BOX,
                    YELLOW_SHULKER_BOX
                    -> true;
            default -> false;
        };
    }

    public static boolean isShulkerBox(final Material material) {
        return switch (material) {
            case
                    SHULKER_BOX,
                    BLACK_SHULKER_BOX,
                    BLUE_SHULKER_BOX,
                    BROWN_SHULKER_BOX,
                    CYAN_SHULKER_BOX,
                    GRAY_SHULKER_BOX,
                    GREEN_SHULKER_BOX,
                    LIGHT_BLUE_SHULKER_BOX,
                    LIGHT_GRAY_SHULKER_BOX,
                    LIME_SHULKER_BOX,
                    MAGENTA_SHULKER_BOX,
                    ORANGE_SHULKER_BOX,
                    PINK_SHULKER_BOX,
                    PURPLE_SHULKER_BOX,
                    RED_SHULKER_BOX,
                    WHITE_SHULKER_BOX,
                    YELLOW_SHULKER_BOX
                    -> true;
            default -> false;
        };
    }

    public static boolean isHelmet(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    CHAINMAIL_HELMET,
                    DIAMOND_HELMET,
                    GOLDEN_HELMET,
                    IRON_HELMET,
                    LEATHER_HELMET,
                    NETHERITE_HELMET,
                    TURTLE_HELMET
                    -> true;
            default -> false;
        };
    }

    public static boolean isChestplate(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    CHAINMAIL_CHESTPLATE,
                    DIAMOND_CHESTPLATE,
                    GOLDEN_CHESTPLATE,
                    IRON_CHESTPLATE,
                    LEATHER_CHESTPLATE,
                    NETHERITE_CHESTPLATE
                    -> true;
            default -> false;
        };
    }

    public static boolean isLeggings(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    CHAINMAIL_LEGGINGS,
                    DIAMOND_LEGGINGS,
                    GOLDEN_LEGGINGS,
                    IRON_LEGGINGS,
                    LEATHER_LEGGINGS,
                    NETHERITE_LEGGINGS
                    -> true;
            default -> false;
        };
    }

    public static boolean isBoots(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    CHAINMAIL_BOOTS,
                    DIAMOND_BOOTS,
                    GOLDEN_BOOTS,
                    IRON_BOOTS,
                    LEATHER_BOOTS,
                    NETHERITE_BOOTS
                    -> true;
            default -> false;
        };
    }

    public static boolean isAxe(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    NETHERITE_AXE,
                    DIAMOND_AXE,
                    GOLDEN_AXE,
                    IRON_AXE,
                    STONE_AXE,
                    WOODEN_AXE
                    -> true;
            default -> false;
        };
    }

    public static boolean isHoe(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    NETHERITE_HOE,
                    DIAMOND_HOE,
                    GOLDEN_HOE,
                    IRON_HOE,
                    STONE_HOE,
                    WOODEN_HOE
                    -> true;
            default -> false;
        };
    }

    public static boolean isPickaxe(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    NETHERITE_PICKAXE,
                    DIAMOND_PICKAXE,
                    GOLDEN_PICKAXE,
                    IRON_PICKAXE,
                    STONE_PICKAXE,
                    WOODEN_PICKAXE
                    -> true;
            default -> false;
        };
    }

    public static boolean isShovel(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    NETHERITE_SHOVEL,
                    DIAMOND_SHOVEL,
                    GOLDEN_SHOVEL,
                    IRON_SHOVEL,
                    STONE_SHOVEL,
                    WOODEN_SHOVEL
                    -> true;
            default -> false;
        };
    }

    public static boolean isSword(ItemStack item) {
        if (item == null) return false;
        return switch (item.getType()) {
            case
                    NETHERITE_SWORD,
                    DIAMOND_SWORD,
                    GOLDEN_SWORD,
                    IRON_SWORD,
                    STONE_SWORD,
                    WOODEN_SWORD
                    -> true;
            default -> false;
        };
    }

    public static boolean isSpawnEgg(ItemStack item) {
        if (item == null) return false;
        final String materialAsString = item.getType().name();
        return materialAsString.contains("SPAWN_EGG") || materialAsString.contains("MONSTER_EGG");
    }

    public static boolean isArmor(ItemStack item) {
        if (item == null) return false;
        return isHelmet(item) || isChestplate(item) || isLeggings(item) || isBoots(item);
    }

    public static boolean isTool(ItemStack item) {
        if (item == null) return false;
        return isAxe(item) || isHoe(item) || isPickaxe(item) || isShovel(item);
    }

    public static boolean isElytra(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.ELYTRA);
    }

    public static boolean isTrident(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.TRIDENT);
    }

    public static boolean isCrossbow(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.CROSSBOW);
    }

    public static boolean isBow(ItemStack item) {
        if (item == null) return false;
        return item.getType().equals(Material.BOW);
    }

    public static boolean isIndestructible(Material material) {
        return switch (material) {
            case    BEDROCK,
                    END_PORTAL_FRAME,
                    END_PORTAL,
                    REINFORCED_DEEPSLATE,
                    TRAPPED_CHEST,
                    STRUCTURE_BLOCK,
                    BARRIER,
                    COMMAND_BLOCK
                    -> true;
            default -> false;
        };
    }

    public static boolean isPiston(Material material) {
        return switch (material) {
            case    PISTON,
                    PISTON_HEAD,
                    MOVING_PISTON,
                    STICKY_PISTON
                    -> true;
            default -> false;
        };
    }
}