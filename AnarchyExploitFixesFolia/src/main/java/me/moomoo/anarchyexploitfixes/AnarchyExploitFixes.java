package me.moomoo.anarchyexploitfixes;

import com.github.retrooper.packetevents.PacketEvents;
import io.github.retrooper.packetevents.factory.spigot.SpigotPacketEventsBuilder;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.commands.AEFCommand;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import me.moomoo.anarchyexploitfixes.utils.models.CachedTickData;
import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.config.Configurator;
import org.bstats.bukkit.Metrics;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.Collections;
import java.util.HashMap;
import java.util.Locale;
import java.util.Set;
import java.util.jar.JarFile;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;
import java.util.zip.ZipEntry;

public class AnarchyExploitFixes extends JavaPlugin {

    private static AnarchyExploitFixes instance;
    private static HashMap<String, LanguageCache> languageCacheMap;
    private static Config config;
    private static CachedTickData cachedTickData;
    private static CachingPermTool cachingPermTool;
    private static ComponentLogger prefixedLogger, unPrefixedLogger;
    private static Metrics metrics;
    private static boolean isServerFolia;

    @Override
    public void onLoad() {
        Configurator.setLevel("me.moomoo.anarchyexploitfixes.libs.reflections.Reflections", Level.OFF);
        PacketEvents.setAPI(SpigotPacketEventsBuilder.build(this));
        PacketEvents.getAPI().getSettings().reEncodeByDefault(false).checkForUpdates(false).bStats(false);
        PacketEvents.getAPI().load();
    }

    @Override
    public void onEnable() {
        instance = this;
        prefixedLogger = ComponentLogger.logger(getLogger().getName());
        unPrefixedLogger = ComponentLogger.logger("");
        cachingPermTool = CachingPermTool.enable(this);
        metrics = new Metrics(this, 8700);

        // Fancy enable
        prefixedLogger.info("                                                          ");
        prefixedLogger.info("                                                          ");
        prefixedLogger.info("     █████  ███████ ███████                               ");
        prefixedLogger.info("    ██   ██ ██      ██             AnarchyExploitFixes    ");
        prefixedLogger.info("    ███████ █████   █████            Made by moom0o       ");
        prefixedLogger.info("    ██   ██ ██      ██             Rewritten by xGinko    ");
        prefixedLogger.info("    ██   ██ ███████ ██                                    ");
        prefixedLogger.info("                                                          ");
        prefixedLogger.info("                                                          ");

        // Check for paper as the api is needed for this plugin
        if (!PaperLib.isPaper()) {
            prefixedLogger.error("##########################################################");
            prefixedLogger.error("#                                                        #");
            prefixedLogger.error("#                         ERROR                          #");
            prefixedLogger.error("#                                                        #");
            prefixedLogger.error("#    This plugin requires at least a paper or paper      #");
            prefixedLogger.error("#                      fork server.                      #");
            prefixedLogger.error("#                                                        #");
            prefixedLogger.error("##########################################################");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        prefixedLogger.info("Detected Version 1." + PaperLib.getMinecraftVersion() + "." + PaperLib.getMinecraftPatchVersion());

        try {
            Class.forName("io.papermc.paper.threadedregions.RegionizedServer");
            prefixedLogger.info("Detected Folia server");
            isServerFolia = true;
        } catch (ClassNotFoundException e) {
            isServerFolia = false;
        }

        try {
            getDataFolder().mkdirs();
        } catch (Exception e) {
            prefixedLogger.trace("Failed to create plugin folder!", e);
            getServer().getPluginManager().disablePlugin(this);
        }

        prefixedLogger.info("Loading Translations");
        reloadLang();

        prefixedLogger.info("Loading Modules");
        reloadConfiguration();

        prefixedLogger.info("Registering Commands");
        AEFCommand.registerCommands();

        prefixedLogger.info("Initializing PacketEvents");
        PacketEvents.getAPI().init();

        prefixedLogger.info("Ready.");
    }

    @Override
    public void onDisable() {
        AEFModule.enabledModules.forEach(AEFModule::disable);
        AEFModule.enabledModules.clear();
        PacketEvents.getAPI().terminate();
        if (metrics != null) {
            metrics.shutdown();
            metrics = null;
        }
        if (cachingPermTool != null) {
            cachingPermTool.shutdown();
            cachingPermTool = null;
        }
        instance = null;
        config = null;
        languageCacheMap = null;
        cachedTickData = null;
        prefixedLogger = null;
    }

    public static AnarchyExploitFixes getInstance()  {
        return instance;
    }
    public static CachedTickData getTickData() {
        return cachedTickData;
    }
    public static Config getConfiguration() {
        return config;
    }
    public static ComponentLogger getPrefixedLogger() {
        return prefixedLogger;
    }
    public static ComponentLogger getUnprefixedLogger() {
        return unPrefixedLogger;
    }
    public static LanguageCache getLang(Locale locale) {
        return getLang(locale.toString().toLowerCase());
    }
    public static LanguageCache getLang(CommandSender commandSender) {
        return commandSender instanceof Player player ? getLang(player.locale()) : getLang(config.default_lang);
    }
    public static LanguageCache getLang(String lang) {
        if (!config.auto_lang) return languageCacheMap.get(config.default_lang.toString().toLowerCase());
        return languageCacheMap.getOrDefault(lang.replace("-", "_"), languageCacheMap.get(config.default_lang.toString().toLowerCase()));
    }
    public static boolean isServerFolia() {
        return isServerFolia;
    }

    public void reloadPlugin() {
        reloadLang();
        reloadConfiguration();
    }

    private void reloadConfiguration() {
        try {
            config = new Config();
            cachedTickData = CachedTickData.create(config.tickData_cache_duration);
            AEFModule.reloadModules();
            config.saveConfig();
        } catch (Exception e) {
            prefixedLogger.error("Failed loading config!", e);
        }
    }

    private void reloadLang() {
        languageCacheMap = new HashMap<>();
        try {
            File langDirectory = new File(getDataFolder() + "/lang");
            Files.createDirectories(langDirectory.toPath());
            for (String fileName : getDefaultLanguageFiles()) {
                final String localeString = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.'));
                prefixedLogger.info("Found language file for " + localeString);
                languageCacheMap.put(localeString, new LanguageCache(localeString));
            }
            final Pattern langPattern = Pattern.compile("([a-z]{1,3}_[a-z]{1,3})(\\.yml)", Pattern.CASE_INSENSITIVE);
            for (File langFile : langDirectory.listFiles()) {
                final Matcher langMatcher = langPattern.matcher(langFile.getName());
                if (langMatcher.find()) {
                    final String localeString = langMatcher.group(1).toLowerCase();
                    if (!languageCacheMap.containsKey(localeString)) { // make sure it wasn't a default file that we already loaded
                        prefixedLogger.info("Found language file for " + localeString);
                        languageCacheMap.put(localeString, new LanguageCache(localeString));
                    }
                }
            }
        } catch (Throwable t) {
            prefixedLogger.error("Error loading language files!", t);
        }
    }

    private Set<String> getDefaultLanguageFiles() {
        try (final JarFile pluginJarFile = new JarFile(this.getFile())) {
            return pluginJarFile.stream()
                    .map(ZipEntry::getName)
                    .filter(name -> name.startsWith("lang/") && name.endsWith(".yml"))
                    .collect(Collectors.toSet());
        } catch (IOException e) {
            prefixedLogger.error("Failed getting default lang files!", e);
            return Collections.emptySet();
        }
    }
}