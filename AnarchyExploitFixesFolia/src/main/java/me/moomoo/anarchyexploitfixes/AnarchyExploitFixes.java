package me.moomoo.anarchyexploitfixes;

import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.commands.AnarchyExploitFixesCommand;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bstats.bukkit.Metrics;
import org.bukkit.command.CommandSender;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.util.*;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class AnarchyExploitFixes extends JavaPlugin {

    private static AnarchyExploitFixes instance;
    private static Logger logger;
    private static Config config;
    private static HashMap<String, LanguageCache> languageCacheMap;
    private static int minorMCVersion = Integer.MIN_VALUE;

    public double tps = 20;

    public final HashSet<UUID> connectionMsgs = new HashSet<>();
    public final HashSet<UUID> playersInNewChunks = new HashSet<>();
    public final HashMap<UUID, HashSet<String>> playersAndTheirMessages = new HashMap<>();

    @Override
    public void onEnable() {
        instance = this;
        logger = getLogger();

        // Fancy enable
        logger.info("                                                          ");
        logger.info("                                                          ");
        logger.info("     █████  ███████ ███████                               ");
        logger.info("    ██   ██ ██      ██             AnarchyExploitFixes    ");
        logger.info("    ███████ █████   █████            Made by moom0o       ");
        logger.info("    ██   ██ ██      ██             Rewritten by xGinko    ");
        logger.info("    ██   ██ ███████ ██                                    ");
        logger.info("                                                          ");
        logger.info("                                                          ");

        if (!PaperLib.isPaper()) {
            logger.severe("##########################################################");
            logger.severe("#                                                        #");
            logger.severe("#                         ERROR                          #");
            logger.severe("#                                                        #");
            logger.severe("#    This plugin requires at least a paper or paper      #");
            logger.severe("#                      fork server.                      #");
            logger.severe("#                                                        #");
            logger.severe("##########################################################");
            getServer().getPluginManager().disablePlugin(this);
            return;
        }

        minorMCVersion = PaperLib.getMinecraftVersion();
        logger.info("Detected Version 1." + minorMCVersion + "." + PaperLib.getMinecraftPatchVersion());

        logger.info("Loading Translations");
        reloadLang();

        logger.info("Loading Config");
        reloadConfiguration();

        logger.info("Registering Commands");
        AnarchyExploitFixesCommand.reloadCommands();

        logger.info("Loading metrics");
        new Metrics(this, 8700);

        // Scheduled TPS checker
        Executors.newScheduledThreadPool(1).scheduleAtFixedRate(
                () -> new Thread(() -> tps = getServer().getTPS()[0]).start(), 1, 1, TimeUnit.SECONDS
        );

        logger.info("Done.");
    }

    public static LanguageCache getLang(String lang) {
        lang = lang.replace("-", "_");
        if (config.auto_lang) {
            return languageCacheMap.getOrDefault(lang, languageCacheMap.get(config.default_lang.toString().toLowerCase()));
        } else {
            return languageCacheMap.get(config.default_lang.toString().toLowerCase());
        }
    }

    public static LanguageCache getLang(Locale locale) {
        return getLang(locale.toString().toLowerCase());
    }

    public static LanguageCache getLang(CommandSender commandSender) {
        if (commandSender instanceof Player player) {
            return getLang(player.locale());
        } else {
            return getLang(config.default_lang);
        }
    }

    public void reloadPlugin() {
        reloadLang();
        reloadConfiguration();
        AnarchyExploitFixesCommand.reloadCommands();
    }

    private void reloadConfiguration() {
        try {
            config = new Config();
            AnarchyExploitFixesModule.reloadModules();
            config.saveConfig();
        } catch (Exception e) {
            logger.severe("Failed to load config file! - " + e.getLocalizedMessage());
            e.printStackTrace();
        }
    }

    private void reloadLang() {
        languageCacheMap = new HashMap<>();
        try {
            File langDirectory = new File(getDataFolder() + "/lang");
            Files.createDirectories(langDirectory.toPath());
            for (String fileName : getDefaultLanguageFiles()) {
                String localeString = fileName.substring(fileName.lastIndexOf('/') + 1, fileName.lastIndexOf('.'));
                logger.info(String.format("Found language file for %s", localeString));
                LanguageCache langCache = new LanguageCache(localeString);
                languageCacheMap.put(localeString, langCache);
            }
            Pattern langPattern = Pattern.compile("([a-z]{1,3}_[a-z]{1,3})(\\.yml)", Pattern.CASE_INSENSITIVE);
            for (File langFile : langDirectory.listFiles()) {
                Matcher langMatcher = langPattern.matcher(langFile.getName());
                if (langMatcher.find()) {
                    String localeString = langMatcher.group(1).toLowerCase();
                    if(!languageCacheMap.containsKey(localeString)) { // make sure it wasn't a default file that we already loaded
                        logger.info(String.format("Found language file for %s", localeString));
                        LanguageCache langCache = new LanguageCache(localeString);
                        languageCacheMap.put(localeString, langCache);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error loading language files! Language files will not reload to avoid errors, make sure to correct this before restarting the server!");
        }
    }

    private Set<String> getDefaultLanguageFiles() {
        Set<String> languageFiles = new HashSet<>();
        try {
            Enumeration<JarEntry> entries = new JarFile(this.getFile()).entries();
            while (entries.hasMoreElements()) {
                String path = entries.nextElement().getName();
                if (path.startsWith("lang/") && path.endsWith(".yml")) {
                    languageFiles.add(path);
                }
            }
            return languageFiles;
        } catch (IOException e) {
            logger.severe("Error while getting default language file names! - " + e.getLocalizedMessage());
            e.printStackTrace();
            return languageFiles;
        }
    }

    public static Set<String> getLoadedTranslationStrings() {
        return languageCacheMap.keySet();
    }

    public static AnarchyExploitFixes getInstance()  {
        return instance;
    }

    public static Config getConfiguration() {
        return config;
    }

    public static Logger getLog() {
        return logger;
    }

    public static int getMCVersion() {
        return minorMCVersion;
    }

    public static boolean isProtocolLibInstalled() {
        return instance.getServer().getPluginManager().isPluginEnabled("ProtocolLib");
    }
}
