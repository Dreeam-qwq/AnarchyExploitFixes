package me.moomoo.anarchyexploitfixes.config;

import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;

import java.io.File;
import java.util.List;
import java.util.Locale;
import java.util.Map;

public class Config {

    private final ConfigFile config;
    public final Locale default_lang;
    public final boolean auto_lang, protocolLib_IsDisabled, connectionMsgsAreOnByDefault, kickPhraseCommandIsEnabled;
    public final int nether_ceiling_max_y;
    public final Component sayCommandFormat;

    public Config() throws Exception {
        this.config = loadConfig(new File(AnarchyExploitFixes.getInstance().getDataFolder(), "config.yml"));
        structureConfig();

        // Language Settings
        this.default_lang = Locale.forLanguageTag(getString("language.default-language", "en_us", "The default language that will be used if auto-language is false or no matching language file was found.").replace("_", "-"));
        this.auto_lang = getBoolean("language.auto-language", true, "If set to true, will display messages based on client language");

        // General Settings
        this.protocolLib_IsDisabled = getBoolean("general.disable-all-ProtocolLib", false, "Use only if you are having problems with ProtocolLib when starting the plugin.");
        this.nether_ceiling_max_y = getInt("general.nether-ceiling-y", 127, "The Y-level at which the nether ceiling generates the last layer of bedrock on your server.");

        // Force config order
        config.addDefault("elytra.elytra-speed.display-actionbar", true, "Display info in Actionbar while flying.");
        config.addDefault("elytra.elytra-speed.display-chunk-info-in-actionbar", true, "Inform flying player if they are in old or new chunks.");
        config.addDefault("elytra.elytra-speed.play-sound-when-too-fast", true, "Plays XP pickup sound to alert players when theyre going above the limit.");
        config.addDefault("elytra.elytra-speed.teleport-instead-of-canceling-movement", false, "Recommended to leave false if you dont experience any issues.");

        // Misc
        this.sayCommandFormat = MiniMessage.miniMessage().deserialize(getString("misc.say-command-format", "<gray>SERVER: <gold>%message%", "Uses MiniMessage formatting."));
        config.addDefault("misc.join-leave-messages.enable", true); // add default here so enable option shows up first.
        this.connectionMsgsAreOnByDefault = getBoolean("misc.join-leave-messages.connection-messages-on-by-default", true, "default mode of /toggleconnectionmsgs");
        config.addDefault("misc.join-leave-messages.show-in-console", false); // add default here so show-in-console option is not misplaced.
        this.kickPhraseCommandIsEnabled = getBoolean("misc.enable-kickphrase-command", false, "Enable the /aef kickphrase <phrase> command.");
    }

    private ConfigFile loadConfig(File ymlFile) throws Exception {
        File parent = new File(ymlFile.getParent());
        if (!parent.exists())
            if (!parent.mkdir())
                AnarchyExploitFixes.getLog().severe("Unable to create plugin config directory.");
        if (!ymlFile.exists())
            ymlFile.createNewFile(); // Result can be ignored because this method only returns false if the file already exists
        return ConfigFile.loadConfig(ymlFile);
    }

    public void saveConfig() {
        try {
            config.save();
        } catch (Exception e) {
            AnarchyExploitFixes.getLog().severe("Failed to save config file! - " + e.getLocalizedMessage());
        }
    }

    private void structureConfig() {
        config.addDefault("config-version", 1.00);
        createTitledSection("Language", "language");
        createTitledSection("General", "general");
        createTitledSection("Patches", "patches");
        createTitledSection("Preventions", "preventions");
        createTitledSection("Lag Preventions", "lag-preventions");
        createTitledSection("Dupe Preventions", "dupe-preventions");
        createTitledSection("Combat", "combat");
        createTitledSection("Illegals", "illegals");
        createTitledSection("Chunk Limits", "chunk-limits");
        createTitledSection("Bedrock", "bedrock");
        createTitledSection("Elytra", "elytra");
        createTitledSection("Chat", "chat");
        createTitledSection("Miscellaneous", "misc");
        createTitledSection("1b1t Options", "1b1t-options");
    }

    public void createTitledSection(String title, String path) {
        config.addSection(title);
        config.addDefault(path, null);
    }

    public boolean getBoolean(String path, boolean def, String comment) {
        config.addDefault(path, def, comment);
        return config.getBoolean(path, def);
    }

    public boolean getBoolean(String path, boolean def) {
        config.addDefault(path, def);
        return config.getBoolean(path, def);
    }

    public String getString(String path, String def, String comment) {
        config.addDefault(path, def, comment);
        return config.getString(path, def);
    }

    public String getString(String path, String def) {
        config.addDefault(path, def);
        return config.getString(path, def);
    }

    public double getDouble(String path, Double def, String comment) {
        config.addDefault(path, def, comment);
        return config.getDouble(path, def);
    }

    public double getDouble(String path, Double def) {
        config.addDefault(path, def);
        return config.getDouble(path, def);
    }

    public int getInt(String path, int def, String comment) {
        config.addDefault(path, def, comment);
        return config.getInteger(path, def);
    }

    public int getInt(String path, int def) {
        config.addDefault(path, def);
        return config.getInteger(path, def);
    }

    public List<String> getList(String path, List<String> def, String comment) {
        config.addDefault(path, def, comment);
        return config.getStringList(path);
    }

    public List<String> getList(String path, List<String> def) {
        config.addDefault(path, def);
        return config.getStringList(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue) {
        config.addDefault(path, null);
        config.makeSectionLenient(path);
        defaultKeyValue.forEach((string, object) -> config.addExample(path+"."+string, object));
        return config.getConfigSection(path);
    }

    public ConfigSection getConfigSection(String path, Map<String, Object> defaultKeyValue, String comment) {
        config.addDefault(path, null, comment);
        config.makeSectionLenient(path);
        defaultKeyValue.forEach((string, object) -> config.addExample(path+string, object));
        return config.getConfigSection(path);
    }

    public void addComment(String path, String comment) {
        config.addComment(path, comment);
    }

    public void addComments(String path, String... comments) {
        config.addComments(path, comments);
    }
}
