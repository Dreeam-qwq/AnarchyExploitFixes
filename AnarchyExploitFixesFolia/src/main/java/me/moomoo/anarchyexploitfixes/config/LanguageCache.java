package me.moomoo.anarchyexploitfixes.config;

import io.github.thatsmusic99.configurationmaster.api.ConfigFile;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;

import java.io.File;
import java.util.List;

public class LanguageCache {

    private final ConfigFile lang;
    private final MiniMessage miniMessage;

    public final Component no_permission, chat_commandwhitelist_badcommand, options1b1t_youNeedToBeXBlocksAwayToTP,
            chat_antispam_slowmodeNotif, chat_antispam_tooManyMsgsNotif, chat_antispam_duplicateMsgsNotif, misc_joinMessage, misc_leaveMessage,
            misc_MaskedKickMessage, preventions_witherSpawningDisabledInRadius, misc_enabledConnectionMsgs, misc_disabledConnectionMsgs, elytra_disablePacketElytraFly,
            elytra_global_YouAreFlyingIn, elytra_global_New, elytra_global_New_UpperCase, elytra_global_New_Color, elytra_global_Old, elytra_global_Old_UpperCase,
            elytra_global_Old_Color, elytra_global_Speed, elytra_global_DisabledLowTPS, elytra_global_TooFastLowTPS, elytra_global_TooFastChunkInfo, elytra_disable_timer,
            elytra_global_TooFast, elytra_global_DisabledHere, elytra_global_Chunks, elytra_ceiling_DisabledHere, elytra_ceiling_Chunks, elytra_ceiling_YouAreFlyingIn,
            elytra_ceiling_New, elytra_ceiling_New_UpperCase, elytra_ceiling_New_Color, elytra_ceiling_Old, elytra_ceiling_Old_UpperCase, elytra_ceiling_Old_Color,
            elytra_ceiling_Speed, elytra_ceiling_DisabledLowTPS, elytra_ceiling_TooFastLowTPS, elytra_ceiling_TooFastChunkInfo, elytra_ceiling_TooFast, elytra_spawn_DisabledHere,
            elytra_spawn_YouAreFlyingIn, elytra_spawn_New, elytra_spawn_New_UpperCase, elytra_spawn_New_Color, elytra_spawn_Old, elytra_spawn_Old_UpperCase, elytra_spawn_Old_Color,
            elytra_spawn_Speed, elytra_spawn_DisabledLowTPS, elytra_spawn_TooFast, elytra_spawn_TooFastChunkInfo, elytra_spawn_Chunks, lagpreventions_stopSpammingLevers;
    public final List<Component> misc_firstJoinMessage, help_Message;

    public LanguageCache(String lang) throws Exception {
        this.lang = loadLang(new File(AnarchyExploitFixes.getInstance().getDataFolder() + File.separator + "lang", lang + ".yml"));
        this.miniMessage = MiniMessage.miniMessage();

        // No Permission
        this.no_permission = getTranslation("no-permission", "<red>You don't have permission to use this command.", false);
        // Chat
        this.chat_antispam_slowmodeNotif = getTranslation("chat.antispam.slowmode-notification", "<red>You need to wait a bit before sending another message.", false);
        this.chat_antispam_tooManyMsgsNotif = getTranslation("chat.antispam.too-many-messages-notification", "<red>You're sending too many messages at a time.", false);
        this.chat_antispam_duplicateMsgsNotif = getTranslation("chat.antispam.same-message-notification", "<red>You're sending too many duplicate messages at a time.", false);
        this.chat_commandwhitelist_badcommand = getTranslation("command-whitelist.bad-command", "<dark_red>Bad command. Type /help for a list of commands.", false);
        // Misc
        this.misc_joinMessage = getTranslation("join-leave-messages.join", "<gray>%player% joined the game.", false);
        this.misc_leaveMessage = getTranslation("join-leave-messages.leave", "<gray>%player% left the game.", false);
        this.misc_enabledConnectionMsgs = getTranslation("join-leave-messages.enabled-connection-msgs", "<gray>Enabled connection msgs", false);
        this.misc_disabledConnectionMsgs = getTranslation("join-leave-messages.disabled-connection-msgs", "<gray>Disabled connection msgs", false);
        this.misc_firstJoinMessage = getListTranslation(
                "join-leave-messages.first-join",
                List.of("<gray>%player% joined the game for the first time. They are %players_num% to join."),
                false,
                "%players_num% is how many players have joined the server, formatted to ordinal (ex. 351st). Ordinal format will switch based on locale."
        );
        this.misc_MaskedKickMessage = getTranslation("kicks.masked-kick-message", "<gold>Disconnected", false);
        // 1b1t Options
        this.options1b1t_youNeedToBeXBlocksAwayToTP = getTranslation("1b1t-options.you-need-to-be-x-blocks-away-to-tp", "&9You need to be %blocks% blocks away from spawn to teleport!", false);
        // Disable Wither Spawning at Spawn
        this.preventions_witherSpawningDisabledInRadius = getTranslation("withers.disabled-at-spawn", "<dark_red>Wither spawning is disabled in a radius of %radius% blocks around spawn.", false);
        /*
            Elytra
        */
        // Packet ElytraFly message
        this.elytra_disablePacketElytraFly = getTranslation("elytra.disable-packet-elytrafly", "<red>Disable Packet Elytra Fly.", false);
        // Timer ElytraFly message
        this.elytra_disable_timer = getTranslation("elytra.disable-timer", "<red>Disable Timer when traveling with an elytra.", false);
        // Global
        this.elytra_global_DisabledHere = getTranslation("elytra.elytra-speed.global.disabled-here", "<red>Elytras are currently disabled.", false);
        this.elytra_global_YouAreFlyingIn = getTranslation("elytra.elytra-speed.global.you-are-flying-in", "<gray>You are flying in %neworold% <gray>%chunks%", false);
        this.elytra_global_New = getTranslation("elytra.elytra-speed.global.new", "new", false);
        this.elytra_global_New_UpperCase = getTranslation("elytra.elytra-speed.global.new", "new", true);
        this.elytra_global_New_Color = getTranslation("elytra.elytra-speed.global.color-newchunks", "<dark_red>", false);
        this.elytra_global_Old = getTranslation("elytra.elytra-speed.global.old", "old", false);
        this.elytra_global_Old_UpperCase = getTranslation("elytra.elytra-speed.global.old", "old", true);
        this.elytra_global_Old_Color = getTranslation("elytra.elytra-speed.global.color-oldchunks", "<green>", false);
        this.elytra_global_Speed = getTranslation("elytra.elytra-speed.global.speed", "<gray>Speed: %speed% / %maxspeed%", false);
        this.elytra_global_DisabledLowTPS = getTranslation("elytra.elytra-speed.global.disabled-low-tps", "<red>Elytras are currently disabled because the tps is lower than %tps%.", false);
        this.elytra_global_TooFastLowTPS = getTranslation("elytra.elytra-speed.global.going-too-fast-low-tps", "<red>Elytra speed is reduced during low tps. Turn down your settings.", false);
        this.elytra_global_TooFastChunkInfo = getTranslation("elytra.elytra-speed.global.going-too-fast-chunkinfo", "<red>Turn down your settings. Elytra speed is restricted in %neworold% %chunks%", false);
        this.elytra_global_TooFast = getTranslation("elytra.elytra-speed.global.going-too-fast", "<red>Turn down your settings. Elytra speed is restricted on this server.", false);
        this.elytra_global_Chunks = getTranslation("elytra.elytra-speed.global.chunks", "chunks", false);
        // Nether Ceiling
        this.elytra_ceiling_DisabledHere = getTranslation("elytra.elytra-speed.nether-ceiling.disabled-here", "<red>Elytras are disabled on the nether ceiling.", false);
        this.elytra_ceiling_YouAreFlyingIn = getTranslation("elytra.elytra-speed.nether-ceiling.you-are-flying-in", "<gray>You are flying in %neworold% <gray>%chunks%", false);
        this.elytra_ceiling_New = getTranslation("elytra.elytra-speed.nether-ceiling.new", "new", false);
        this.elytra_ceiling_New_UpperCase = getTranslation("elytra.elytra-speed.nether-ceiling.new", "new", true);
        this.elytra_ceiling_New_Color = getTranslation("elytra.elytra-speed.nether-ceiling.color-newchunks", "<dark_red>", false);
        this.elytra_ceiling_Old = getTranslation("elytra.elytra-speed.nether-ceiling.old", "old", false);
        this.elytra_ceiling_Old_UpperCase = getTranslation("elytra.elytra-speed.nether-ceiling.old", "old", true);
        this.elytra_ceiling_Old_Color = getTranslation("elytra.elytra-speed.nether-ceiling.color-oldchunks", "<green>", false);
        this.elytra_ceiling_Speed = getTranslation("elytra.elytra-speed.nether-ceiling.speed", "<gray>Speed: %speed% / %maxspeed%", false);
        this.elytra_ceiling_DisabledLowTPS = getTranslation("elytra.elytra-speed.nether-ceiling.disabled-low-tps", "<red>Elytras are currently disabled because the tps is lower than %tps%.", false);
        this.elytra_ceiling_TooFastLowTPS = getTranslation("elytra.elytra-speed.nether-ceiling.going-too-fast-low-tps", "<red>Elytra speed is reduced during low tps. Turn down your settings.", false);
        this.elytra_ceiling_TooFastChunkInfo = getTranslation("elytra.elytra-speed.nether-ceiling.going-too-fast-chunkinfo", "<red>Turn down your settings. Elytra speed is restricted in %neworold% %chunks%", false);
        this.elytra_ceiling_TooFast = getTranslation("elytra.elytra-speed.nether-ceiling.going-too-fast", "<red>Turn down your settings. Elytra speed is restricted on the nether ceiling.", false);
        this.elytra_ceiling_Chunks = getTranslation("elytra.elytra-speed.nether-ceiling.chunks", "ceiling chunks", false);
        // Spawn
        this.elytra_spawn_DisabledHere = getTranslation("elytra.elytra-speed.spawn.disabled-here", "<red>Elytras are disabled in a range of <gold>%range% <red>blocks around spawn.", false);
        this.elytra_spawn_YouAreFlyingIn = getTranslation("elytra.elytra-speed.spawn.you-are-flying-in", "<gray>You are flying in %neworold% <gray>%chunks%", false);
        this.elytra_spawn_New = getTranslation("elytra.elytra-speed.spawn.new", "new", false);
        this.elytra_spawn_New_UpperCase = getTranslation("elytra.elytra-speed.spawn.new", "new", true);
        this.elytra_spawn_New_Color = getTranslation("elytra.elytra-speed.spawn.color-newchunks", "<dark_red>", false);
        this.elytra_spawn_Old = getTranslation("elytra.elytra-speed.spawn.old", "old", false);
        this.elytra_spawn_Old_UpperCase = getTranslation("elytra.elytra-speed.spawn.old", "old", true);
        this.elytra_spawn_Old_Color = getTranslation("elytra.elytra-speed.spawn.color-oldchunks", "<green>", false);
        this.elytra_spawn_Speed = getTranslation("elytra.elytra-speed.spawn.speed", "<gray>Speed: %speed% / %maxspeed%", false);
        this.elytra_spawn_DisabledLowTPS = getTranslation("elytra.elytra-speed.spawn.disabled-low-tps", "<red>Elytras are currently disabled because the tps is lower than %tps%.", false);
        this.elytra_spawn_TooFastChunkInfo = getTranslation("elytra.elytra-speed.spawn.going-too-fast-chunkinfo", "<red>Elytra speed is restricted in %neworold% %chunks% in a radius of %radius% blocks.", false);
        this.elytra_spawn_TooFast = getTranslation("elytra.elytra-speed.nether-ceiling.going-too-fast", "<red>Elytra speed is restricted in a radius of %radius% blocks around spawn.", false);
        this.elytra_spawn_Chunks = getTranslation("elytra.elytra-speed.spawn.chunks", "spawn chunks", false);
        // Lag Preventions
        this.lagpreventions_stopSpammingLevers = getTranslation("redstone.stop-spamming-levers", "<red>Stop spamming levers.", false);
        // Help Message
        this.help_Message = getListTranslation("commands.help-command", List.of(
                "<dark_aqua>----------------------------------------------------",
                "<gray>/toggleconnectionmsgs <dark_gray>- <gray>Turns off join messages",
                "<gray>/toggledeathmsgs <dark_gray>- <gray>Turns off death messages",
                "<gray>/toggletells <dark_gray>- <gray>Turns off private messages",
                "<gray>/togglechat <dark_gray>- <gray>Turns off chat messages",
                "<gray>/ignore <dark_gray>- <gray>Ignore certain players",
                "<gray>/seed <dark_gray>- <gray>Shows the server seed",
                "<gray>/kill <dark_gray>- <gray>Kills you",
                "<gray>/reply <dark_gray>- <gray>Reply to messages",
                "<gray>/msg <dark_gray>- <gray>Message other players",
                "<gray>/stats <dark_gray>- <gray>Shows world statistics",
                "<dark_aqua>----------------------------------------------------"
        ), false);

        saveLang();
    }

    private ConfigFile loadLang(File ymlFile) throws Exception {
        File parent = new File(ymlFile.getParent());
        if (!parent.exists())
            if (!parent.mkdir())
                AnarchyExploitFixes.getLog().severe("Unable to create lang directory.");
        if (!ymlFile.exists())
            ymlFile.createNewFile(); // Result can be ignored because this method only returns false if the file already exists
        return ConfigFile.loadConfig(ymlFile);
    }

    private void saveLang() {
        try {
            lang.save();
        } catch (Exception e) {
            AnarchyExploitFixes.getLog().severe("Failed to save language file: "+ lang.getFile().getName() +" - " + e.getLocalizedMessage());
        }
    }

    public Component getTranslation(String path, String defaultTranslation, boolean upperCase) {
        lang.addDefault(path, defaultTranslation);
        return miniMessage.deserialize(upperCase ? lang.getString(path, defaultTranslation).toUpperCase() : lang.getString(path, defaultTranslation));
    }

    public Component getTranslation(String path, String defaultTranslation, boolean upperCase, String comment) {
        lang.addDefault(path, defaultTranslation, comment);
        return miniMessage.deserialize(upperCase ? lang.getString(path, defaultTranslation).toUpperCase() : lang.getString(path, defaultTranslation));
    }

    public List<Component> getListTranslation(String path, List<String> defaultTranslation, boolean upperCase) {
        lang.addDefault(path, defaultTranslation);
        return lang.getStringList(path).stream().map(line -> miniMessage.deserialize(upperCase ? line.toUpperCase() : line)).toList();
    }

    public List<Component> getListTranslation(String path, List<String> defaultTranslation, boolean upperCase, String comment) {
        lang.addDefault(path, defaultTranslation, comment);
        return lang.getStringList(path).stream().map(line -> miniMessage.deserialize(upperCase ? line.toUpperCase() : line)).toList();
    }
}
