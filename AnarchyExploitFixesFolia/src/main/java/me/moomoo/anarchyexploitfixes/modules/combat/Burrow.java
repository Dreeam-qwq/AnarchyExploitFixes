package me.moomoo.anarchyexploitfixes.modules.combat;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtils;
import org.bukkit.GameMode;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;

public class Burrow implements AnarchyExploitFixesModule, Listener {

    private final double damageWhenMovingInBurrow;
    private final boolean shouldTeleportUp, preventIfBlockAboveBurrow, breakAnvilInsteadOfTP, allowSlabs;

    public Burrow() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.damageWhenMovingInBurrow = config.getDouble("combat.prevent-burrow.damage-when-moving",1.0, "1.0 = Half a heart of damage every time you move.");
        this.shouldTeleportUp = config.getBoolean("combat.prevent-burrow.teleport-above-block", true);
        this.preventIfBlockAboveBurrow = config.getBoolean("combat.prevent-burrow.prevent-if-block-above-burrow", false, "Prevent burrow even if there is a block above the block they are burrowing in, please note this may allow creating an \"elevator\", players will keep teleporting up until they hit air");
        this.breakAnvilInsteadOfTP = config.getBoolean("combat.prevent-burrow.break-anvil-instead-of-teleport", true);
        this.allowSlabs = config.getBoolean("combat.prevent-burrow.allow-slabs-in-burrow", true, "Needs to be enabled to prevent a bug where players are teleported above a slab when the slab is underwater, only happens in newer versions.");
    }

    @Override
    public String name() {
        return "prevent-burrow";
    }

    @Override
    public String category() {
        return "combat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("combat.prevent-burrow.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getGameMode().equals(GameMode.SURVIVAL)) return;
        
        final Location playerLocation = player.getLocation();
        final Block burrowBlock = playerLocation.getBlock();
        final Material burrowMaterial = burrowBlock.getType();

        if (
                burrowMaterial.equals(Material.AIR)
                || burrowMaterial.equals(Material.DIRT) // Fixes false positives when trampling farmland
                || burrowMaterial.equals(Material.SAND)
                || burrowMaterial.equals(Material.GRAVEL)
                || ItemUtils.isShulkerBox(burrowMaterial)
        ) return;

        if (preventIfBlockAboveBurrow || burrowBlock.getRelative(BlockFace.UP).getType().equals(Material.AIR)) {

            // Occluding Blocks
            if (burrowMaterial.isOccluding() && !isSinkInBlock(burrowMaterial)) {
                if (!allowSlabs || !isSlab(burrowMaterial)) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleportAsync(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
            }

            // Ender chest & Blocks that are slightly lower in height
            else if (burrowMaterial.equals(Material.ENDER_CHEST) || isSinkInBlock(burrowMaterial)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.875) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleportAsync(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
            }

            // Enchantment Table
            else if (burrowMaterial.equals(Material.ENCHANTING_TABLE)) {
                if (playerLocation.getY() - playerLocation.getBlockY() < 0.75) {
                    player.damage(damageWhenMovingInBurrow);
                    if (shouldTeleportUp) player.teleportAsync(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
            }

            // Anvil
            else if (isAnvil(burrowMaterial)) {
                player.damage(damageWhenMovingInBurrow);
                if (breakAnvilInsteadOfTP) {
                    burrowBlock.breakNaturally();
                } else {
                    if (shouldTeleportUp) player.teleportAsync(burrowBlock.getLocation().add(0.5, 1, 0.5));
                }
            }

            // Bedrock & Beacon
            else if (burrowMaterial.equals(Material.BEDROCK) || burrowMaterial.equals(Material.BEACON)) {
                player.damage(damageWhenMovingInBurrow);
                if (shouldTeleportUp) player.teleportAsync(burrowBlock.getLocation().add(0.5, 1, 0.5));
            }
        }
    }

    private static boolean isSinkInBlock(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        return switch (burrowBlockMaterial) {
            case SOUL_SAND, MUD, FARMLAND -> true;
            default -> false;
        };
    }

    private static boolean isAnvil(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        return switch (burrowBlockMaterial) {
            case ANVIL, CHIPPED_ANVIL, DAMAGED_ANVIL -> true;
            default -> false;
        };
    }

    private static boolean isSlab(Material burrowBlockMaterial) {
        if (burrowBlockMaterial == null) return false;
        return switch (burrowBlockMaterial) {
            case
                    ACACIA_SLAB, ANDESITE_SLAB, BAMBOO_MOSAIC_SLAB, BAMBOO_SLAB, BIRCH_SLAB, BLACKSTONE_SLAB,
                    BRICK_SLAB, COBBLED_DEEPSLATE_SLAB, COBBLESTONE_SLAB, CRIMSON_SLAB, CUT_COPPER_SLAB,
                    CUT_RED_SANDSTONE_SLAB, CUT_SANDSTONE_SLAB, DARK_OAK_SLAB, DARK_PRISMARINE_SLAB,
                    DEEPSLATE_BRICK_SLAB, DEEPSLATE_TILE_SLAB, DIORITE_SLAB, END_STONE_BRICK_SLAB,
                    EXPOSED_CUT_COPPER_SLAB, GRANITE_SLAB, JUNGLE_SLAB, MANGROVE_SLAB, MOSSY_COBBLESTONE_SLAB,
                    MOSSY_STONE_BRICK_SLAB, MUD_BRICK_SLAB, NETHER_BRICK_SLAB, OAK_SLAB, OXIDIZED_CUT_COPPER_SLAB,
                    PETRIFIED_OAK_SLAB, POLISHED_ANDESITE_SLAB, POLISHED_BLACKSTONE_BRICK_SLAB,
                    POLISHED_BLACKSTONE_SLAB, POLISHED_DEEPSLATE_SLAB, POLISHED_DIORITE_SLAB, POLISHED_GRANITE_SLAB,
                    PRISMARINE_BRICK_SLAB, PRISMARINE_SLAB, PURPUR_SLAB, QUARTZ_SLAB, RED_NETHER_BRICK_SLAB,
                    RED_SANDSTONE_SLAB, SANDSTONE_SLAB, SCULK_SENSOR, SCULK_SHRIEKER, SMOOTH_QUARTZ_SLAB,
                    SMOOTH_RED_SANDSTONE_SLAB, SMOOTH_SANDSTONE_SLAB, SMOOTH_STONE_SLAB, SPRUCE_SLAB, STONE_BRICK_SLAB,
                    STONE_SLAB, WARPED_SLAB, WAXED_CUT_COPPER_SLAB, WAXED_EXPOSED_CUT_COPPER_SLAB,
                    WAXED_OXIDIZED_CUT_COPPER_SLAB, WAXED_WEATHERED_CUT_COPPER_SLAB, WEATHERED_CUT_COPPER_SLAB,
                    CALIBRATED_SCULK_SENSOR
                    -> true;
            default -> false;
        };
    }
}
