package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;

import java.util.EnumSet;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.stream.Collectors;

public class BannedMaterials implements IllegalItemModule {

    private final Set<Material> bannedMaterials;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final int checkPeriod;
    private final boolean doSomething, checkStored, doPeriodicCheck, preventHopperBypass;

    public BannedMaterials() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Prevents usage of or deletes items with material that you do not want\n" +
                        "your players to be able to use.\n" +
                        "Useful if your players have blocks that shouldn't be obtainable in survival.");
        this.doSomething = config.getBoolean(configPath() + ".delete-item", false);
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.bannedMaterials = config.getList(configPath() + ".banned-materials", List.of(
                        "CHAIN_COMMAND_BLOCK",
                        "COMMAND_BLOCK",
                        "COMMAND_BLOCK_MINECART",
                        "REPEATING_COMMAND_BLOCK",
                        "BEDROCK",
                        "BARRIER",
                        "STRUCTURE_BLOCK",
                        "STRUCTURE_VOID",
                        "END_PORTAL_FRAME",
                        "END_PORTAL",
                        "NETHER_PORTAL",
                        "LIGHT"))
                .stream()
                .map(confMaterial -> {
                    try {
                        return Material.valueOf(confMaterial);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, confMaterial);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.doPeriodicCheck = config.getBoolean(configPath() + ".periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt(configPath() + ".periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String configPath() {
        return "illegals.ban-specific-materials";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = getHopperListener();
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (doPeriodicCheck) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(item -> handleItem(item, legalityOf(item))), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_BANNEDMATERIAL;
    }

    @Override
    public ItemLegality legalityOf(ItemStack itemStack) {
        if (itemStack == null) {
            return ItemLegality.LEGAL;
        }

        if (bannedMaterials.contains(itemStack.getType())) {
            return ItemLegality.ILLEGAL;
        }

        if (checkStored) {
            return legalityOf(ItemUtil.getStoredItems(itemStack));
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality legality) {
        if (!doSomething) return;

        if (legality != ItemLegality.LEGAL) {
            itemStack.setAmount(0);
        }
    }
}
