package me.moomoo.anarchyexploitfixes.modules.preventions.withers;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.World;
import org.bukkit.entity.WitherSkull;

public class RemoveSkullsAfterXTicks implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final long maxAgeInTicks, checkPeriod;

    public RemoveSkullsAfterXTicks() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.withers.remove-flying-wither-skulls.if-lived-longer-than-x-ticks.enable", "Remove wither skulls that have been flying for too long to prevent them from causing lag.");
        this.maxAgeInTicks = config.getInt("preventions.withers.remove-flying-wither-skulls.if-lived-longer-than-x-ticks.max-age-in-ticks", 200, "200 Ticks = 10 Seconds");
        this.checkPeriod = config.getInt("preventions.withers.remove-flying-wither-skulls.if-lived-longer-than-x-ticks.check-period-in-ticks", 40, "The delay in ticks until all skulls are checked for their alive time again.");
    }

    @Override
    public String name() {
        return "remove-flying-wither-skulls.if-lived-longer-than-x-ticks";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        Config config = AnarchyExploitFixes.getConfiguration();
        return (
                config.getBoolean("preventions.withers.remove-flying-wither-skulls.if-lived-longer-than-x-ticks.enable", true)
                && !config.getBoolean("preventions.withers.remove-flying-wither-skulls.remove-all-flying-skulls", false)
        );
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (WitherSkull witherSkull : world.getEntitiesByClass(WitherSkull.class)) {
                witherSkull.getScheduler().run(plugin, task -> {
                    if (witherSkull.getTicksLived() > maxAgeInTicks) {
                        witherSkull.remove();
                    }
                }, null);
            }
        }
    }
}
