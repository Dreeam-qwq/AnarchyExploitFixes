package me.moomoo.anarchyexploitfixes.modules.illegals.blocks;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.CreatureSpawner;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

public class RemoveUnnaturalSpawners implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<String, HashSet<EntityType>> naturalSpawners = new HashMap<>();
    private final boolean checkShouldPauseOnLowTPS;
    private final double pauseTPS;

    public RemoveUnnaturalSpawners() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-unnatural-spawners-on-chunkload.pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble("illegals.remove-unnatural-spawners-on-chunkload.pause-TPS", 14.0);

        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", List.of("SKELETON", "ZOMBIE", "SILVERFISH", "SPIDER", "CAVE_SPIDER"));
        defaults.put("world_nether", List.of("BLAZE", "MAGMA_CUBE"));
        defaults.put("world_the_end", List.of("SKELETON", "SPIDER"));

        ConfigSection section = config.getConfigSection("illegals.remove-unnatural-spawners-on-chunkload.natural-spawner-types-per-world", defaults, "You can add or remove as much world names here as you want.");
        for (String configuredWorlds : section.getKeys(false)) {
            HashSet<EntityType> naturalSpawnerTypes = new HashSet<>();
            for (Object configuredSpawnerType : section.getList(configuredWorlds)) {
                String configuredSpawnerEntityType = String.valueOf(configuredSpawnerType);
                try {
                    EntityType spawnerType = EntityType.valueOf(configuredSpawnerEntityType);
                    naturalSpawnerTypes.add(spawnerType);
                } catch (IllegalArgumentException e) {
                    LogUtils.entityTypeNotRecognized(Level.WARNING, name(), configuredSpawnerEntityType);
                }
            }
            this.naturalSpawners.put(configuredWorlds, naturalSpawnerTypes);
        }
    }

    @Override
    public String name() {
        return "remove-unnatural-spawners-on-chunkload";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-unnatural-spawners-on-chunkload.enable", false) && !naturalSpawners.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk() || (checkShouldPauseOnLowTPS && (plugin.tps <= pauseTPS))) return;

        Chunk chunk = event.getChunk();
        World world = chunk.getWorld();
        if (!naturalSpawners.containsKey(world.getName())) return;

        final int minY = world.getMinHeight();
        final int maxY = world.getMaxHeight();

        plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
            for (int x = 0; x < 16; x++) {
                for (int z = 0; z < 16; z++) {
                    for (int y = minY; y < maxY; y++) {
                        Block block = chunk.getBlock(x, y, z);
                        if (block.getType().equals(Material.SPAWNER)) {
                            if (!naturalSpawners.get(world.getName()).contains(((CreatureSpawner) block.getState()).getSpawnedType())) {
                                block.setType(Material.AIR, false);
                            }
                        }
                    }
                }
            }
        });
    }
}
