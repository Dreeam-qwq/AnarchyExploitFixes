package me.moomoo.anarchyexploitfixes.modules.patches;

import io.papermc.paper.event.player.PlayerSignCommandPreprocessEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;

public class CommandSign implements AEFModule, Listener {

    public CommandSign() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().addComment(configPath() + ".enable", """
                        Patch signs that have run_command NBT tags attached, allowing them to run a command/s
                        with operator permissions on click./s
                        Creating them requires operator permissions. Therefore enable only if you had a rogue admin or backdoor incident.""");
    }

    @Override
    public String configPath() {
        return "patches.prevent-command-sign";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onSignCommand(PlayerSignCommandPreprocessEvent event) {
        if (!CachingPermTool.hasPermission(AEFPermission.BYPASS_PREVENTION_COMMANDSIGN, event.getPlayer())) {
            event.setCancelled(true);
        }
    }
}
