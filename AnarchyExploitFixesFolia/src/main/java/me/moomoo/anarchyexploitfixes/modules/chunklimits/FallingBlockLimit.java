package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Chunk;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPhysicsEvent;
import org.bukkit.event.entity.EntityChangeBlockEvent;
import org.bukkit.event.world.ChunkUnloadEvent;

import java.util.HashMap;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class FallingBlockLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<String, Long> checkedChunks = new HashMap<>();
    private final int maxFallingGravityBlockPerChunk;
    private final boolean logIsEnabled;
    private final long chunkCheckDelay;

    public FallingBlockLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.falling-block-limit.enable", "Prevent players from placing massive sand chunks and killing the server.");
        this.logIsEnabled = config.getBoolean("chunk-limits.falling-block-limit.log", false);
        this.maxFallingGravityBlockPerChunk = config.getInt("chunk-limits.falling-block-limit.max-falling-gravitiy-blocks-per-chunk", 60, "Removes any falling block if there is more than x blocks (actively) falling in a chunk.");
        this.chunkCheckDelay = config.getInt("chunk-limits.falling-block-limit.chunk-check-delay-in-ticks", 20, "Delay in ticks until the same chunk can be checked again (avoids overchecking because a physics event can be called multiple times for the same chunk)") * 50L;
    }

    @Override
    public String name() {
        return "falling-block-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.falling-block-limit.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPhysics(BlockPhysicsEvent event) {
        Chunk chunk = event.getBlock().getChunk();
        String chunkUID = chunk.getWorld().getName() + chunk.getChunkKey();

        if (
                !checkedChunks.containsKey(chunkUID)
                || checkedChunks.get(chunkUID) <= System.currentTimeMillis()
        ) {
            int count = 0;
            boolean removed_falling = false;

            for (Entity entity : chunk.getEntities()) {
                if (entity.getType().equals(EntityType.FALLING_BLOCK)) {
                    count++;
                    if (count > maxFallingGravityBlockPerChunk) {
                        entity.getScheduler().run(plugin, kill -> entity.remove(), null);
                        removed_falling = true;
                    }
                }
            }

            if (logIsEnabled && removed_falling) moduleLog(Level.INFO, name(),
                    "Removed falling blocks at " + event.getSourceBlock().getLocation()
                            + ", because reached limit of " + maxFallingGravityBlockPerChunk + " falling gravity blocks per chunk"
            );

            checkedChunks.put(chunkUID, System.currentTimeMillis() + chunkCheckDelay);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChangeBlock(EntityChangeBlockEvent event) {
        if (!event.getEntityType().equals(EntityType.FALLING_BLOCK)) return;

        Chunk chunk = event.getBlock().getChunk();
        String chunkId = chunk.getWorld().getName() + chunk.getChunkKey();

        if (
                !checkedChunks.containsKey(chunkId)
                || checkedChunks.get(chunkId) <= System.currentTimeMillis()
        ) {
            int count = 0;
            boolean removed_falling = false;

            for (Entity entity : chunk.getEntities()) {
                if (entity.getType().equals(EntityType.FALLING_BLOCK)) {
                    count++;
                    if (count > maxFallingGravityBlockPerChunk) {
                        entity.getScheduler().run(plugin, kill -> entity.remove(), null);
                        removed_falling = true;
                    }
                }
            }

            if (logIsEnabled && removed_falling) moduleLog(Level.INFO, name(),
                    "Removed falling blocks at " + event.getBlock().getLocation()
                            + ", because reached limit of " + maxFallingGravityBlockPerChunk + " falling gravity blocks per chunk"
            );

            checkedChunks.put(chunkId, System.currentTimeMillis() + chunkCheckDelay);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkUnload(ChunkUnloadEvent event) {
        checkedChunks.remove(String.valueOf(event.getChunk().getWorld().getUID()) + event.getChunk().getChunkKey());
    }
}
