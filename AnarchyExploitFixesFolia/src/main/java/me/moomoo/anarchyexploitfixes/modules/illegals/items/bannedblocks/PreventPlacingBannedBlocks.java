package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

public class PreventPlacingBannedBlocks implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> bannedItems = new HashSet<>();

    public PreventPlacingBannedBlocks() {
        shouldEnable();
        AnarchyExploitFixes.getConfiguration().getList("illegals.ban-specific-blocks.banned-blocks", List.of(
                "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
        )).forEach(configuredBlock -> {
            try {
                Material bannedMaterial = Material.valueOf(configuredBlock);
                this.bannedItems.add(bannedMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
            }
        });
    }

    @Override
    public String name() {
        return "ban-specific-blocks.prevent-placing";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.prevent-placing", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        final Material placedType = event.getBlock().getType();
        if (bannedItems.contains(placedType)) {
            if (!(placedType.equals(Material.END_PORTAL_FRAME) && event.getPlayer().getInventory().getItemInMainHand().getType().equals(Material.ENDER_EYE))) {
                event.setCancelled(true);
            }
        }
    }
}
