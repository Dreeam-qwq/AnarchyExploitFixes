package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.modules.illegals.items.IllegalItemModule;
import me.moomoo.anarchyexploitfixes.utils.ItemUtil;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.inventory.ItemStack;

import java.util.*;
import java.util.stream.Collectors;

public class HigherEnchants implements IllegalItemModule {

    private final Set<Enchantment> specificEnchants;
    private final Set<Material> whitelistedTypes;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final long checkPeriod;
    private final boolean useWhitelist, blacklistMode, doPeriodicCheck, checkStored, preventHopperBypass, doSomething, onlySomeEnchants;

    @SuppressWarnings("deprecation")
    public HigherEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Reverts or prevents usage of ItemStacks with Enchantments higher than the natural,\n" +
                        "in vanilla survival obtainable level (aka 32ks / 255s).");
        this.checkStored = config.getBoolean(configPath() + ".check-stored-items", false);
        this.doSomething = config.getBoolean(configPath() + ".delete-or-revert-item", true,
                "Bundles or shulkers will be deleted if you have check-stored-items enabled.");
        this.onlySomeEnchants = config.getBoolean(configPath() + ".only-specific-enchants", false);
        this.specificEnchants = config.getList(configPath() + ".specific-enchants", List.of("DIG_SPEED"))
                .stream()
                .map(configuredEnchant -> {
                    final Enchantment enchantment = Enchantment.getByName(configuredEnchant);
                    if (enchantment == null) notRecognized(Enchantment.class, configuredEnchant);
                    return enchantment;
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(HashSet::new));
        this.useWhitelist = config.getBoolean(configPath() + ".item-whitelist-enabled", true);
        this.blacklistMode = config.getBoolean(configPath() + ".use-as-blacklist-instead", false);
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items", List.of("GOLDEN_APPLE"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
        this.preventHopperBypass = config.getBoolean(configPath() + ".prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.doPeriodicCheck = config.getBoolean(configPath() + ".periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt(configPath() + ".periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String configPath() {
        return "illegals.enchantments.higher-enchants";
    }

    @Override
    public void enable() {
        final AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();

        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = getHopperListener();
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (doPeriodicCheck) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check ->
                    plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                            player.getInventory().forEach(item -> handleItem(item, determineLegality(item))), null)), checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_ENCHANT_HIGHER;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (itemStack == null || itemStack.getType().isAir()) {
            return ItemLegality.LEGAL;
        }

        if (!useWhitelist || blacklistMode == whitelistedTypes.contains(itemStack.getType())) {
            for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
                if (!onlySomeEnchants || specificEnchants.contains(enchant.getKey())) {
                    if (enchant.getValue() > enchant.getKey().getMaxLevel()) {
                        return ItemLegality.ILLEGAL;
                    }
                }
            }
        }

        if (checkStored) {
            Iterable<ItemStack> storedItems = ItemUtil.getStoredItems(itemStack);
            if (storedItems != null) {
                for (ItemStack stored : storedItems) {
                    if (determineLegality(stored) != ItemLegality.LEGAL) {
                        return ItemLegality.CONTAINS_ILLEGAL;
                    }
                }
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (!doSomething) return;

        switch (checkResult) {
            case CONTAINS_ILLEGAL -> itemStack.setAmount(0);
            case ILLEGAL -> {
                for (Map.Entry<Enchantment, Integer> enchant : itemStack.getEnchantments().entrySet()) {
                    if (enchant.getValue() > enchant.getKey().getMaxLevel()) {
                        itemStack.removeEnchantment(enchant.getKey());
                        itemStack.addUnsafeEnchantment(enchant.getKey(), enchant.getKey().getMaxLevel());
                    }
                }
            }
        }
    }
}
