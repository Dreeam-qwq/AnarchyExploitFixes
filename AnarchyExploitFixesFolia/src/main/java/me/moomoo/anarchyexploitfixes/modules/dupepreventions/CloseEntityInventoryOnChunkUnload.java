package me.moomoo.anarchyexploitfixes.modules.dupepreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Entity;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkUnloadEvent;
import org.bukkit.inventory.InventoryHolder;

public class CloseEntityInventoryOnChunkUnload implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;

    public CloseEntityInventoryOnChunkUnload() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AnarchyExploitFixes.getConfiguration().addComment("dupe-preventions.close-entity-inventories-on-chunk-unload", "Closes open inventories of all entities that are in a chunk that will be unloaded.");
    }

    @Override
    public String name() {
        return "close-entity-inventories-on-chunk-unload";
    }

    @Override
    public String category() {
        return "dupe-preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("dupe-preventions.close-entity-inventories-on-chunk-unload", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.LOW)
    private void onChunkUnload(ChunkUnloadEvent event) {
        for (Entity entity : event.getChunk().getEntities()) {
            if (entity instanceof InventoryHolder inventoryHolder) {
                entity.getScheduler().run(plugin, task -> {
                    for (HumanEntity viewer : inventoryHolder.getInventory().getViewers()) {
                        viewer.getScheduler().run(plugin, closeInv -> viewer.closeInventory(), null);
                    }
                }, null);
            }
        }
    }
}
