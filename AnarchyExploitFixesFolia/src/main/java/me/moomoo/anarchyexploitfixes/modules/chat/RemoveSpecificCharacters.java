package me.moomoo.anarchyexploitfixes.modules.chat;

import io.papermc.paper.event.player.AsyncChatEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;

import java.util.HashSet;
import java.util.List;

public class RemoveSpecificCharacters implements AnarchyExploitFixesModule, Listener {

    private final HashSet<String> charactersToRemove = new HashSet<>();

    public RemoveSpecificCharacters() {
        shouldEnable();
        this.charactersToRemove.addAll(AnarchyExploitFixes.getConfiguration().getList(
                "chat.remove-specific-characters.character-list", List.of("·", "•", "@")));
    }

    @Override
    public String name() {
        return "remove-specific-characters";
    }

    @Override
    public String category() {
        return "chat";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chat.remove-specific-characters.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerChat(AsyncChatEvent event) {
        if (event.getPlayer().hasPermission("anarchyexploitfixes.chatbypass")) return;

        Component message = event.message();
        for (String character : charactersToRemove) {
            message = message.replaceText(TextReplacementConfig.builder().matchLiteral(character).replacement(Component.empty()).build());
        }

        if (message.equals(Component.empty())) {
            event.setCancelled(true);
        } else {
            event.message(message);
        }
    }
}
