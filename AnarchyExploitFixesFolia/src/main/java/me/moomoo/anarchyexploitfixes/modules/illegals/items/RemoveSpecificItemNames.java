package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.minimessage.MiniMessage;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;

public class RemoveSpecificItemNames implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private Listener hopperListener;
    private final HashSet<String> colorInsensitiveNames = new HashSet<>();
    private final HashSet<Component> colorSensitiveNames = new HashSet<>();
    private final boolean preventHopperBypass;

    public RemoveSpecificItemNames() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.remove-specific-item-names.enable", "Resets an item's name if configured in the config.");
        this.colorInsensitiveNames.addAll(config.getList("illegals.remove-specific-item-names.color-insensitive-item-names",
                List.of("Super Insane Mega Sussy Item")));
        config.getList("illegals.remove-specific-item-names.color-sensitive-item-names",
                List.of("<bold><aqua>PvP KIT V2")
        ).forEach(entry -> this.colorSensitiveNames.add(MiniMessage.miniMessage().deserialize(entry)));
        this.preventHopperBypass = config.getBoolean("illegals.remove-specific-item-names.prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
    }

    @Override
    public String name() {
        return "remove-items-with-specific-names";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    Component itemName = event.getItem().displayName();
                    if (
                            colorInsensitiveNames.contains(PlainTextComponentSerializer.plainText().serialize(itemName))
                            || colorSensitiveNames.contains(itemName)
                    ) event.setCancelled(true);
                }
            };
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-specific-item-names.enable", false);
    }

    @Override
    public void disable() {
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    private void handleBannedItemNamesIfPresent(ItemStack item) {
        if (item == null || !item.hasItemMeta()) return;
        Component itemName = item.displayName();
        if (
                colorInsensitiveNames.contains(PlainTextComponentSerializer.plainText().serialize(itemName))
                || colorSensitiveNames.contains(itemName)
        ) {
            item.getItemMeta().displayName(null);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        player.getInventory().forEach(this::handleBannedItemNamesIfPresent);
        player.getEnderChest().forEach(this::handleBannedItemNamesIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBannedItemNamesIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedItemNamesIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleBannedItemNamesIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        event.getInventory().forEach(this::handleBannedItemNamesIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        HumanEntity player = event.getWhoClicked();
        player.getScheduler().runDelayed(plugin, checkInvAfterClick -> {
            handleBannedItemNamesIfPresent(event.getCursor());
            handleBannedItemNamesIfPresent(event.getCurrentItem());
            event.getInventory().forEach(this::handleBannedItemNamesIfPresent);
            player.getInventory().forEach(this::handleBannedItemNamesIfPresent);
        }, null, 1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        event.getInventory().forEach(this::handleBannedItemNamesIfPresent);
    }
}
