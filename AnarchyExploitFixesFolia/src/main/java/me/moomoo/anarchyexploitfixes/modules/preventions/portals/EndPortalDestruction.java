package me.moomoo.anarchyexploitfixes.modules.preventions.portals;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockDispenseEvent;
import org.bukkit.event.block.BlockPistonRetractEvent;
import org.bukkit.event.entity.EntityExplodeEvent;
import org.bukkit.event.player.PlayerBucketEmptyEvent;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isPiston;

public class EndPortalDestruction implements AnarchyExploitFixesModule,Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<Location> pillars = new HashSet<>();
    private final boolean logIsEnabled;
    private static final BlockFace[] cardinalDirections = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };

    public EndPortalDestruction() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean("preventions.portals.prevent-destroying-end-portals.log", true);
        config.getList("preventions.portals.prevent-destroying-end-portals.pillar-blocks",
                List.of("world_the_end:143:140:-50", "world_the_end:112:90:-90"),
                "Add block locations that should be protected as well.\nFormat: <worldname>:<x>:<y>:<z>" +
                        "\nIf you don't want to use this, just configure and empty list using: pillar-blocks: []"
        ).forEach(entry -> {
            String[] location = entry.split(":");
            try {
                this.pillars.add(new Location(
                        plugin.getServer().getWorld(location[0]),
                        Double.parseDouble(location[1]),
                        Double.parseDouble(location[2]),
                        Double.parseDouble(location[3])
                ).toBlockLocation());
            } catch (NumberFormatException e) {
                LogUtils.moduleLog(Level.WARNING, name(), "Failed to read coordinates. Are all values valid doubles?");
            } catch (NullPointerException e) {
                LogUtils.moduleLog(Level.WARNING, name(), "Failed to parse location. Is the world name correct and the proper format being used?\"");
            }
        });
    }

    @Override
    public String name() {
        return "prevent-destroying-end-portals";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.portals.prevent-destroying-end-portals.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onBlockDispense(BlockDispenseEvent event) {
        final String dispenseMaterial = event.getItem().getType().toString();
        if (
                dispenseMaterial.endsWith("_BUCKET") && !dispenseMaterial.startsWith("MILK")
                && event.getVelocity().clone().toLocation(event.getBlock().getWorld()).getBlock().getType().equals(Material.END_PORTAL)
        ) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Prevented a dispenser from destroying an end portal!");
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerBucketEvent(PlayerBucketEmptyEvent event) {
        if (event.getBlockClicked().getRelative(event.getBlockFace()).getType().equals(Material.END_PORTAL)) {
            event.setCancelled(true);
            if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(),"Prevented "+event.getPlayer().getName()+" from destroying an end portal!");
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonRetract(BlockPistonRetractEvent event) {
        /*
        *  Patches TNT-Less bedrock mining using pistons, redstone torches and eff 5 pickaxes:
        *  https://github.com/rockerle/BedrockMiner
        * */

        final Block block_that_could_get_removed = event.getBlock().getRelative(event.getDirection().getOppositeFace());

        if (isEndPortal(block_that_could_get_removed.getType()) || pillars.contains(block_that_could_get_removed.getLocation())) {
            event.setCancelled(true);
        } else for (BlockFace blockFace : BlockFace.values()) {
            if (
                    isEndPortal(block_that_could_get_removed.getRelative(blockFace).getType())
                    || isEndPortal(block_that_could_get_removed.getRelative(blockFace, 2).getType())
            ) {
                event.setCancelled(true);
                return;
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        HashSet<Block> pistons_that_could_break_portals = new HashSet<>();

        for (Block potentialPistonPart : event.blockList()) {
            if (!isPiston(potentialPistonPart.getType())) continue;

            for (BlockFace blockFace : BlockFace.values()) {
                if (
                        isEndPortal(potentialPistonPart.getRelative(blockFace).getType())
                        || isEndPortal(potentialPistonPart.getRelative(blockFace, 2).getType())
                        || pillars.contains(potentialPistonPart.getRelative(blockFace).getLocation())
                ) {
                    pistons_that_could_break_portals.add(potentialPistonPart);
                    plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), removePiston ->
                            potentialPistonPart.setType(Material.AIR)
                    );

                    for (BlockFace cardinalDirection : cardinalDirections) {
                        Block potentialExtendedPistonPart = potentialPistonPart.getRelative(cardinalDirection);
                        if (isPiston(potentialExtendedPistonPart.getType())) {
                            plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), removePistonExtension ->
                                    potentialExtendedPistonPart.setType(Material.AIR)
                            );
                        }
                    }
                }
            }
        }

        if (!pistons_that_could_break_portals.isEmpty()) {
            event.blockList().removeAll(pistons_that_could_break_portals);
            for (Block block : pistons_that_could_break_portals) {
                plugin.getServer().getRegionScheduler().runDelayed(plugin, block.getLocation(), task -> block.setType(Material.AIR), 5);
            }
        }
    }

    private boolean isEndPortal(Material material) {
        return material.equals(Material.END_PORTAL_FRAME) || material.equals(Material.END_PORTAL);
    }
}
