package me.moomoo.anarchyexploitfixes.modules.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import static me.moomoo.anarchyexploitfixes.utils.ElytraUtils.*;

public class ElytraGlobal implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private final int spawn_Radius;
    private final double global_SpeedOldChunks, global_SpeedNewChunks, global_BurstSpeedOldChunks,
            global_BurstSpeedNewChunks, global_BurstOldChunk_TPS, global_BurstNewChunk_TPS, global_DenyElytraTPS;
    private final boolean showActionbarMsgs, displayChunkInfo, playNotifSound, teleportBack, spawn_SettingsEnabled,
            global_shouldCheckPermission, ceiling_SettingsEnabled, global_DenyElytra, global_EnableBursting, 
            global_DenyOnLowTPS, global_AlsoRemoveOnLowTPS;

    public ElytraGlobal() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        this.playNotifSound = config.getBoolean("elytra.elytra-speed.play-sound-when-too-fast", true);
        this.teleportBack = config.getBoolean("elytra.elytra-speed.teleport-instead-of-canceling-movement", false);
        config.addComment("elytra.elytra-speed", "NOTE: Set nocheatplus horizontal elytra settings to 999999");
        config.addComment("elytra.elytra-speed.Global-Settings.enable", "Global settings. If nothing else is enabled, this will be used for all environments.");
        this.spawn_SettingsEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_Radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.ceiling_SettingsEnabled = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);
        this.global_shouldCheckPermission = config.getBoolean("elytra.elytra-speed.Global-Settings.use-bypass-permission", false,
                "Can be slow with a lot of players. Enable only if needed.");
        this.global_DenyElytra = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-usage", false);
        this.global_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-old-chunks", 1.81);
        this.global_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.speed-new-chunks", 1.81);
        this.global_EnableBursting = config.getBoolean("elytra.elytra-speed.Global-Settings.enable-bursting", true);
        this.global_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunks", 5.0);
        this.global_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-old-chunk-TPS", 18.0);
        this.global_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunks", 3.12);
        this.global_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Global-Settings.burst-speed-new-chunk-TPS", 19.0);
        this.global_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.deny-elytra-on-low-TPS", true);
        this.global_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Global-Settings.deny-elytra-TPS", 12.0);
        this.global_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Global-Settings.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "elytra-speed.Global-Settings";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.Global-Settings.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (global_shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (spawn_SettingsEnabled && isAtSpawn(player, spawn_Radius)) return;
        if (ceiling_SettingsEnabled && isOnNetherCeiling(player)) return;

        if (global_DenyElytra) {
            if (teleportBack) player.teleportAsync(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_global_DisabledHere);
            return;
        }

        if (global_DenyOnLowTPS && plugin.tps <= global_DenyElytraTPS) {
            if (teleportBack) player.teleportAsync(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_global_DisabledLowTPS
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%tps%").replacement(String.valueOf(global_DenyElytraTPS)).build())
            );

            if (global_AlsoRemoveOnLowTPS) {
                plugin.getServer().getRegionScheduler().run(plugin, player.getLocation(), task -> {
                    PlayerInventory playerInv = player.getInventory();
                    if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(Material.ELYTRA)) {
                        final ItemStack elytra = playerInv.getChestplate();
                        playerInv.setChestplate(null);
                        player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                    }
                });
            }

            return;
        }

        double flySpeed = blocksPerTick(event.getFrom(), event.getTo());

        if (plugin.NEW_CHUNK_PLAYERS.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (global_EnableBursting && plugin.tps >= global_BurstNewChunk_TPS) {
                // Burst Speed New Chunks
                if (flySpeed > global_BurstSpeedNewChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(lang.elytra_global_TooFastChunkInfo
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_New).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_TooFast);
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_global_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_New_Color.append(lang.elytra_global_New_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_global_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_BurstSpeedNewChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_BurstSpeedNewChunks)).build())
                        );
                    }
                }
            } else {
                // Normal Speed New Chunks
                if (flySpeed > global_SpeedNewChunks+tolerance) {
                    // too fast
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (global_EnableBursting) {
                        player.sendActionBar(lang.elytra_global_TooFastLowTPS);
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(lang.elytra_global_TooFastChunkInfo
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_New).build())
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                            );
                        } else {
                            player.sendActionBar(lang.elytra_global_TooFast);
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_global_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_New_Color.append(lang.elytra_global_New_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_global_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_SpeedNewChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_SpeedNewChunks)).build())
                        );
                    }
                }
            }
        } else {
            // Speed Old Chunks
            if (global_EnableBursting && plugin.tps >= global_BurstOldChunk_TPS) {
                // Burst Speed Old Chunks
                if (flySpeed > global_BurstSpeedOldChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(lang.elytra_global_TooFastChunkInfo
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_Old).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_TooFast);
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_global_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_Old_Color.append(lang.elytra_global_Old_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_global_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_BurstSpeedOldChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_BurstSpeedOldChunks)).build())
                        );
                    }
                }
            } else {
                // Normal Speed Old Chunks
                if (flySpeed > global_SpeedOldChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (global_EnableBursting) {
                        player.sendActionBar(lang.elytra_global_TooFastLowTPS);
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(lang.elytra_global_TooFastChunkInfo
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_Old).build())
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                            );
                        } else {
                            player.sendActionBar(lang.elytra_global_TooFast);
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_global_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_global_Old_Color.append(lang.elytra_global_Old_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_global_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_global_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_SpeedOldChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_global_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(global_SpeedOldChunks)).build())
                        );
                    }
                }
            }
        }
    }
}
