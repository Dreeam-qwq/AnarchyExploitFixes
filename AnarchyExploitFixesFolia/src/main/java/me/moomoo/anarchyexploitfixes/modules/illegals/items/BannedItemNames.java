package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.ItemLegality;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import me.moomoo.anarchyexploitfixes.utils.CachingPermTool;
import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
import org.bukkit.Material;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;

import java.util.*;
import java.util.regex.Pattern;
import java.util.stream.Collectors;

public class BannedItemNames implements IllegalItemModule {

    private final Set<Pattern> bannedRegex;
    private final Set<Material> whitelistedTypes;
    private final boolean delete;

    public BannedItemNames() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Bypass permission: " + bypassPermission().get() + "\n" +
                        "Resets an item's name (or deletes the item) if it matches one of the configured regexes.\n" +
                        "Regexes can be complex. Be sure to use a tool like ChatGPT or https://regex101.com/");
        this.delete = config.getBoolean(configPath() + ".delete-item", false,
                "Will delete the item instead of resetting the name.");
        this.bannedRegex = config.getList(configPath() + ".regex", List.of("(?i)illegalstring"))
                .stream()
                .map(Pattern::compile)
                .collect(Collectors.toCollection(HashSet::new));
        this.whitelistedTypes = config.getList(configPath() + ".whitelisted-items",
                        Collections.singletonList("DIRT"))
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public String configPath() {
        return "illegals.banned-item-names";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @Override
    public AEFPermission bypassPermission() {
        return AEFPermission.BYPASS_ILLEGAL_BANNEDNAME;
    }

    @Override
    public ItemLegality determineLegality(ItemStack itemStack) {
        if (
                itemStack == null
                || whitelistedTypes.contains(itemStack.getType())
                || !itemStack.hasItemMeta()
                || !itemStack.getItemMeta().hasDisplayName()
        ) {
            return ItemLegality.LEGAL;
        }

        final String displayName = PlainTextComponentSerializer.plainText().serialize(itemStack.displayName());

        for (Pattern pattern : bannedRegex) {
            if (pattern.matcher(displayName).find()) {
                return ItemLegality.ILLEGAL;
            }
        }

        return ItemLegality.LEGAL;
    }

    @Override
    public void handleItem(ItemStack itemStack, ItemLegality checkResult) {
        if (checkResult == ItemLegality.ILLEGAL) {
            if (delete) {
                itemStack.setAmount(0);
            } else {
                ItemMeta meta = itemStack.getItemMeta();
                meta.displayName(null);
                itemStack.setItemMeta(meta);
            }
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPrepareResult(PrepareResultEvent event) {
        if (CachingPermTool.hasPermission(bypassPermission(), event.getView().getPlayer())) return;

        ItemStack resultItem = event.getResult();
        if (determineLegality(resultItem) == ItemLegality.ILLEGAL) {
            handleItem(resultItem, ItemLegality.ILLEGAL);
            event.setResult(resultItem);
        }
    }
}
