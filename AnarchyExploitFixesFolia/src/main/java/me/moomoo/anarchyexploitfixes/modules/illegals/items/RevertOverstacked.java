package me.moomoo.anarchyexploitfixes.modules.illegals.items;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.Collections;
import java.util.HashSet;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class RevertOverstacked implements AnarchyExploitFixesModule, Listener {

    private ScheduledTask scheduledTask;
    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention, shouldCheckShulker;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    public RevertOverstacked() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.revert-overstacked-items.enable", "Revert illegally high stacked items.");
        this.whitelistIsEnabled = config.getBoolean("illegals.revert-overstacked-items.item-whitelist-enabled", false);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.revert-overstacked-items.use-as-blacklist-instead", false);
        config.getList("illegals.revert-overstacked-items.whitelisted-items",
                Collections.singletonList("TOTEM_OF_UNDYING")
        ).forEach(configuredItem -> {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                this.whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        });
        this.enableStrictPrevention = config.getBoolean("illegals.revert-overstacked-items.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.revert-overstacked-items.periodically-check-player-inventories.check-period-in-ticks", 20);
        this.shouldCheckShulker = config.getBoolean("illegals.revert-overstacked-items.delete-shulker-if-contains-overstacked", false);
    }

    @Override
    public String name() {
        return "revert-overstacked-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (enableStrictPrevention) {
            this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> {
                for (Player player : plugin.getServer().getOnlinePlayers()) {
                    plugin.getServer().getRegionScheduler().run(plugin, player.getLocation(), itemCheckTask -> {
                        for (ItemStack item : player.getInventory()) {
                            handleOverstackedIfPresent(item);
                        }
                    });
                }
            }, checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.revert-overstacked-items.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    private void handleOverstackedIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(Material.AIR)) return;

        if (!whitelistIsEnabled) {
            int maxStackSize = item.getMaxStackSize();
            if (item.getAmount() > maxStackSize) {
                item.setAmount(maxStackSize);
            }
        } else {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    int maxStackSize = item.getMaxStackSize();
                    if (item.getAmount() > maxStackSize) {
                        item.setAmount(maxStackSize);
                    }
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    int maxStackSize = item.getMaxStackSize();
                    if (item.getAmount() > maxStackSize) {
                        item.setAmount(maxStackSize);
                    }
                }
            }
        }

        if (shouldCheckShulker) {
            if (isShulkerBox(item)) checkForIllegalsInShulker(item);
        }
    }

    private void checkForIllegalsInShulker(ItemStack shulker) {
        ShulkerBox shulkerBox = (ShulkerBox) ((BlockStateMeta) shulker.getItemMeta()).getBlockState();
        for (ItemStack contentItem : shulkerBox.getInventory().getContents()) {
            if (contentItem == null || contentItem.getType().equals(Material.AIR)) continue;

            if (!whitelistIsEnabled) {
                if (contentItem.getAmount() > contentItem.getMaxStackSize()) {
                    shulker.subtract(shulker.getAmount());
                    return;
                }
            } else {
                if (useWhitelistAsBlacklist) {
                    if (whitelistedItems.contains(contentItem.getType())) {
                        if (contentItem.getAmount() > contentItem.getMaxStackSize()) {
                            shulker.subtract(shulker.getAmount());
                            return;
                        }
                    }
                } else {
                    if (!whitelistedItems.contains(contentItem.getType())) {
                        if (contentItem.getAmount() > contentItem.getMaxStackSize()) {
                            shulker.subtract(shulker.getAmount());
                            return;
                        }
                    }
                }
            }
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleOverstackedIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleOverstackedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleOverstackedIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleOverstackedIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleOverstackedIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (!shouldCheckShulker) return;
        Block placedBlock = event.getBlockPlaced();
        if (!isShulkerBox(placedBlock.getType())) return;

        for (ItemStack shulkerItem : ((ShulkerBox) placedBlock.getState()).getInventory().getContents()) {
            if (shulkerItem == null || shulkerItem.getType().equals(Material.AIR)) continue;

            if (!whitelistIsEnabled) {
                if (shulkerItem.getAmount() > shulkerItem.getMaxStackSize()) {
                    placedBlock.setType(Material.AIR); // delete shulker to avoid dupes because metas are slow
                    return;
                }
            } else {
                if (useWhitelistAsBlacklist) {
                    if (whitelistedItems.contains(shulkerItem.getType())) {
                        if (shulkerItem.getAmount() > shulkerItem.getMaxStackSize()) {
                            placedBlock.setType(Material.AIR);
                            return;
                        }
                    }
                } else {
                    if (!whitelistedItems.contains(shulkerItem.getType())) {
                        if (shulkerItem.getAmount() > shulkerItem.getMaxStackSize()) {
                            placedBlock.setType(Material.AIR);
                            return;
                        }
                    }
                }
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        if (!(event.getPlayer() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleOverstackedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        handleOverstackedIfPresent(event.getCurrentItem());
        handleOverstackedIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleOverstackedIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleOverstackedIfPresent(item);
        }
    }

    // Hopper event. Attempts to prevent Hopper32k mechanics
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryMove(InventoryMoveItemEvent event) {
        ItemStack item = event.getItem();
        if (!whitelistIsEnabled) {
            if (item.getAmount() > item.getMaxStackSize()) {
                event.setCancelled(true);
            }
        } else {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    if (item.getAmount() > item.getMaxStackSize()) {
                        event.setCancelled(true);
                    }
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    if (item.getAmount() > item.getMaxStackSize()) {
                        event.setCancelled(true);
                    }
                }
            }
        }
    }
}
