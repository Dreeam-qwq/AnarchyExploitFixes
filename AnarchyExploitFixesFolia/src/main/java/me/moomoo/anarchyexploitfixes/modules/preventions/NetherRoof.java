package me.moomoo.anarchyexploitfixes.modules.preventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerTeleportEvent;

import java.util.Set;

public class NetherRoof implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final int ceilingY;
    private final boolean safe_teleport_enabled;

    public NetherRoof() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.prevent-nether-roof.enable", "Prevent players from going above the nether roof.");
        this.safe_teleport_enabled = config.getBoolean("preventions.prevent-nether-roof.safely-teleport-players", true);
        this.ceilingY = config.nether_ceiling_max_y;
    }

    @Override
    public String name() {
        return "prevent-nether-roof";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.prevent-nether-roof.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onTeleport(PlayerTeleportEvent event) {
        final Location teleportDestination = event.getTo();
        if (!teleportDestination.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (teleportDestination.getY() >= ceilingY) {
            if (event.getPlayer().hasPermission("anarchyexploitfixes.netherroofbypass")) return;
            event.setCancelled(true);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (event.getTo().getY() >= ceilingY || player.getLocation().getY() >= ceilingY) {
            if (player.hasPermission("anarchyexploitfixes.netherroofbypass")) return;
            teleportFromCeiling(player);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Player player = event.getPlayer();
        if (!player.getWorld().getEnvironment().equals(World.Environment.NETHER)) return;

        if (event.getBlock().getY() > ceilingY) {
            if (player.hasPermission("anarchyexploitfixes.netherroofbypass")) return;

            event.setCancelled(true);
            if (player.getLocation().getY() >= ceilingY) {
                teleportFromCeiling(player);
            }
        }
    }

    private void teleportFromCeiling(Player player) {
        // Teleport Player Downwards
        final Location teleportDestination = player.getLocation().clone().subtract(0.5, 7, 0.5);
        player.teleportAsync(teleportDestination, PlayerTeleportEvent.TeleportCause.PLUGIN).thenAccept(teleportHappened -> {
            player.getScheduler().run(plugin, tpFromCeiling -> {
                if (player.isInsideVehicle()) player.leaveVehicle();
                if (player.isGliding()) player.setGliding(false);
                if (!safe_teleport_enabled) return;

                // Check block above for liquid or falling block
                Block blockAboveHead = teleportDestination.clone().add(0,2,0).getBlock();
                if (blockAboveHead.getType().hasGravity() || (!blockAboveHead.isSolid() && !blockAboveHead.getType().equals(Material.NETHER_PORTAL)))
                    blockAboveHead.setType(Material.NETHERRACK, false);

                // Create air pocket for player
                Block blockAtPlayerLegs = teleportDestination.getBlock();
                if (!blockAtPlayerLegs.getType().equals(Material.AIR) && !blockAtPlayerLegs.getType().equals(Material.NETHER_PORTAL))
                    blockAtPlayerLegs.setType(Material.AIR, false);
                Block blockAtPlayerTorso = blockAtPlayerLegs.getRelative(BlockFace.UP);
                if (!blockAtPlayerTorso.getType().equals(Material.AIR) && !blockAtPlayerTorso.getType().equals(Material.NETHER_PORTAL))
                    blockAtPlayerTorso.setType(Material.AIR, false);

                // Check all sides of air pocket for liquids and fill with netherrack
                for (int i = 0; i < 2; i++) {
                    Block airPocketBlock = blockAtPlayerLegs.getRelative(BlockFace.UP, i);
                    for (BlockFace face : Set.of(BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST)) {
                        if (airPocketBlock.getRelative(face).isLiquid())
                            airPocketBlock.getRelative(face).setType(Material.NETHERRACK, false);
                    }
                }

                // Create block below feet if not solid
                Block blockBelowFeet = blockAtPlayerLegs.getRelative(BlockFace.DOWN);
                if (!blockBelowFeet.isSolid() && !blockBelowFeet.getType().equals(Material.NETHER_PORTAL))
                    blockBelowFeet.setType(Material.NETHERRACK, false);
            }, null);
        });
    }
}

