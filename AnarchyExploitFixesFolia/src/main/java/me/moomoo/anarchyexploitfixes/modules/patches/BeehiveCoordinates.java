package me.moomoo.anarchyexploitfixes.modules.patches;

import de.tr7zw.changeme.nbtapi.NBTItem;
import de.tr7zw.changeme.nbtapi.iface.ReadWriteNBT;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.materialNotRecognized;
import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class BeehiveCoordinates implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<Material> beehiveTypes = new HashSet<>(2);
    private final boolean logIsEnabled;

    public BeehiveCoordinates() {
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("patches.remove-beehive-coordinates.enable", "Patches a coordinate exploit by looking at Beehive NBT data using hacked clients.");
        this.logIsEnabled = config.getBoolean("patches.remove-beehive-coordinates.log", false);
        config.getList("patches.remove-beehive-coordinates.beehive-types-to-check",
                List.of("BEEHIVE", "BEE_NEST")
        ).forEach(configuredType -> {
            try {
                Material typeToCheck = Material.valueOf(configuredType);
                this.beehiveTypes.add(typeToCheck);
            } catch (IllegalArgumentException e) {
                materialNotRecognized(Level.WARNING, name(), configuredType);
            }
        });
    }

    @Override
    public String name() {
        return "remove-beehive-coordinates";
    }

    @Override
    public String category() {
        return "patches";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("patches.remove-beehive-coordinates.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void handleBeehiveIfPresent(ItemStack item) {
        if (item == null || !beehiveTypes.contains(item.getType())) return;

        NBTItem nbtBeehive = new NBTItem(item);
        if (!nbtBeehive.hasTag("BlockEntityTag")) return;

        if (logIsEnabled) moduleLog(Level.INFO, name(), "Found Beehive Item with stored Bees, removing coordinate data.");

        nbtBeehive.getCompound("BlockEntityTag").getCompoundList("Bees").forEach(bee -> {
            ReadWriteNBT beeEntityData = bee.getCompound("EntityData");
            beeEntityData.removeKey("FlowerPos");
            beeEntityData.removeKey("Paper.Origin");
            beeEntityData.removeKey("Paper.OriginWorld");
            beeEntityData.removeKey("WorldUUIDMost");
            beeEntityData.removeKey("WorldUUIDLeast");
        });

        nbtBeehive.applyNBT(item);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = false)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        player.getInventory().forEach(this::handleBeehiveIfPresent);
        player.getEnderChest().forEach(this::handleBeehiveIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBeehiveIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBeehiveIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleBeehiveIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        event.getInventory().forEach(this::handleBeehiveIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        HumanEntity player = event.getWhoClicked();
        player.getScheduler().runDelayed(plugin, checkInvAfterClick -> {
            handleBeehiveIfPresent(event.getCursor());
            handleBeehiveIfPresent(event.getCurrentItem());
            event.getInventory().forEach(this::handleBeehiveIfPresent);
            player.getInventory().forEach(this::handleBeehiveIfPresent);
        }, null, 1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        event.getInventory().forEach(this::handleBeehiveIfPresent);
    }
}
