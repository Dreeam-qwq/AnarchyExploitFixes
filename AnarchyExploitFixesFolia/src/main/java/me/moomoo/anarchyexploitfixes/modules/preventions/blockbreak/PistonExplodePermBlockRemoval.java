package me.moomoo.anarchyexploitfixes.modules.preventions.blockbreak;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.HashSet;
import java.util.List;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isIndestructible;
import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isPiston;

public class PistonExplodePermBlockRemoval implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<String> whitelistedWorlds = new HashSet<>();
    private static final BlockFace[] cardinalDirections = { BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST };

    public PistonExplodePermBlockRemoval() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.whitelistedWorlds.addAll(config.getList("preventions.permanent-block-breaking.by-exploding-pistons.whitelisted-worlds", List.of("example_world_name")));
        config.getBoolean("preventions.permanent-block-breaking.by-exploding-pistons.only-for-portals-and-gateways", false, "If enabled, will only protect portals and end gateways");
    }

    @Override
    public String name() {
        return "preventions.permanent-block-breaking.by-exploding-pistons";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.permanent-block-breaking.by-exploding-pistons.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        HashSet<Block> pistons_that_could_break_indestructible_blocks = new HashSet<>();

        for (Block potentialPistonPart : event.blockList()) {
            if (!isPiston(potentialPistonPart.getType())) continue;

            for (BlockFace blockFace : BlockFace.values()) {
                if (!isIndestructible(potentialPistonPart.getRelative(blockFace).getType())) continue;

                pistons_that_could_break_indestructible_blocks.add(potentialPistonPart);
                plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), task -> potentialPistonPart.setType(Material.AIR));

                for (BlockFace cardinalDirection : cardinalDirections) {
                    Block potentialExtendedPistonPart = potentialPistonPart.getRelative(cardinalDirection);
                    if (isPiston(potentialExtendedPistonPart.getType())) {
                        plugin.getServer().getRegionScheduler().run(plugin, potentialPistonPart.getLocation(), task -> potentialExtendedPistonPart.setType(Material.AIR));
                    }
                }
            }
        }

        if (!pistons_that_could_break_indestructible_blocks.isEmpty()) {
            event.blockList().removeAll(pistons_that_could_break_indestructible_blocks);
            for (Block block : pistons_that_could_break_indestructible_blocks) {
                plugin.getServer().getRegionScheduler().runDelayed(plugin, block.getLocation(), task -> block.setType(Material.AIR), 5);
            }
        }
    }
}
