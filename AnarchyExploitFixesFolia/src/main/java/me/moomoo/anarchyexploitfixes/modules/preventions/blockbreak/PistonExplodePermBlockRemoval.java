package me.moomoo.anarchyexploitfixes.modules.preventions.blockbreak;

import com.destroystokyo.paper.MaterialTags;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.BlockFace;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityExplodeEvent;

import java.util.HashSet;
import java.util.List;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isIndestructible;

public class PistonExplodePermBlockRemoval implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<String> whitelistedWorlds = new HashSet<>();

    public PistonExplodePermBlockRemoval() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.whitelistedWorlds.addAll(config.getList("preventions.permanent-block-breaking.by-exploding-pistons.whitelisted-worlds", List.of("example_world_name")));
        config.getBoolean("preventions.permanent-block-breaking.by-exploding-pistons.only-for-portals-and-gateways", false, "If enabled, will only protect portals and end gateways");
    }

    @Override
    public String name() {
        return "preventions.permanent-block-breaking.by-exploding-pistons";
    }

    @Override
    public String category() {
        return "bedrock";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.permanent-block-breaking.by-exploding-pistons.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.LOWEST, ignoreCancelled = true)
    private void onPistonExplode(EntityExplodeEvent event) {
        if (whitelistedWorlds.contains(event.getEntity().getWorld().getName())) return;

        event.blockList().removeIf(block -> {
            if (MaterialTags.PISTONS.isTagged(block.getType())) {
                for (BlockFace face : BlockFace.values()) {
                    if (isIndestructible(block.getRelative(face).getType())) {
                        plugin.getServer().getRegionScheduler().runDelayed(plugin, block.getLocation(),
                                removePiston -> block.setType(Material.AIR), 5);
                        return true;
                    }
                }
            }
            return false;
        });
    }
}
