package me.moomoo.anarchyexploitfixes.modules.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.config.LanguageCache;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.Material;
import org.bukkit.Sound;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;

import static me.moomoo.anarchyexploitfixes.utils.ElytraUtils.*;

public class ElytraOnCeiling implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private static final double tolerance = 0.02;
    private final int spawn_Radius;
    private final double ceiling_SpeedOldChunks, ceiling_SpeedNewChunks, ceiling_BurstSpeedOldChunks,
            ceiling_BurstSpeedNewChunks, ceiling_BurstOldChunk_TPS, ceiling_BurstNewChunk_TPS, ceiling_DenyElytraTPS;
    private final boolean showActionbarMsgs, displayChunkInfo, teleportBack, ceiling_shouldCheckPermission, spawn_SettingsEnabled,
            ceiling_DenyElytra, ceiling_EnableBursting, ceiling_DenyOnLowTPS, ceiling_AlsoRemoveOnLowTPS, playNotifSound;

    public ElytraOnCeiling() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.showActionbarMsgs = config.getBoolean("elytra.elytra-speed.display-actionbar", true);
        this.displayChunkInfo = config.getBoolean("elytra.elytra-speed.display-chunk-info-in-actionbar", true);
        this.playNotifSound = config.getBoolean("elytra.elytra-speed.play-sound-when-too-fast", true);
        this.teleportBack = config.getBoolean("elytra.elytra-speed.teleport-instead-of-canceling-movement", false);
        config.addComment("elytra.elytra-speed.Nether-Ceiling.enable",  "Use separate values for players above the nether ceiling.");
        this.spawn_SettingsEnabled = config.getBoolean("elytra.elytra-speed.At-Spawn.enable", false);
        this.spawn_Radius = config.getInt("elytra.elytra-speed.At-Spawn.radius", 3000);
        this.ceiling_shouldCheckPermission = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.use-bypass-permission", false,
                "Can be slow with a lot of players. Enable only if needed.");
        this.ceiling_DenyElytra = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-usage", false);
        this.ceiling_SpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-old-chunks", 0.5);
        this.ceiling_SpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.speed-new-chunks", 0.5);
        this.ceiling_EnableBursting = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.enable-bursting", true);
        this.ceiling_BurstSpeedOldChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunks", 1.0);
        this.ceiling_BurstOldChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-old-chunk-TPS", 18.0);
        this.ceiling_BurstSpeedNewChunks = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunks", 1.0);
        this.ceiling_BurstNewChunk_TPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.burst-speed-new-chunk-TPS", 18.0);
        this.ceiling_DenyOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.deny-elytra-on-low-TPS", true);
        this.ceiling_DenyElytraTPS = config.getDouble("elytra.elytra-speed.Nether-Ceiling.deny-elytra-TPS", 12.0);
        this.ceiling_AlsoRemoveOnLowTPS = config.getBoolean("elytra.elytra-speed.Nether-Ceiling.also-remove-elytra-on-low-TPS", true);
    }

    @Override
    public String name() {
        return "elytra-speed.Nether-Ceiling";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.elytra-speed.Nether-Ceiling.enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerMove(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (ceiling_shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;
        if (!isOnNetherCeiling(player)) return;
        if (spawn_SettingsEnabled && isAtSpawn(player, spawn_Radius)) return;

        if (ceiling_DenyElytra) {
            if (teleportBack) player.teleportAsync(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);
            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_ceiling_DisabledHere);
            return;
        }

        if (ceiling_DenyOnLowTPS && plugin.tps <= ceiling_DenyElytraTPS) {
            if (teleportBack) player.teleportAsync(event.getFrom());
            else event.setCancelled(true);

            if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

            if (showActionbarMsgs) player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_ceiling_DisabledLowTPS
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%tps%").replacement(String.valueOf(ceiling_DenyElytraTPS)).build())
            );

            if (ceiling_AlsoRemoveOnLowTPS) {
                plugin.getServer().getRegionScheduler().run(plugin, player.getLocation(), task -> {
                    PlayerInventory playerInv = player.getInventory();
                    if (playerInv.getChestplate() != null && playerInv.getChestplate().getType().equals(Material.ELYTRA)) {
                        final ItemStack elytra = playerInv.getChestplate();
                        playerInv.setChestplate(null);
                        player.getWorld().dropItemNaturally(player.getLocation(), elytra);
                    }
                });
            }

            return;
        }

        double flySpeed = blocksPerTick(event.getFrom(), event.getTo());

        if (plugin.NEW_CHUNK_PLAYERS.contains(player.getUniqueId())) {
            // Speed New Chunks
            if (ceiling_EnableBursting && plugin.tps >= ceiling_BurstNewChunk_TPS) {
                // Burst Speed New Chunks
                if (flySpeed > ceiling_BurstSpeedNewChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(lang.elytra_ceiling_TooFastChunkInfo
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_New).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_TooFast);
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_ceiling_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_New_Color.append(lang.elytra_ceiling_New_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_ceiling_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_BurstSpeedNewChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_BurstSpeedNewChunks)).build())
                        );
                    }
                }
            } else {
                // Normal Speed New Chunks
                if (flySpeed > ceiling_SpeedNewChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (ceiling_EnableBursting) {
                        player.sendActionBar(lang.elytra_ceiling_TooFastLowTPS);
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(lang.elytra_ceiling_TooFastChunkInfo
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_New).build())
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                            );
                        } else {
                            player.sendActionBar(lang.elytra_ceiling_TooFast);
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_ceiling_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_New_Color.append(lang.elytra_ceiling_New_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_ceiling_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_SpeedOldChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_SpeedOldChunks)).build())
                        );
                    }
                }
            }
        } else {
            // Speed Old Chunks
            if (ceiling_EnableBursting && plugin.tps >= ceiling_BurstOldChunk_TPS) {
                // Burst Speed Old Chunks
                if (flySpeed > ceiling_BurstSpeedOldChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(lang.elytra_ceiling_TooFastChunkInfo
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_Old).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_TooFast);
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_ceiling_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_Old_Color.append(lang.elytra_ceiling_Old_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_ceiling_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_BurstSpeedOldChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_BurstSpeedOldChunks)).build())
                        );
                    }
                }
            } else {
                // Normal Speed Old Chunks
                if (flySpeed > ceiling_SpeedOldChunks+tolerance) {
                    if (teleportBack) player.teleportAsync(event.getFrom());
                    else event.setCancelled(true);

                    if (playNotifSound) player.playSound(player.getEyeLocation(), Sound.ENTITY_EXPERIENCE_ORB_PICKUP, 1.0F, 1.0F);

                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (ceiling_EnableBursting) {
                        player.sendActionBar(lang.elytra_ceiling_TooFastLowTPS);
                    } else {
                        if (displayChunkInfo) {
                            player.sendActionBar(lang.elytra_ceiling_TooFastChunkInfo
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_Old).build())
                                    .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                            );
                        } else {
                            player.sendActionBar(lang.elytra_ceiling_TooFast);
                        }
                    }
                } else {
                    if (!showActionbarMsgs) return;
                    LanguageCache lang = AnarchyExploitFixes.getLang(player.locale());
                    if (displayChunkInfo) {
                        player.sendActionBar(
                                lang.elytra_ceiling_YouAreFlyingIn
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%neworold%").replacement(lang.elytra_ceiling_Old_Color.append(lang.elytra_ceiling_Old_UpperCase)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%chunks%").replacement(lang.elytra_ceiling_Chunks).build())
                                .append(Component.space())
                                .append(lang.elytra_ceiling_Speed
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").matchLiteral(speed(flySpeed)).build())
                                        .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_SpeedOldChunks)).build())
                                )
                        );
                    } else {
                        player.sendActionBar(lang.elytra_ceiling_Speed
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%speed%").replacement(speed(flySpeed)).build())
                                .replaceText(TextReplacementConfig.builder().matchLiteral("%maxspeed%").replacement(String.valueOf(ceiling_SpeedOldChunks)).build())
                        );
                    }
                }
            }
        }
    }
}
