package me.moomoo.anarchyexploitfixes.modules.illegals.items.nbt;

import de.tr7zw.changeme.nbtapi.NBTItem;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;
import static me.moomoo.anarchyexploitfixes.utils.LogUtils.materialNotRecognized;
import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class NBTStorageItems implements AnarchyExploitFixesModule, Listener {

    private final HashSet<Material> storageTypesToCheck = new HashSet<>();
    private final boolean shouldDeleteInstead, logIsEnabled, shouldCheckShulker;
    private static final String STORED_ITEMS_TAG = "BlockEntityTag";

    public NBTStorageItems() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.shouldDeleteInstead = config.getBoolean("illegals.nbt.revert-impossibly-stored-items.delete-item-instead", false, "Deletes the item instead of clearing data");
        this.logIsEnabled = config.getBoolean("illegals.nbt.revert-impossibly-stored-items.log", false);
        this.shouldCheckShulker = config.getBoolean("illegals.nbt.revert-impossibly-stored-items.delete-shulker-if-contains-storage-items", false);
        config.getList("illegals.nbt.revert-impossibly-stored-items.materials-to-check", List.of(
                "CHEST", "TRAPPED_CHEST", "DISPENSER", "DROPPER"
        )).forEach(configuredType -> {
            try {
                Material typeToCheck = Material.valueOf(configuredType);
                storageTypesToCheck.add(typeToCheck);
            } catch (IllegalArgumentException e) {
                materialNotRecognized(Level.WARNING, name(), configuredType);
            }
        });
    }

    @Override
    public String name() {
        return "nbt.revert-impossibly-stored-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.nbt.revert-impossibly-stored-items.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    private void handleImpossibleStorageItems(ItemStack item) {
        if (item == null || !storageTypesToCheck.contains(item.getType())) return;

        NBTItem nbtItem = new NBTItem(item);
        if (!nbtItem.getKeys().contains(STORED_ITEMS_TAG)) return;

        if (shouldDeleteInstead) {
            item.subtract(item.getAmount());
            if (logIsEnabled) moduleLog(Level.INFO, name(), "Removed an impossible storage item of type: "+item.getType().name());
        } else {
            nbtItem.removeKey(STORED_ITEMS_TAG);
            nbtItem.applyNBT(item);
            if (logIsEnabled) moduleLog(Level.INFO, name(), "Cleared an impossible storage item of type: "+item.getType().name());
        }

        if (shouldCheckShulker) {
            if (isShulkerBox(item) && shulkerContainsImpossibleStorageItem((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
                if (logIsEnabled) moduleLog(Level.INFO, name(), "Removed a shulker that contained one or more impossible storage items.");
            }
        }
    }

    private boolean shulkerContainsImpossibleStorageItem(ShulkerBox shulkerBox) {
        for (ItemStack contentItem : shulkerBox.getInventory().getContents()) {
            if (contentItem == null || !storageTypesToCheck.contains(contentItem.getType())) continue;

            if (new NBTItem(contentItem).getKeys().contains(STORED_ITEMS_TAG)) {
                return true;
            }
        }

        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleImpossibleStorageItems(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleImpossibleStorageItems(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleImpossibleStorageItems(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleImpossibleStorageItems(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleImpossibleStorageItems(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        Block placedBlock = event.getBlockPlaced();
        if (
                shouldCheckShulker
                && isShulkerBox(placedBlock.getType())
                && shulkerContainsImpossibleStorageItem((ShulkerBox) placedBlock.getState())
        ) {
            placedBlock.setType(Material.AIR);
        }

        if (
                storageTypesToCheck.contains(placedBlock.getType())
                && new NBTItem(event.getItemInHand()).getKeys().contains(STORED_ITEMS_TAG)
        ) {
            placedBlock.setType(Material.AIR);
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        if (!(event.getPlayer() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleImpossibleStorageItems(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        handleImpossibleStorageItems(event.getCurrentItem());
        handleImpossibleStorageItems(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleImpossibleStorageItems(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleImpossibleStorageItems(item);
        }
    }
}
