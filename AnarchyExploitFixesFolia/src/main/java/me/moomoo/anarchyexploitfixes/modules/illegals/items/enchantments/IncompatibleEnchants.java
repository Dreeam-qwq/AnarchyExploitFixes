package me.moomoo.anarchyexploitfixes.modules.illegals.items.enchantments;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;

import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.*;

public class IncompatibleEnchants implements AnarchyExploitFixesModule, Listener {

    private ScheduledTask scheduledTask;
    private final boolean whitelistIsEnabled, useWhitelistAsBlacklist, enableStrictPrevention;
    private final HashSet<Material> whitelistedItems = new HashSet<>();
    private final long checkPeriod;

    public IncompatibleEnchants() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.enchantments.revert-incompatible-enchants.enable",  "Reverts items like Armor with all Protection enchantments.");
        this.whitelistIsEnabled = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.item-whitelist-enabled", true);
        this.useWhitelistAsBlacklist = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.use-as-blacklist-instead", false);
        config.getList("illegals.enchantments.revert-incompatible-enchants.whitelisted-items",
                Collections.singletonList("BOW")
        ).forEach(configuredItem -> {
            try {
                Material itemMaterial = Material.valueOf(configuredItem);
                whitelistedItems.add(itemMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredItem);
            }
        });
        this.enableStrictPrevention = config.getBoolean("illegals.enchantments.revert-incompatible-enchants.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.enchantments.revert-incompatible-enchants.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "revert-incompatible-enchants";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (enableStrictPrevention) {
            this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> {
                for (Player player : plugin.getServer().getOnlinePlayers()) {
                    player.getScheduler().run(plugin, periodicInvCheck -> player.getInventory().forEach(this::handleIncompatibleEnchantsIfPresent), null);
                }
            }, checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.enchantments.revert-incompatible-enchants.enable", true);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    private void handleIncompatibleEnchantsIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(Material.AIR)) return;

        if (whitelistIsEnabled) {
            if (useWhitelistAsBlacklist) {
                if (whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            } else {
                if (!whitelistedItems.contains(item.getType())) {
                    filterBasedOnType(item);
                }
            }
        } else {
            filterBasedOnType(item);
        }
    }

    private void filterBasedOnType(ItemStack item) {
        if (isArmor(item)) {
            filterProtectionEnchants(item);
            filterCurses(item);
            if (isBoots(item)) {
                filterBoots(item);
            }
            return;
        }
        if (isElytra(item)) {
            filterCurses(item);
            return;
        }
        if (isTool(item)) {
            filterTools(item);
            if (isAxe(item)) {
                filterSharpnessEnchants(item);
            }
            return;
        }
        if (isSword(item)) {
            filterSharpnessEnchants(item);
            return;
        }
        if (isBow(item)) {
            filterBow(item);
            return;
        }
        if (isTrident(item)) {
            filterTrident(item);
            return;
        }
        if (isCrossbow(item)) {
            filterCrossbow(item);
        }
    }

    private void filterCurses(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(Enchantment.BINDING_CURSE)
                && enchantments.containsKey(Enchantment.VANISHING_CURSE)
        ) {
            item.removeEnchantment(Enchantment.BINDING_CURSE);
        }
    }

    private void filterCrossbow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(Enchantment.MULTISHOT)
                && enchantments.containsKey(Enchantment.PIERCING)
        ) {
            item.removeEnchantment(Enchantment.MULTISHOT);
        }
    }

    private void filterTrident(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (enchantments.containsKey(Enchantment.RIPTIDE)) {
            if (
                    enchantments.containsKey(Enchantment.LOYALTY)
                    || enchantments.containsKey(Enchantment.CHANNELING)
            ) {
                item.removeEnchantment(Enchantment.RIPTIDE);
            }
        }
    }

    private void filterBow(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(Enchantment.MENDING)
                && enchantments.containsKey(Enchantment.ARROW_INFINITE)
        ) {
            item.removeEnchantment(Enchantment.ARROW_INFINITE);
        }
    }

    private void filterTools(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(Enchantment.SILK_TOUCH)
                && enchantments.containsKey(Enchantment.LOOT_BONUS_BLOCKS)
        ) {
            item.removeEnchantment(Enchantment.LOOT_BONUS_BLOCKS);
        }
    }

    private void filterBoots(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        if (
                enchantments.containsKey(Enchantment.DEPTH_STRIDER)
                && enchantments.containsKey(Enchantment.FROST_WALKER)
        ) {
            item.removeEnchantment(Enchantment.FROST_WALKER);
        }
    }

    private void filterSharpnessEnchants(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;

        // Prefer keeping Sharpness enchantment if it is present
        if (enchantments.containsKey(Enchantment.DAMAGE_ALL)) {
            if (enchantments.containsKey(Enchantment.DAMAGE_ARTHROPODS))
                item.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
            if (enchantments.containsKey(Enchantment.DAMAGE_UNDEAD))
                item.removeEnchantment(Enchantment.DAMAGE_UNDEAD);
        } else if (
                enchantments.containsKey(Enchantment.DAMAGE_ARTHROPODS)
                && enchantments.containsKey(Enchantment.DAMAGE_UNDEAD)
        ) {
            item.removeEnchantment(Enchantment.DAMAGE_ARTHROPODS);
        }
    }

    private void filterProtectionEnchants(ItemStack item) {
        HashMap<Enchantment, Integer> enchantments = new HashMap<>(item.getEnchantments());
        if (enchantments.isEmpty()) return;
        // Prefer keeping Protection enchantment if it is present
        if (enchantments.containsKey(Enchantment.PROTECTION_ENVIRONMENTAL)) {
            if (enchantments.containsKey(Enchantment.PROTECTION_EXPLOSIONS))
                item.removeEnchantment(Enchantment.PROTECTION_EXPLOSIONS);
            if (enchantments.containsKey(Enchantment.PROTECTION_FIRE))
                item.removeEnchantment(Enchantment.PROTECTION_FIRE);
            if (enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE))
                item.removeEnchantment(Enchantment.PROTECTION_PROJECTILE);
        // If protection is not present, prefer blast protection
        } else if (enchantments.containsKey(Enchantment.PROTECTION_EXPLOSIONS)) {
            if (enchantments.containsKey(Enchantment.PROTECTION_FIRE))
                item.removeEnchantment(Enchantment.PROTECTION_FIRE);
            if (enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE))
                item.removeEnchantment(Enchantment.PROTECTION_PROJECTILE);
        // If protection and blast protection is not present, prefer projectile protection
        } else if (
                enchantments.containsKey(Enchantment.PROTECTION_PROJECTILE)
                && enchantments.containsKey(Enchantment.PROTECTION_FIRE)
        ) {
            item.removeEnchantment(Enchantment.PROTECTION_FIRE);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        for (ItemStack item : player.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
        for (ItemStack item : player.getEnderChest()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleIncompatibleEnchantsIfPresent(event.getItem().getItemStack());
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        if (!(event.getPlayer() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        handleIncompatibleEnchantsIfPresent(event.getCurrentItem());
        handleIncompatibleEnchantsIfPresent(event.getCursor());
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        if (!(event.getWhoClicked() instanceof Player)) return;
        for (ItemStack item : event.getInventory()) {
            handleIncompatibleEnchantsIfPresent(item);
        }
    }
}
