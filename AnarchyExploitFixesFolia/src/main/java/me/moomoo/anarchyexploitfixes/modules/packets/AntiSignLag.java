package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientUpdateSign;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;

public class AntiSignLag extends AEFPacketModule {

    private final int sign_text_max_length;
    private final boolean log, kick;

    public AntiSignLag() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches a lag exploit that involves sending specific oversized sign edit packets.");
        this.sign_text_max_length = config.getInt(configPath() + ".line-character-limit", 80,
                "Vanilla limit is 384 characters per line, which is too much.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.sign-lag";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.UPDATE_SIGN) return;

        for (String line : new WrapperPlayClientUpdateSign(event).getTextLines()) {
            if (line.length() > sign_text_max_length) {
                event.setCancelled(true);
                onCancel(log, kick, event.getUser());
                return;
            }
        }
    }
}
