package me.moomoo.anarchyexploitfixes.modules.dupepreventions;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Entity;
import org.bukkit.entity.HumanEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.inventory.InventoryHolder;

public class CloseEntitiyInventoriesOnLogout implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;

    public CloseEntitiyInventoriesOnLogout() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        AnarchyExploitFixes.getConfiguration().addComment("dupe-preventions.close-entity-inventories-on-player-disconnect", "Closes open inventories of entities that disappeared when the player riding it disconnected.");
    }

    @Override
    public String name() {
        return "close-entity-inventories-on-player-disconnect";
    }

    @Override
    public String category() {
        return "dupe-preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("dupe-preventions.close-entity-inventories-on-player-disconnect", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST)
    private void onPlayerQuit(PlayerQuitEvent event) {
        Entity vehicle = event.getPlayer().getVehicle();
        if (vehicle instanceof InventoryHolder inventoryHolder) {
            vehicle.getScheduler().run(plugin, task -> {
                for (HumanEntity viewer : inventoryHolder.getInventory().getViewers()) {
                    viewer.getScheduler().run(plugin, closeInv -> viewer.closeInventory(), null);
                }
            }, null);
        }
    }
}
