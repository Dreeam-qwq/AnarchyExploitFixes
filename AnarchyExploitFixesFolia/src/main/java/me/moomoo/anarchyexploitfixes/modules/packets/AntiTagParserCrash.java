package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerAbstract;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientTabComplete;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import org.bukkit.entity.Player;

public class AntiTagParserCrash extends PacketListenerAbstract implements AEFModule {

    private final AnarchyExploitFixes plugin;
    private static final String[] ABUSABLE_SEQUENCES = { "@", "[", "nbt", "=", "{", "}", "]" };
    private final boolean logIsEnabled, shouldKickPlayer;

    public AntiTagParserCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.logIsEnabled = config.getBoolean(configPath() + ".log", true);
        this.shouldKickPlayer = config.getBoolean(configPath() + ".kick-player", false);
        AnarchyExploitFixes.getConfiguration().addComment(configPath() + ".enable", "Patches TagParser crash exploit.");
    }

    @Override
    public String configPath() {
        return "patches.tag-parser-crash-patch";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public boolean shouldEnable() {
        if (AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true)) {
            if (AnarchyExploitFixes.getConfiguration().packet_events_disabled) {
                warn("Not patching exploit because you disabled packets in config!");
                return false;
            }
            return true;
        }
        return false;
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        if (event.getPacketType() != PacketType.Play.Client.TAB_COMPLETE) return;
        final Player player = (Player) event.getPlayer();
        if (player == null || player.isOp()) return;

        final String text = new WrapperPlayClientTabComplete(event).getText();

        for (final String sequence : ABUSABLE_SEQUENCES) {
            if (text.indexOf(sequence) != -1) {
                event.setCancelled(true);
                return;
            }
        }

        if (text.length() > 64) {
            final int index = text.indexOf(' ');
            if (index == -1 || index >= 64) {
                event.setCancelled(true);
            }
        }

        if (logIsEnabled)
            info("Prevented player '"+player.getName()+"' from using TagParser crash.");
        if (shouldKickPlayer)
            player.getScheduler().run(plugin, kick -> player.kick(AnarchyExploitFixes.getLang(player.locale()).misc_MaskedKickMessage), null);
    }
}
