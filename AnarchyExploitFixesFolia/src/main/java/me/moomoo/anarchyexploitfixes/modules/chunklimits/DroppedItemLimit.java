package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import com.destroystokyo.paper.MaterialTags;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Item;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ItemSpawnEvent;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.EnumSet;
import java.util.Objects;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

public class DroppedItemLimit implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final Set<Material> whitelistedItems;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxDroppedItemsPerChunk;
    private final boolean logIsEnabled, usingWhitelist;

    public DroppedItemLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable", """
                Limit the amount of dropped items in a chunk to combat lag.\s
                Be aware this does not prioritize items by value or anything, just whatever gets over the counter.""");
        this.logIsEnabled = config.getBoolean(configPath() + ".log-removals", true);
        this.maxDroppedItemsPerChunk = config.getInt(configPath() + ".max-dropped-items-per-chunk", 200);
        this.checkPeriod = config.getInt(configPath() + ".check-period-in-ticks", 800,
                "20 ticks = 1 second");
        this.usingWhitelist = config.getBoolean(configPath() + ".whitelist-specific-item-types", false);
        this.whitelistedItems = config.getList(configPath() + ".whitelisted-types",
                        MaterialTags.SHULKER_BOXES.getValues().stream().map(Enum::name).sorted().toList(),
                        "You need to use correct Material enums for your minecraft version here.")
                .stream()
                .map(configuredType -> {
                    try {
                        return Material.valueOf(configuredType);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Material.class, configuredType);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .collect(Collectors.toCollection(() -> EnumSet.noneOf(Material.class)));
    }

    @Override
    public String configPath() {
        return "chunk-limits.entity-limits.dropped-item-limit";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk()) return;

        int droppedItemCount = 0;

        for (Entity entity : event.getChunk().getEntities()) {
            if (entity.getType() != EntityType.DROPPED_ITEM) continue;

            droppedItemCount++;
            if (droppedItemCount <= maxDroppedItemsPerChunk) continue;
            if (usingWhitelist && whitelistedItems.contains(((Item) entity).getItemStack().getType())) continue;

            entity.getScheduler().run(plugin, kill -> {
                entity.remove();
                if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                        " because reached limit of " + maxDroppedItemsPerChunk);
            }, null);
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onItemDrop(ItemSpawnEvent event) {
        int droppedItemCount = 0;

        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType() != EntityType.DROPPED_ITEM) continue;

            droppedItemCount++;
            if (droppedItemCount <= maxDroppedItemsPerChunk) continue;
            if (usingWhitelist && whitelistedItems.contains(((Item) entity).getItemStack().getType())) continue;

            entity.getScheduler().run(plugin, kill -> {
                entity.remove();
                if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                        " because reached limit of " + maxDroppedItemsPerChunk);
            }, null);
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), chunkCheck -> {
                    if (!chunk.isEntitiesLoaded()) return;

                    AtomicInteger droppedItemCount = new AtomicInteger();

                    for (Entity entity : chunk.getEntities()) {
                        entity.getScheduler().run(plugin, checkEntity -> {
                            if (entity.getType() != EntityType.DROPPED_ITEM) return;
                            if (droppedItemCount.incrementAndGet() <= maxDroppedItemsPerChunk) return;
                            if (usingWhitelist && whitelistedItems.contains(((Item) entity).getItemStack().getType())) return;

                            entity.remove();
                            if (logIsEnabled) info("Removed dropped item at " + LocationUtil.toString(entity.getLocation()) +
                                    " because reached limit of " + maxDroppedItemsPerChunk);
                        }, null);
                    }
                });
            }
        }
    }
}
