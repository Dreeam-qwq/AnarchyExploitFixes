package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Item;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.ItemSpawnEvent;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class DroppedItemLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final boolean logIsEnabled, usingWhitelist;
    private final int maxDroppedItemsPerChunk;
    private final long checkPeriod;
    private final HashSet<Material> whitelistedItems = new HashSet<>();

    public DroppedItemLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.dropped-item-limit.enable", "Limit the amount of dropped items in a chunk to combat lag.\nBe aware this does not prioritize higher value items.");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.dropped-item-limit.log-removals", true);
        this.maxDroppedItemsPerChunk = config.getInt("chunk-limits.entity-limits.dropped-item-limit.max-dropped-items-per-chunk", 200);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.dropped-item-limit.check-period-in-ticks", 800, "20 ticks = 1 second");
        this.usingWhitelist = config.getBoolean("chunk-limits.entity-limits.dropped-item-limit.whitelist-specific-item-types", false);
        List<String> defaults = List.of("SHULKER_BOX", "BLACK_SHULKER_BOX", "BLUE_SHULKER_BOX", "BROWN_SHULKER_BOX", "CYAN_SHULKER_BOX", "GRAY_SHULKER_BOX",
                "GREEN_SHULKER_BOX", "LIGHT_BLUE_SHULKER_BOX", "LIGHT_GRAY_SHULKER_BOX", "LIME_SHULKER_BOX", "MAGENTA_SHULKER_BOX", "ORANGE_SHULKER_BOX",
                "PINK_SHULKER_BOX", "PURPLE_SHULKER_BOX", "RED_SHULKER_BOX", "WHITE_SHULKER_BOX", "YELLOW_SHULKER_BOX"
        );
        List<String> configuredWhitelistedTypes = config.getList("chunk-limits.entity-limits.dropped-item-limit.whitelisted-types", defaults, "You need to use correct Material enums for your minecraft version here.");
        for (String configuredWhitelistedType : configuredWhitelistedTypes) {
            try {
                Material whitelistedType = Material.valueOf(configuredWhitelistedType);
                whitelistedItems.add(whitelistedType);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredWhitelistedType);
            }
        }
    }

    @Override
    public String name() {
        return "entity-limits.dropped-item-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.dropped-item-limit.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onItemDrop(ItemSpawnEvent event) {
        int count = 0;
        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity.getType().equals(EntityType.DROPPED_ITEM)) {
                count++;
            }
            if (count > maxDroppedItemsPerChunk) {
                if (usingWhitelist && whitelistedItems.contains(event.getEntity().getItemStack().getType())) continue;
                entity.getScheduler().run(plugin, kill -> entity.remove(), null);
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
                    if (!chunk.getLoadLevel().equals(Chunk.LoadLevel.ENTITY_TICKING)) return;
                    int droppedItems = 0;

                    for (Entity entity : chunk.getEntities()) {
                        if (!entity.getType().equals(EntityType.DROPPED_ITEM)) continue;
                        if (usingWhitelist) {
                            if (!whitelistedItems.contains(((Item) entity).getItemStack().getType())) {
                                droppedItems++;
                                if (droppedItems > maxDroppedItemsPerChunk) {
                                    entity.getScheduler().run(plugin, kill -> {
                                        entity.remove();
                                        if (logIsEnabled) moduleLog(Level.INFO, name(), "Removed dropped item at"
                                                + " x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                                + " in world "+ entity.getWorld().getName() + ", because reached limit of " + maxDroppedItemsPerChunk
                                        );
                                    }, null);
                                }
                            }
                        } else {
                            droppedItems++;
                            if (droppedItems > maxDroppedItemsPerChunk) {
                                entity.getScheduler().run(plugin, kill -> {
                                    entity.remove();
                                    if (logIsEnabled) moduleLog(Level.INFO, name(), "Removed dropped item at"
                                            + " x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                            + " in world "+ entity.getWorld().getName() + ", because reached limit of " + maxDroppedItemsPerChunk
                                    );
                                }, null);
                            }
                        }
                    }
                });
            }
        }
    }
}
