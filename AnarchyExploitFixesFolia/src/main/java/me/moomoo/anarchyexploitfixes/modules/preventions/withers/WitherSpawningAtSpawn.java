package me.moomoo.anarchyexploitfixes.modules.preventions.withers;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.Location;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wither;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;

import java.awt.*;
import java.util.HashMap;
import java.util.Map;

public class WitherSpawningAtSpawn implements AnarchyExploitFixesModule, Listener {

    private final HashMap<String, Integer> worldsAndTheirRadiuses = new HashMap<>();
    private final boolean playersShouldBeInformed;

    public WitherSpawningAtSpawn() {
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("preventions.withers.disable-wither-spawning-at-spawn.enable","Only enable if you must.");
        this.playersShouldBeInformed = config.getBoolean("preventions.withers.disable-wither-spawning-at-spawn.inform-players", true);
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("world", 5000);
        defaults.put("world_nether", 5000);
        defaults.put("world_the_end", 5000);
        ConfigSection section = config.getConfigSection("preventions.withers.disable-wither-spawning-at-spawn.worlds", defaults);
        for (String world : section.getKeys(false)) {
            Integer radius = Integer.valueOf(section.getString(world));
            this.worldsAndTheirRadiuses.put(world, radius);
        }
    }

    @Override
    public String name() {
        return "disable-wither-spawning-at-spawn";
    }

    @Override
    public String category() {
        return "preventions";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("preventions.withers.disable-wither-spawning-at-spawn.enable", false) && !worldsAndTheirRadiuses.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreatureSpawn(CreatureSpawnEvent event) {
        Entity entity = event.getEntity();
        if (!(entity instanceof Wither)) return;

        final String world = entity.getWorld().getName();
        if (worldsAndTheirRadiuses.containsKey(world)) {
            final Integer disabledRadius = worldsAndTheirRadiuses.get(world);
            Location witherLocation = entity.getLocation();
            if (!isInDisabledRange(witherLocation, disabledRadius)) return;

            event.setCancelled(true);

            if (playersShouldBeInformed) {
                for (Player nearbyPlayer : witherLocation.getNearbyPlayers(8, 8, 8)) {
                    nearbyPlayer.sendMessage(AnarchyExploitFixes.getLang(nearbyPlayer.locale()).preventions_witherSpawningDisabledInRadius
                            .replaceText(TextReplacementConfig.builder().matchLiteral("%radius%").replacement(disabledRadius.toString()).build())
                    );
                }
            };
        }
    }

    private static boolean isInDisabledRange(Location witherLocation, Integer disabledRadius) {
        return new Point(witherLocation.getBlockX(), witherLocation.getBlockZ()).distance(new Point(0, 0)) < disabledRadius;
    }
}
