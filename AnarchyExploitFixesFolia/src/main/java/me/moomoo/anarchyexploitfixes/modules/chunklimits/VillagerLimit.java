package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.utils.LocationUtil;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Villager;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.CreatureSpawnEvent;

import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

public class VillagerLimit implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final List<Villager.Profession> removalPriority;
    private ScheduledTask scheduledTask;
    private final long checkPeriod;
    private final int maxVillagersPerChunk;
    private final boolean logIsEnabled;

    public VillagerLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        this.maxVillagersPerChunk = Math.max(config.getInt(configPath() + ".max-villagers-per-chunk", 25), 1);
        this.logIsEnabled = config.getBoolean(configPath() + ".log-removals", false);
        this.checkPeriod = Math.max(config.getInt(configPath() + ".check-period-in-ticks", 600,
                "check all chunks every x ticks."), 1);
        this.removalPriority = config.getList(configPath() + ".removal-priority", Arrays.asList(
                                "NONE", "NITWIT", "SHEPHERD", "FISHERMAN", "BUTCHER", "CARTOGRAPHER", "LEATHERWORKER", "FLETCHER",
                                "MASON", "FARMER", "ARMORER", "TOOLSMITH", "WEAPONSMITH", "CLERIC", "LIBRARIAN"),
                        "Professions that are in the top of the list are going to be scheduled for removal first.")
                .stream()
                .map(configuredProfession -> {
                    try {
                        return Villager.Profession.valueOf(configuredProfession);
                    } catch (IllegalArgumentException e) {
                        notRecognized(Villager.Profession.class, configuredProfession);
                        return null;
                    }
                })
                .filter(Objects::nonNull)
                .toList();
    }

    @Override
    public String configPath() {
        return "chunk-limits.entity-limits.villager-limit";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onCreatureSpawn(CreatureSpawnEvent event) {
        if (event.getEntityType().equals(EntityType.VILLAGER)) {
            this.checkVillagersInChunk(event.getEntity().getChunk());
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), checkChunk -> {
                    if (chunk.isEntitiesLoaded()) {
                        this.checkVillagersInChunk(chunk);
                    }
                });
            }
        }
    }

    private void checkVillagersInChunk(Chunk chunk) {
        Entity[] entities = chunk.getEntities();
        if (entities.length <= maxVillagersPerChunk) return;

        // Create a list with all villagers in that chunk
        List<Villager> villagers_in_chunk = Arrays.stream(entities)
                .filter(entity -> entity.getType().equals(EntityType.VILLAGER))
                .map(entity -> (Villager) entity)
                .collect(Collectors.toList());

        // Check if there are more villagers in that chunk than allowed
        final int amount_over_the_limit = villagers_in_chunk.size() - maxVillagersPerChunk;
        if (amount_over_the_limit <= 0) return;

        // Sort villager list by profession priority
        villagers_in_chunk.sort(Comparator.comparingInt(villager -> {
            final Villager.Profession profession = villager.getProfession();
            return removalPriority.contains(profession) ? removalPriority.indexOf(profession) : Integer.MAX_VALUE;
        }));

        // Remove prioritized villagers that are too many
        for (int i = 0; i < amount_over_the_limit; i++) {
            Villager villager = villagers_in_chunk.get(i);
            villager.getScheduler().run(plugin, kill -> {
                villager.remove();
                if (logIsEnabled) info("Removed villager with profession '" + villager.getProfession() + "' at " +
                        LocationUtil.toString(villager.getLocation()));
            }, null);
        }
    }
}
