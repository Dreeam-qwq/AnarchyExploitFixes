package me.moomoo.anarchyexploitfixes.modules.illegals.blocks;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.SkullType;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.block.Skull;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.world.ChunkLoadEvent;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

public class RemoveIllegalBlocksOnChunkload implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashSet<Material> blocksToRemove = new HashSet<>();
    private final HashSet<String> exemptedWorlds = new HashSet<>();
    private final boolean checkShouldPauseOnLowTPS;
    private final double pauseTPS;

    public RemoveIllegalBlocksOnChunkload() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("illegals.remove-placed-blocks.on-chunkload.enable", "Remove illegally placed blocks on chunkload.");
        config.getList("illegals.remove-placed-blocks.on-chunkload.blocks-to-remove", List.of(
                "PLAYER_HEAD", "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK", "BEDROCK", "BARRIER"
        )).forEach(configuredBlock -> {
            try {
                Material blockToRemove = Material.valueOf(configuredBlock);
                this.blocksToRemove.add(blockToRemove);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
            }
        });
        config.addComment("illegals.remove-placed-blocks.on-chunkload.blocks-to-remove", "Enter PLAYER_HEAD here if you want to remove placed playerheads.");
        this.exemptedWorlds.addAll(config.getList("illegals.remove-placed-blocks.on-chunkload.exempted-worlds", List.of("exampleworld1", "exampleworld2")));
        this.checkShouldPauseOnLowTPS = config.getBoolean("illegals.remove-placed-blocks.on-chunkload.pause-on-low-TPS", false);
        this.pauseTPS = config.getDouble("illegals.remove-placed-blocks.on-chunkload.pause-TPS", 14.0);
    }

    @Override
    public String name() {
        return "remove-placed-blocks.on-chunkload";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.remove-placed-blocks.on-chunkload.enable", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onChunkLoad(ChunkLoadEvent event) {
        if (event.isNewChunk() || checkShouldPauseOnLowTPS && (plugin.tps <= pauseTPS)) return;

        Chunk chunk = event.getChunk();
        World world = chunk.getWorld();
        if (exemptedWorlds.contains(world.getName())) return;

        final int minY = world.getMinHeight();
        final int maxY = world.getMaxHeight();
        final boolean inNether = world.getEnvironment().equals(World.Environment.NETHER);

        plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
            for (int x = 0; x < 16; x++) {
                for (int z = 0; z < 16; z++) {
                    for (int y = minY; y < maxY; y++) {
                        Block block = chunk.getBlock(x, y, z);
                        final Material blockType = block.getType();
                        if (blocksToRemove.contains(blockType)) {
                            if (blockType.equals(Material.PLAYER_HEAD)) {
                                Skull skull = (Skull) block.getState();
                                if (skull.hasOwner() || skull.getSkullType().equals(SkullType.PLAYER)) {
                                    block.setType(Material.AIR, false);
                                }
                            } else if (blockType.equals(Material.BEDROCK)) {
                                if (y > minY+4) { // offset to not delete natural bedrock floor
                                    if (inNether) {
                                        // offset to not delete bedrock ceiling
                                        if (y < 123) block.setType(Material.AIR, false);
                                    } else {
                                        block.setType(Material.AIR, false);
                                    }
                                }
                            } else {
                                block.setType(Material.AIR, false);
                            }
                        }
                    }
                }
            }
        });
    }
}
