package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Item;
import org.bukkit.entity.LivingEntity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.LogUtils.moduleLog;

public class NonLivingEntityLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final boolean logIsEnabled;
    private final int maxNonLivingEntities;
    private final long checkPeriod;

    public NonLivingEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.non-living-limit.enable", "Limit the amount of non living entities in a chunk to prevent lag (does not affect items).");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.non-living-limit.log-removals", true);
        this.maxNonLivingEntities = config.getInt("chunk-limits.entity-limits.non-living-limit.max-non-living-per-chunk", 100);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.non-living-limit.check-period-in-ticks", 20, "20 ticks = 1 second");
    }

    @Override
    public String name() {
        return "entity-limits.non-living-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.non-living-limit.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        if (event.getEntity() instanceof LivingEntity || event.getEntityType().equals(EntityType.DROPPED_ITEM)) return;

        int count = 0;
        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            if (entity instanceof Item) continue;
            if (!(entity instanceof LivingEntity)) {
                count++;
            }
            if (count > maxNonLivingEntities) {
                entity.getScheduler().run(plugin, kill -> entity.remove(), null);
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
                    Chunk.LoadLevel level = chunk.getLoadLevel();
                    if (!level.equals(Chunk.LoadLevel.ENTITY_TICKING) && !level.equals(Chunk.LoadLevel.TICKING)) return;

                    int nonLiving = 0;
                    for (Entity entity : chunk.getEntities()) {
                        if (!(entity instanceof LivingEntity) && !(entity instanceof Item)) {
                            nonLiving++;
                            if (nonLiving > maxNonLivingEntities) {
                                entity.getScheduler().run(plugin, kill -> {
                                    entity.remove();
                                    if (logIsEnabled) moduleLog(Level.INFO, name(), "Removed non-living entity " + entity.getType()
                                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                            + ", because reached limit of " + maxNonLivingEntities
                                    );
                                }, null);
                            }
                        }
                    }
                });
            }
        }
    }
}
