package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.vehicle.VehicleCreateEvent;

public class MinecartLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final int maxMinecartsPerChunk;
    private final long checkPeriod;

    public MinecartLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.minecart-limit.enable", "Limit the amount of minecarts to prevent lag.");
        this.maxMinecartsPerChunk = config.getInt("chunk-limits.minecart-limit.max-minecarts-per-chunk", 25);
        this.checkPeriod = config.getInt("chunk-limits.minecart-limit.check-period-in-ticks", 400, "200 ticks = 10 seconds.");
    }

    @Override
    public String name() {
        return "minecart-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.minecart-limit.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onCreate(VehicleCreateEvent event) {
        if (!event.getVehicle().getType().name().contains("MINECART")) return;

        int count = 0;
        for (Entity entity : event.getVehicle().getChunk().getEntities()) {
            if (entity.getType().name().contains("MINECART")) {
                count++;
                if (count > maxMinecartsPerChunk) {
                    entity.getScheduler().run(plugin, kill -> entity.remove(), null);
                }
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
                    Chunk.LoadLevel level = chunk.getLoadLevel();
                    if (!level.equals(Chunk.LoadLevel.ENTITY_TICKING) && !level.equals(Chunk.LoadLevel.TICKING)) return;

                    int count = 0;
                    for (Entity entity : chunk.getEntities()) {
                        if (entity.getType().name().contains("MINECART")) {
                            count++;
                            if (count > maxMinecartsPerChunk) {
                                entity.getScheduler().run(plugin, kill -> entity.remove(), null);
                            }
                        }
                    }
                });
            }
        }
    }
}
