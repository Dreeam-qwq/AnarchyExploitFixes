package me.moomoo.anarchyexploitfixes.modules.chunklimits;

import io.github.thatsmusic99.configurationmaster.api.ConfigSection;
import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Chunk;
import org.bukkit.World;
import org.bukkit.entity.Entity;
import org.bukkit.entity.EntityType;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntitySpawnEvent;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;

public class CustomEntityLimit implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final HashMap<EntityType, Integer> entityLimits = new HashMap<>();
    private final boolean logIsEnabled;
    private final long checkPeriod;

    public CustomEntityLimit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("chunk-limits.entity-limits.custom-limit.enable",  "Limit specific entity types per chunk.");
        this.logIsEnabled = config.getBoolean("chunk-limits.entity-limits.custom-limit.log-removals", true);
        this.checkPeriod = config.getInt("chunk-limits.entity-limits.custom-limit.check-period-in-ticks", 1200, "check all chunks every x ticks.");
        Map<String, Object> defaults = new HashMap<>();
        defaults.put("WITHER", 16);
        defaults.put("WITHER_SKULL", 10);
        defaults.put("COW", 10);
        defaults.put("CHICKEN", 10);
        defaults.put("WOLF", 15);
        defaults.put("HORSE", 5);
        defaults.put("SKELETON_HORSE", 5);
        defaults.put("DONKEY", 5);
        ConfigSection section = config.getConfigSection("chunk-limits.entity-limits.custom-limit.limited-types", defaults, "Google EntityType Spigot for the correct names. They have to match your minecraft version.");
        for (String configuredEntity : section.getKeys(false)) {
            try {
                Integer maxAmountPerChunk = Integer.valueOf(section.getString(configuredEntity));
                EntityType limitedEntity = EntityType.valueOf(configuredEntity);
                entityLimits.put(limitedEntity, maxAmountPerChunk);
            } catch (NumberFormatException e) {
                LogUtils.integerNotRecognized(Level.WARNING, name(), configuredEntity);
            } catch (IllegalArgumentException e) {
                LogUtils.entityTypeNotRecognized(Level.WARNING, name(), configuredEntity);
            }
        }
    }

    @Override
    public String name() {
        return "entity-limits.custom-limit";
    }

    @Override
    public String category() {
        return "chunk-limits";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), checkPeriod, checkPeriod);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("chunk-limits.entity-limits.custom-limit.enable", false) && !entityLimits.isEmpty();
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
        if (scheduledTask != null) scheduledTask.cancel();
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onSpawn(EntitySpawnEvent event) {
        final EntityType spawnedType = event.getEntityType();
        if (!entityLimits.containsKey(spawnedType)) return;

        final int maxAllowed = entityLimits.get(spawnedType);
        for (Entity entity : event.getEntity().getChunk().getEntities()) {
            int count = 0;
            if (entity.getType().equals(spawnedType)) {
                count++;
                if (count > maxAllowed) {
                    entity.getScheduler().run(plugin, kill -> entity.remove(), null);
                    if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Removed entity " + entity.getType()
                            + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                            + " in "+entity.getWorld().getName()+" because reached limit of " + maxAllowed
                    );
                }
            }
        }
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Chunk chunk : world.getLoadedChunks()) {
                plugin.getServer().getRegionScheduler().run(plugin, world, chunk.getX(), chunk.getZ(), task -> {
                    Chunk.LoadLevel level = chunk.getLoadLevel();
                    if (!level.equals(Chunk.LoadLevel.ENTITY_TICKING) && level.equals(Chunk.LoadLevel.TICKING)) return;

                    for (Map.Entry<EntityType, Integer> limit : entityLimits.entrySet()) {

                        final int maxAllowed = limit.getValue();
                        int count = 0;

                        for (Entity entity : chunk.getEntities()) {
                            if (entity.getType().equals(limit.getKey())) {
                                count++;
                                if (count > maxAllowed) {
                                    entity.getScheduler().run(plugin, kill -> {
                                        entity.remove();
                                        if (logIsEnabled) LogUtils.moduleLog(Level.INFO, name(), "Removed entity " + entity.getType()
                                                + " at x:" + entity.getLocation().getX() + " y:" + entity.getLocation().getY() + " z:" + entity.getLocation().getZ()
                                                + " in "+entity.getWorld().getName()+" because reached limit of " + maxAllowed
                                        );
                                    }, null);
                                }
                            }
                        }
                    }
                });
            }
        }
    }
}
