package me.moomoo.anarchyexploitfixes.modules.elytra;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerKickEvent;
import org.bukkit.event.player.PlayerMoveEvent;
import org.bukkit.event.player.PlayerQuitEvent;

import java.util.HashMap;
import java.util.UUID;

public class ElytraTimer implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final HashMap<UUID, Integer> elytraMoveCounts = new HashMap<>();
    private final int maxMoveEventsPer10Seconds;
    private final boolean shouldCheckPermission, notify, kickPlayer;

    public ElytraTimer() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("elytra.timer-elytra-fly.patch-timer-elytra-fly","Patch aef speed limit bypass using timer. Adjust values according to your needs.");
        this.shouldCheckPermission = config.getBoolean("elytra.timer-elytra-fly.use-bypass-permission", false);
        this.maxMoveEventsPer10Seconds = config.getInt("elytra.timer-elytra-fly.max-elytra-moves-per-10-seconds", 250, "Experimental value. Please adjust.");
        this.notify = config.getBoolean("elytra.timer-elytra-fly.notify-player-to-disable-timer", true, "Configure message in lang folder.");
        this.kickPlayer = config.getBoolean("elytra.timer-elytra-fly.kick-player", false, "If enabled, will disconnect player from the server.");
    }

    @Override
    public String name() {
        return "timer-elytra-fly";
    }

    @Override
    public String category() {
        return "elytra";
    }

    @Override
    public void enable() {
        AnarchyExploitFixes plugin = AnarchyExploitFixes.getInstance();
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("elytra.timer-elytra-fly.patch-timer-elytra-fly", false);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onElytraFly(PlayerMoveEvent event) {
        Player player = event.getPlayer();
        if (!player.isGliding()) return;
        if (shouldCheckPermission && player.hasPermission("anarchyexploitfixes.bypass")) return;

        final UUID playerUniqueID = player.getUniqueId();

        if (!elytraMoveCounts.containsKey(playerUniqueID)) {
            elytraMoveCounts.put(playerUniqueID, 1);
            plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, decay -> {
                if (elytraMoveCounts.containsKey(playerUniqueID))
                    elytraMoveCounts.put(playerUniqueID, elytraMoveCounts.get(playerUniqueID) - 1);
            }, 200L);
            return;
        }

        if (elytraMoveCounts.get(playerUniqueID) <= maxMoveEventsPer10Seconds) {
            elytraMoveCounts.merge(playerUniqueID, 1, Integer::sum);
            plugin.getServer().getGlobalRegionScheduler().runDelayed(plugin, decay -> {
                if (elytraMoveCounts.containsKey(playerUniqueID))
                    elytraMoveCounts.put(playerUniqueID, elytraMoveCounts.get(playerUniqueID) - 1);
            }, 200L);
            return;
        }

        if (kickPlayer) {
            player.getScheduler().run(plugin, kick -> player.kick(AnarchyExploitFixes.getLang(player.locale()).elytra_disable_timer), null);
        } else {
            event.setCancelled(true);
            if (notify) player.sendActionBar(AnarchyExploitFixes.getLang(player.locale()).elytra_disable_timer);
        }
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onLeave(PlayerQuitEvent event) {
        elytraMoveCounts.remove(event.getPlayer().getUniqueId());
    }

    @EventHandler(priority = EventPriority.HIGH, ignoreCancelled = true)
    private void onKick(PlayerKickEvent event) {
        elytraMoveCounts.remove(event.getPlayer().getUniqueId());
    }
}
