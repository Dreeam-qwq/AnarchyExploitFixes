package me.moomoo.anarchyexploitfixes.modules.packets;

import com.github.retrooper.packetevents.PacketEvents;
import com.github.retrooper.packetevents.event.PacketListenerPriority;
import com.github.retrooper.packetevents.event.PacketReceiveEvent;
import com.github.retrooper.packetevents.protocol.packettype.PacketType;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientPlayerBlockPlacement;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientPlayerDigging;
import com.github.retrooper.packetevents.wrapper.play.client.WrapperPlayClientUseItem;
import io.papermc.lib.PaperLib;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;

public class AntiSequenceCrash extends AEFPacketModule {

    private final boolean log, kick;

    public AntiSequenceCrash() {
        super(PacketListenerPriority.HIGHEST);
        shouldEnable();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "Patches a variety of lag/crash exploits that involves sending packets with invalid sequences.");
        this.log = config.getBoolean(configPath() + ".log", false);
        this.kick = config.getBoolean(configPath() + ".kick-player", false);
    }

    @Override
    public String configPath() {
        return "patches.sequence-crash-patch";
    }

    @Override
    public void enable() {
        PacketEvents.getAPI().getEventManager().registerListener(this);
    }

    @Override
    public void disable() {
        PacketEvents.getAPI().getEventManager().unregisterListener(this);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true)
                && PaperLib.getMinecraftVersion() >= 19;
    }

    @Override
    public void onPacketReceive(PacketReceiveEvent event) {
        int sequence;
        if (event.getPacketType() == PacketType.Play.Client.PLAYER_BLOCK_PLACEMENT) {
            sequence = new WrapperPlayClientPlayerBlockPlacement(event).getSequence();
        } else if (event.getPacketType() == PacketType.Play.Client.PLAYER_DIGGING) {
            sequence = new WrapperPlayClientPlayerDigging(event).getSequence();
        } else if (event.getPacketType() == PacketType.Play.Client.USE_ITEM) {
            sequence = new WrapperPlayClientUseItem(event).getSequence();
        } else {
            return;
        }

        if (sequence < 0) {
            event.setCancelled(true);
            onCancel(log, kick, event.getUser());
        }
    }
}
