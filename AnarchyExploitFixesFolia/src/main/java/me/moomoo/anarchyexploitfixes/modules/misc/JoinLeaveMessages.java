package me.moomoo.anarchyexploitfixes.modules.misc;

import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.enums.AEFKey;
import me.moomoo.anarchyexploitfixes.modules.AEFModule;
import me.moomoo.anarchyexploitfixes.enums.AEFPermission;
import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.TextReplacementConfig;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.persistence.PersistentDataContainer;
import org.bukkit.persistence.PersistentDataType;

public class JoinLeaveMessages implements AEFModule, Listener {

    private final AnarchyExploitFixes plugin;
    private final boolean connectionMsgsOnByDefault, showInConsole, firstJoinEnabled;

    public JoinLeaveMessages() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment(configPath() + ".enable",
                "If you want to hide yourself or someone else when logging into the game,\n" +
                        "use these permissions: anarchyexploitfixes.silentJoin, anarchyexploitfixes.silentLeave");
        this.connectionMsgsOnByDefault = config.connectionMsgsAreOnByDefault;
        this.showInConsole = config.getBoolean(configPath() + ".show-in-console", false);
        this.firstJoinEnabled = config.getBoolean(configPath() + ".first-join-messages.enable", false);
    }

    @Override
    public String configPath() {
        return "misc.join-leave-messages";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean(configPath() + ".enable", true);
    }

    @Override
    public void disable() {
        HandlerList.unregisterAll(this);
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        event.joinMessage(null);
        final Player joiningPlayer = event.getPlayer();
        if (joiningPlayer.hasPermission(AEFPermission.SILENT_JOIN.get())) return;
        if (firstJoinEnabled && !joiningPlayer.hasPlayedBefore()) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            onlinePlayer.getScheduler().execute(plugin, () -> {
                final PersistentDataContainer dataContainer = onlinePlayer.getPersistentDataContainer();
                if (
                        !dataContainer.has(AEFKey.CONNECT_MSG_TOGGLE.getKey()) ? connectionMsgsOnByDefault :
                        dataContainer.get(AEFKey.CONNECT_MSG_TOGGLE.getKey(), PersistentDataType.BOOLEAN)
                ) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.locale()).misc_joinMessage
                            .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(joiningPlayer.name()).build()));
                }
            }, null, 1L);
        }

        if (showInConsole) {
            AnarchyExploitFixes.getUnprefixedLogger().info(AnarchyExploitFixes.getLang(joiningPlayer.locale()).misc_joinMessage
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(joiningPlayer.name()).build())
                    .append(Component.text(" (" + joiningPlayer.locale() + ")")));
        }
    }

    @EventHandler(priority = EventPriority.HIGHEST, ignoreCancelled = true)
    private void onPlayerLeaveEvent(PlayerQuitEvent event) {
        event.quitMessage(null);
        final Player leavingPlayer = event.getPlayer();
        if (leavingPlayer.hasPermission(AEFPermission.SILENT_LEAVE.get())) return;

        for (final Player onlinePlayer : plugin.getServer().getOnlinePlayers()) {
            onlinePlayer.getScheduler().execute(plugin, () -> {
                if (onlinePlayer.getUniqueId().equals(leavingPlayer.getUniqueId())) return;
                final PersistentDataContainer dataContainer = onlinePlayer.getPersistentDataContainer();
                if (
                        !dataContainer.has(AEFKey.CONNECT_MSG_TOGGLE.getKey()) ? connectionMsgsOnByDefault :
                        dataContainer.get(AEFKey.CONNECT_MSG_TOGGLE.getKey(), PersistentDataType.BOOLEAN)
                ) {
                    onlinePlayer.sendMessage(AnarchyExploitFixes.getLang(onlinePlayer.locale()).misc_leaveMessage
                            .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(leavingPlayer.name()).build()));
                }
            }, null, 1L);
        }

        if (showInConsole) {
            AnarchyExploitFixes.getUnprefixedLogger().info(AnarchyExploitFixes.getLang(leavingPlayer.locale()).misc_leaveMessage
                    .replaceText(TextReplacementConfig.builder().matchLiteral("%player%").replacement(leavingPlayer.name()).build())
                    .append(Component.text(" (" + leavingPlayer.locale() + ")")));
        }
    }
}
