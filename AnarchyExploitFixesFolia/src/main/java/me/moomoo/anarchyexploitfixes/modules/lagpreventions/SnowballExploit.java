package me.moomoo.anarchyexploitfixes.modules.lagpreventions;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import org.bukkit.World;
import org.bukkit.entity.*;

public class SnowballExploit implements AnarchyExploitFixesModule {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask scheduledTask;
    private final int max_alive_time;
    private final long check_period_in_ticks;

    public SnowballExploit() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.addComment("lag-preventions.prevent-snowball-exploit.enable",  "Patches a lag exploit.");
        this.max_alive_time = config.getInt("lag-preventions.prevent-snowball-exploit.projectiles-max-alive-time-in-ticks", 300, "(20 ticks = 1 second) Will not touch Ender Pearls");
        this.check_period_in_ticks = config.getInt("lag-preventions.prevent-snowball-exploit.check-period-in-seconds", 20, "How frequently we should check for all projectile's alive time") * 20L;
    }

    @Override
    public String name() {
        return "prevent-snowball-exploit";
    }

    @Override
    public String category() {
        return "lag-preventions";
    }

    @Override
    public void enable() {
        this.scheduledTask = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, task -> run(), check_period_in_ticks, check_period_in_ticks);
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("lag-preventions.prevent-snowball-exploit.enable", false);
    }

    @Override
    public void disable() {
        if (scheduledTask != null) scheduledTask.cancel();
    }

    private void run() {
        for (World world : plugin.getServer().getWorlds()) {
            for (Projectile projectile : world.getEntitiesByClass(Projectile.class)) {
                projectile.getScheduler().run(plugin, removeOld -> {
                    if (
                            projectile instanceof EnderPearl
                            || projectile instanceof WitherSkull
                            || projectile instanceof FishHook
                            || projectile instanceof EnderSignal
                    ) return;

                    if (projectile.getTicksLived() > max_alive_time) {
                        projectile.remove();
                    }
                }, null);
            }
        }
    }
}
