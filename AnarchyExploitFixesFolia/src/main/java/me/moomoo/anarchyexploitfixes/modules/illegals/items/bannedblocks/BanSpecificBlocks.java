package me.moomoo.anarchyexploitfixes.modules.illegals.items.bannedblocks;

import io.papermc.paper.threadedregions.scheduler.ScheduledTask;
import me.moomoo.anarchyexploitfixes.AnarchyExploitFixes;
import me.moomoo.anarchyexploitfixes.config.Config;
import me.moomoo.anarchyexploitfixes.modules.AnarchyExploitFixesModule;
import me.moomoo.anarchyexploitfixes.utils.LogUtils;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.ShulkerBox;
import org.bukkit.entity.HumanEntity;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.HandlerList;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryDragEvent;
import org.bukkit.event.inventory.InventoryMoveItemEvent;
import org.bukkit.event.inventory.InventoryOpenEvent;
import org.bukkit.event.player.PlayerAttemptPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;
import org.bukkit.inventory.meta.BundleMeta;

import java.util.HashSet;
import java.util.List;
import java.util.logging.Level;

import static me.moomoo.anarchyexploitfixes.utils.ItemUtils.isShulkerBox;

public class BanSpecificBlocks implements AnarchyExploitFixesModule, Listener {

    private final AnarchyExploitFixes plugin;
    private ScheduledTask periodicInvCheck;
    private Listener hopperListener;
    private final boolean enableStrictPrevention, removeIllegalShulkers, preventIllegalUnbundle, preventHopperBypass;
    private final HashSet<Material> bannedItems = new HashSet<>();
    private final long checkPeriod;

    public BanSpecificBlocks() {
        shouldEnable();
        this.plugin = AnarchyExploitFixes.getInstance();
        Config config = AnarchyExploitFixes.getConfiguration();
        config.getList("illegals.ban-specific-blocks.banned-blocks", List.of(
                "CHAIN_COMMAND_BLOCK", "COMMAND_BLOCK", "COMMAND_BLOCK_MINECART", "REPEATING_COMMAND_BLOCK",
                "BEDROCK", "BARRIER", "STRUCTURE_BLOCK", "STRUCTURE_VOID", "END_PORTAL_FRAME", "END_PORTAL", "NETHER_PORTAL", "LIGHT"
        )).forEach(configuredBlock -> {
            try {
                Material bannedMaterial = Material.valueOf(configuredBlock);
                this.bannedItems.add(bannedMaterial);
            } catch (IllegalArgumentException e) {
                LogUtils.materialNotRecognized(Level.WARNING, name(), configuredBlock);
            }
        });
        this.preventHopperBypass = config.getBoolean("illegals.ban-specific-blocks.prevent-hopper32k-mechanic", false, """
                Prevents Hopper32k mechanic of placing a shulker containing illegals on top of a hopper and using the illegal\s
                out of the hoppers inventory.\s
                WARNING: Hooks into InventoryMoveItemEvent, which can become resource intense. Enable only if you need to.""");
        this.removeIllegalShulkers = config.getBoolean("illegals.ban-specific-blocks.delete-shulker-if-contains-banned-block", false);
        this.preventIllegalUnbundle = config.getBoolean("illegals.ban-specific-blocks.bundles-cant-unbundle-if-contains-banned-block", true);
        this.enableStrictPrevention = config.getBoolean("illegals.ban-specific-blocks.periodically-check-player-inventories.enable", false);
        this.checkPeriod = config.getInt("illegals.ban-specific-blocks.periodically-check-player-inventories.check-period-in-ticks", 20);
    }

    @Override
    public String name() {
        return "ban-specific-blocks.remove-items";
    }

    @Override
    public String category() {
        return "illegals";
    }

    @Override
    public void enable() {
        plugin.getServer().getPluginManager().registerEvents(this, plugin);

        if (preventHopperBypass) {
            this.hopperListener = new Listener() {
                @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
                private void onInventoryMove(InventoryMoveItemEvent event) {
                    if (bannedItems.contains(event.getItem().getType())) {
                        event.setCancelled(true);
                    }
                }
            };
            plugin.getServer().getPluginManager().registerEvents(hopperListener, plugin);
        }

        if (enableStrictPrevention) {
            this.periodicInvCheck = plugin.getServer().getGlobalRegionScheduler().runAtFixedRate(plugin, periodic_inv_check -> {
                plugin.getServer().getOnlinePlayers().forEach(player -> player.getScheduler().run(plugin, scheduled_inv_check ->
                        player.getInventory().forEach(this::handleBannedBlocksIfPresent), null));
            }, checkPeriod, checkPeriod);
        }
    }

    @Override
    public boolean shouldEnable() {
        return AnarchyExploitFixes.getConfiguration().getBoolean("illegals.ban-specific-blocks.remove-items", true);
    }

    @Override
    public void disable() {
        if (periodicInvCheck != null) periodicInvCheck.cancel();
        if (hopperListener != null) HandlerList.unregisterAll(hopperListener);
        HandlerList.unregisterAll(this);
    }

    private void handleBannedBlocksIfPresent(ItemStack item) {
        if (item == null || item.getType().equals(Material.AIR)) return;

        if (bannedItems.contains(item.getType())) {
            item.subtract(item.getAmount());
            return;
        }

        if (removeIllegalShulkers) {
            if (isShulkerBox(item) && shulkerContainsBannedBlock((ShulkerBox) ((BlockStateMeta) item.getItemMeta()).getBlockState())) {
                item.subtract(item.getAmount());
            }
        }
    }

    private boolean shulkerContainsBannedBlock(ShulkerBox shulker) {
        for (ItemStack shulkerContentItem : shulker.getInventory()) {
            if (shulkerContentItem != null && bannedItems.contains(shulkerContentItem.getType())) {
                return true;
            }
        }
        return false;
    }

    private boolean bundleContainsIllegal(ItemStack item) {
        if (item == null) return false;
        if (!item.getType().equals(Material.BUNDLE)) return false;
        BundleMeta meta = (BundleMeta) item.getItemMeta();
        if (!meta.hasItems()) return false;

        for (ItemStack bundleItem : meta.getItems()) {
            if (bundleItem != null && bannedItems.contains(bundleItem.getType())) {
                return true;
            }
        }
        return false;
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerJoinEvent(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        player.getInventory().forEach(this::handleBannedBlocksIfPresent);
        player.getEnderChest().forEach(this::handleBannedBlocksIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onPlayerInteractEvent(PlayerInteractEvent event) {
        handleBannedBlocksIfPresent(event.getItem());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerDropItemEvent(PlayerDropItemEvent event) {
        handleBannedBlocksIfPresent(event.getItemDrop().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onPlayerPickupItem(PlayerAttemptPickupItemEvent event) {
        handleBannedBlocksIfPresent(event.getItem().getItemStack());
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onBlockPlace(BlockPlaceEvent event) {
        if (removeIllegalShulkers) {
            Block placedBlock = event.getBlockPlaced();
            if (isShulkerBox(placedBlock.getType()) && shulkerContainsBannedBlock((ShulkerBox) placedBlock.getState())) {
                placedBlock.setType(Material.AIR);
            }
        }
    }

    // Inventory Events
    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryOpenEvent(InventoryOpenEvent event) {
        event.getInventory().forEach(this::handleBannedBlocksIfPresent);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = false)
    private void onInventoryClick(InventoryClickEvent event) {
        if (preventIllegalUnbundle && event.isRightClick()) {
            if (bundleContainsIllegal(event.getCursor()) || bundleContainsIllegal(event.getCurrentItem())) {
                event.setCancelled(true);
            }
        }

        HumanEntity player = event.getWhoClicked();
        player.getScheduler().runDelayed(plugin, checkInvAfterClick -> {
            handleBannedBlocksIfPresent(event.getCursor());
            handleBannedBlocksIfPresent(event.getCurrentItem());
            event.getInventory().forEach(this::handleBannedBlocksIfPresent);
            player.getInventory().forEach(this::handleBannedBlocksIfPresent);
        }, null, 1L);
    }

    @EventHandler(priority = EventPriority.NORMAL, ignoreCancelled = true)
    private void onInventoryInteractEvent(InventoryDragEvent event) {
        event.getInventory().forEach(this::handleBannedBlocksIfPresent);
    }
}
